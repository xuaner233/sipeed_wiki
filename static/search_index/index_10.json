{"/hardware/en/maixsense/maixsense-a075v/maixsense-a075v.html":{"title":"MaixSense-A075V","content":"# MaixSense A075V ## Summary ![mt_big](./../../../zh/maixsense/maixsense a075v/assets/mt_big.jpg) MS A075V is a 3D TOF camera module with RGB designed by Sipeed, can display the live 3D picture. ## User Guide ### Preparation To run preview MaixSense A075V on Windows, install the driver. **Windows Installation driver tutorial:**[Click to view](./install_drivers.html) ### On page preview ![tof 07514](./../../../zh/maixsense/maixsense a075v/assets/mt_pin.jpg) >Before using this device, make sure that the `192.168.233.0/24` address segment is not occupied in your network environment, because the MS A075V uses RNDIS and sets its IP address `http://192.168.233.1`. Connect the module to the PC with power according to the figure above, then the built in fan will start to work and the red light will be displayed at the lens. Select the browser and enter `http://192.168.233.1` to preview the 3D point cloud image. After power on, the system and program will be started 10s 15s delayed. **Quick preview using web upper computer (front and side) :** <html> <img src \"./../../../zh/maixsense/maixsense a075v/assets/mt_examle.jpg\" width 48%> <img src \"./../../../zh/maixsense/maixsense a075v/assets/mt_examleb.jpg\" width 48%> </html> We can preview the depth pseudo color point cloud map. Open the interaction panel in the upper right corner, uncheck RGB_Map in the first line. ![mt_examlec](./../../../zh/maixsense/maixsense a075v/assets/mt_examlec.jpg) ### Interactive configuration The preview webpage contained many function configurations, we can change them to get different live preview result. ![mt_examled](./../../../zh/maixsense/maixsense a075v/assets/mt_examled.jpg) Here tells the functions of each widgets. **RGB_Map** checkbox, control RGB map. Display the deep pseudo colored point map when checked, display the RGB mapped point cloud map when unchecked. **colorMap** drop down bar, provides several pseudo color mapping options(cmap)，jet is recommended. Avaliable when RGB_Map is unchecked. **deepRangeMax** and **deepRangeMin** slide bar are used for setting the mapping range of cmap, the depth value between deepRangeMin and deepRangeMax are OK. Avaliable when RGB_Map is unchecked. **NormalPoint** checkbox, control the display of normal point(There maybe some invalidation points when TOF worked, need to do opposite action). Recommend checked. **OE_Points** checkbox, control the display of OE point. Recommend unchecked. **UE_Points** checkbox, control the display of UE point. Recommend unchecked. **Bad_Points** checkbox, control the display of bad point. Recommend unchecked **SpatialFilter** checkbox, control the Spatial filtering. Processing based on the spatialFilterSize value below and the algorithm specified by the SpatialFilterType. **TemporalFilter** checkbox, control the Temporal filtering, A time average is calculated based on the temporalfilteralpha values below. **TemporalFilteralpha** slide bar, set the time for Temporal filtering. Adjust it moderate, can be tested by yourself. **SpatialFilterType** drop down bar, set the Spatial filtering algorithm, provides Gaussian filtering and Bilateral filtering. Bilateral filtering requires high performance, not recommended. **SpatialFilterSize** slide bar, set the range for Spatial Filter. Adjust it moderate, can be tested by yourself. **FlyingPointFilter** checkbox, control the flying point filter. Set the the following FlyingPointThreshold value as the filtering threshold, those that exceed the threshold will be filtered out. Set it moderate, otherwise the validation points will be filtered out. ### Save data The webpage provides 2 buttons at the bottom of the control bar. **SaveRaw**：Save one frame raw data. If you want to use the depth data or IR or RGB data for development, you need to know the data struct of raw. We provide a detailed `jupyter notebook` about the data processing of raw for users and developers. **SavePointCloud**：Sava one frame 3D point map, and its saved format is `pcd`. Can be previewed via the script provided above. Note: The data of raw can be get through open interface, which developers can do development on. While the pointcloud data does not provide any interface since it's calculated based on the raw data and camera internal parameters. ### SSH login In addition to using the web page to preview directly, we can also login using SSH with password `root` In the web preview page we know the ip address of this device is `192.168.233.1`, with which we can login to this device. ```bash ssh root@192.168.233.1 ``` ### Firmware Update Replace the corresponding file in `/root/maix_dist` directory. [Click to download the update file](https://dl.sipeed.com/shareURL/MaixSense/MaixSense_A075V/03_Firmware) ### Case: Real shooting of distant, near and far point cloud High precision mapping of differences in object placement distances, point cloud maps can intuitively feel a more realistic visualization. ![mt_cloud](./../../../zh/maixsense/maixsense a075v/assets/mt_cloud.jpg) ### Case: Car avoid obstacles The module can be carried by a car or drone to move back and forth to obtain the depth value of the obstacle, and judge whether there is an obstacle in the screen through the difference, make a rapid response and accurately avoid the obstacle (the example has not been open sourced, will be sorted out and disclosed). ![me_car](./../../../zh/maixsense/assets/me_car.gif) ### Case: Detect foot traffic High precision, high resolution real time monitoring of the flow of people moving around the situation statistics(the example has not been open sourced, will be sorted out and disclosed). ![me_pt](./../../../zh/maixsense/assets/me_pt.jpg) ## Custom development ### python SDK This is a SDK based on `Python3`. MS A075V opens its http interface, we can get its origin data (Depth map, ir map, rgb map) through http request. To help user understand the struct of data package and the relevant logic of decoding, we provide decoding related functions that encapsulate http requests and native data, based on which users can do custom development. **Get SDK**:[Click to download](https://dl.sipeed.com/fileList/others/maixsense_example/maixsense_075_tutorial.ipynb) **Method**：Install `jupyter`, connect to the TOF module, then open the `toturial.py` file. ### Decode and stream After understanding the struct of data package and the relevant logic of decoding from `Python SDK`, we can do advanced development, continuously get, decode and call the third party `python` image library, like matplotlib for live display. The `toturial.py` gives the implementation of getting onr frame data, and it can achieve live display by `plt` with loop. **Decoding and steraming**:[Click me to see content of stream.py](https://wiki.sipeed.com/hardware/zh/maixsense/maixsense a010/code.html#streampy) **Methods**：Run command `python stream.py` after installing all dependent packages. ![mt_sdk](./../../../zh/maixsense/maixsense a075v/assets/mt_sdk.jpg) ### Detect volume Based on third party `python` library，and have understood the logic of getting and decoding data, we can do more development: Continuously display frames, roughly calculate the point cloud through the data from TOF module by SDK, do the accumulation to get the total volume. Limit: The top view should include all details except bottom. **Detect volume**：[Click to view calVolumes.py](https://wiki.sipeed.com/hardware/zh/maixsense/maixsense a010/code.html#calvolumespy) **Methods**：Run command `python calVolumes.py` after installing all dependent packages, there will be notice after you run it. ![mt_volumbs](./../../../zh/maixsense/maixsense a075v/assets/mt_volumbs.jpg) ## Use ROS To begin this, install ROS on your computer first. ### Use ROS1 **1. Preparation** Prepare a Linux enviroment for ROS. **2. Install and RUN** [Access package download.](https://dl.sipeed.com/shareURL/MaixSense/MaixSense_A075V/software/SDK) ```bash #Extract sipeed_tofv075 ros.zip，and open its path source /opt/ros/*/setup.sh catkin_make source devel/setup.sh rosrun sipeed_tof_cpp publisher #Then the terminal continuously refreshes the command line ``` ![mt_adb](./../../../zh/maixsense/maixsense a075v/assets/mt_adb.jpg) **3. View frames in RQT** ![mt_rqta](./../../../zh/maixsense/maixsense a075v/assets/mt_rqta.jpg) **4. RVIZ preview** Open `rviz2`, in the bottom left interface choose `Add` >`By topic` >`PointCloud2 or/depth` >`Image add` >`Display/Global Options/Fixed Frame`, changed it into `tof`, in this way it displays point cloud normally. According to the added content, the `Image` displays in the left and the point cloud display in the center. ![mt_ros](./../../../zh/maixsense/maixsense a075v/assets/mt_ros.jpg) ### Use ROS2 **1. Preparation** Prepare a Linux enviroment for ROS. **2. Install and RUN** We have provided the functional package for ROS2, users need compile and run it on the system with ROS2.[Access package download.](https://dl.sipeed.com/shareURL/MaixSense/MaixSense_A075V/software/SDK). ``` bash #Extract sipeed_tofv075_ros2.zip，and open its path source /opt/ros/*/setup.sh colcon build #If it indicates missing colcon, use command sudo apt install python3 colcon ros source install/setup.sh ros2 run sipeed_tof_cpp publisher #Then the terminal continuously refreshes the command line and display [sipeed_tof]: Publishing,this means it works normally. ``` **3. View frames by RQT** Open `RQT` and select `Plugins` >`Topics` >`Topic Monitor`. ![mt_rqt](./../../../zh/maixsense/maixsense a075v/assets/../assets/mt_rqt.jpg) **4. RVIZ2 Priview** Open `rviz2`, in the bottom left interface choose `Add` >`By topic` >`PointCloud2 or/depth` >`Image add` >`Display/Global Options/Fixed Frame`, changed it into `tof`, in this way it displays point cloud normally. According to the added content, the `Image` displays in the left and the point cloud display in the center. **The result of mixing Pseudo colored point clouds and RGB:** <html> <img src \"./../../../zh/maixsense/maixsense a075v/assets/mt_rosb.jpg\" width 48%> <img src \"./../../../zh/maixsense/maixsense a075v/assets/mt_rosc.jpg\" width 48%> </html>"},"/hardware/en/maixsense/maixsense-a075v/install_drivers.html":{"title":"Install RNDIS driver","content":"# Install RNDIS driver ## Introduction RNDIS is the abbreviation of Remote Network Driver Interface Specification, is a specification to run TCP/IP on USB devices. ## Install guide In Windows7 and later operating systems, RNDIS is already built in. But we need do some operations to make the computer generally recognize the relevant RNDIS compliant device. ### Download driver <! **Windows Driver:**[Click me](https://dl.sipeed.com/shareURL/MaixSense/Drivers) > **Windows Driver:**[Click me](https://dl.sipeed.com/fileList/MaixSense/Drivers/Ethernet_RNDIS_drivers_20220808.zip) ### Install driver Connect the device with computer, then we can see Serial Device in computer device manager. If there is no Serial Device in the computer device manager, maybe because of insufficient power supply. For desktop we recommend use the USB port on the back, for those who use USB hub we recommend use extra power supply for the hub, and we suggest to use the USB 3.0 port because USB 2.0 may lack of power to drive. ![Serial device](./assets/install_drivers/serial.png) Right click it, choose Update driver, then choose `Broswer my computer for drivers` ![Update drivers](./assets/install_drivers/update.png) We choose `Let me pick from...` ![Choose driver](./assets/install_drivers/scan.png) We choose `Have Disk...` ![Install_from_dick](./assets/install_drivers/install.png) We choose `Broswe...` ![broswer](./assets/install_drivers/path.png) Open the extracted downloaded file path, choose one .inf file, click the `open`. ![inf](./assets/install_drivers/inf.png) Here we click `OK` ![click_ok](./assets/install_drivers/click_ok.png) Then we choose `Next`. ![Next](./assets/install_drivers/next.png) We have finished installing driver. ![Finish](./assets/install_drivers/finish.png) Replug USB device, and wait about 10 seconds, we can see `RNDIS/Ethernet Gadget` in Network adapters in Device Manager."},"/hardware/en/maixsense/maixsense-a010/at_command_en.html":{"title":"MaixSense-A010 Development","content":"# MaixSense A010 Development ## AT Command AT                                                                                                                                                                                                                                             +ISP<br>Image Signal Processor :0: turn ISP off<br> 1: turn ISP on                                                                                                                                                                             +BINN<br>full binning           1: output 100x100 pixel frame<br> 2: output 50x50 pixel frame<br> 4: output 25x25 pixel frame<br>                                                                                                             +DISP<br>display mux           0: all off<br> 1: lcd display on<br> 2: usb display on<br> 3: lcd and usb display on<br> 4: uart display on<br> 5: lcd and uart display on<br> 6: usb and uart display on<br> 7: lcd, usb and uart display on +BAUD<br>uart baudrate         0: 9600<br> 1: 57600<br> 2: 115200<br> 3: 230400<br> 4: 460800<br> 5: 921600<br> 6: 1000000<br> 7: 2000000<br> 8: 3000000                                                                                     +UNIT<br>quantization unit     0: auto<br> 1 10: quantizated by unit(mm)                                                                                                                                                                     +FPS<br>frame per second       1 19: set frame per second                                                                                                                                                                                     +Save<br>save config           : save current configuration                                 syntax: inputexecutecomment AT+ISP? \\rReturn to current ISP status AT+ISP ? \\rReturns the status of all supported ISPs AT+ISP < MODE >\\rSelect ISP status parameter: < MODE > Meaning 0 \"STOP ISP\" Close the module ISP immediately, stop the IR transmitter 1 \"LAUNCH ISP\" It is planned to start the module ISP, and the actual drawing needs to wait 1 2 seconds ### BINN instruction syntax: Enter Execute Comment AT+BINN? \\r Return the current BINN status AT+BINN ? \\r Returns all supported BINN states AT+BINN < MODE > \\r Select BINN state parameter: < MODE > Meaning 1 \"1x1 BINN\" 1x1 is equivalent to no binning, and the actual output resolution is 100x100. 2 \"2x2 BINN\" 2×2 binning, 4 pixels are merged into 1, the actual output resolution is 50×50. The module ISP is planned to be activated, and the actual output needs to wait for 1 to 2 seconds. 4 \"4x4 BINN\" 4×4 binning, 16 pixels are merged into one, and the actual output resolution is 25×25. ### DISP instruction Please enable it as needed to avoid excessive resource usage syntax: Enter Execute Comment AT+DISP? \\r Return to current DISP status AT+DISP ? \\r Returns all supported DISP states AT+DISP < MODE > \\r Select DISP state parameter: < MODE > Meaning 0 all off 1 lcd display on 2 usb display on 3 lcd and usb display on 4 uart display on 5 lcd and uart display on 6 usb and uart display on 7 lcd, usb and uart display on ### BAUD instruction syntax: Enter Execute Comment AT+BAUD? \\r Return to current BAUD status AT+BAUD ? \\r Returns all supported BAUD states AT+BAUD < MODE > \\r Select BAUD state parameter: < MODE > Meaning 0 9600 1 57600 2 115200 3 230400 4 460800 5 921600 6 1000000 7 2000000 8 3000000 ### UNIT directive syntax: Enter Execute Comment AT+UNIT? \\r Returns the current UNIT value AT+UNIT ? \\r Returns all supported UNIT values AT+UNIT < UINT > \\r Select UNIT value parameter: < UINT > Meaning 0 \"DEFAULT UNIT\" The default quantization strategy is used. Due to the tof characteristic, the imaging accuracy at near distances is better than that at far distances. Therefore, the difference at short distances is enlarged, and 5.1*sqrt(x) is used to quantify the original data of 16 bits into 8 bits 1...9 \"QUANTIZE UNIT\" Represents quantization in x mm. The smaller the value, the more details and the shorter the visual distance. Please set it properly ### FPS command syntax: Enter Execute Comment AT+FPS? \\r Returns the current FPS value AT+FPS ? \\r Returns all supported FPS values AT+FPS <FPS> \\r Select FPS value parameter: < FPS > Meaning 1...19 \"frame per second\" tof output frame rate, the bigger the better the smoother ### SAVE instruction syntax: Enter Execute Comment AT+SAVE \\r The current configuration of the TOF camera is cured, and it needs to be reset afterwards Multi machine and AE instructions are recommended to be added ### ANTIMMI instruction syntax: Enter Execute Comment AT+ANTIMMI? \\r Returns the current ANTIMMI state AT+ANTIMMI ? \\r Returns all supported ANTIMMI states AT+ANTIMMI < MODE > \\r Select ANTIMMI state parameter: < MODE > meaning 1 disable anti mmi 0 auto anti mmi 1 41 manual anti mmi usb display on ### Image Packet Description When power on, the ISP will be activated by default and display the image on the display screen, and output the image data to uart and usb at the same time Image data encapsulated into packets (not stabilized): 1. Header 2 bytes: 0X00, 0XFF 2. Packet length 2 bytes: the number of bytes of remaining data in the current packet 3. Other content 16 bytes: including packet serial number, packet length, resolution, etc. 4. Image frame 5. Check 1 byte: the lower eight bits of the \"sum\" of all previous bytes 6. 1 byte at the end of the packet: 0XDD"},"/hardware/en/maixsense/maixsense-a010/maixsense-a010.html":{"title":"MaixSense-A010","content":"# MaixSense A010 ## Product description ![ms_small](./../../../zh/maixsense/maixsense a010/assets/ms_s.jpg) **MaixSense A010** is an extremely cost effective 3D sensor module composed of BL702 + OPNOUS 100x100 TOF launched by Sipeed, which supports a maximum resolution of 100x100 and 8 bit precision, and comes with a 240x135 pixel LCD display to preview the depth map after colormap in real time. **Data summary** Hardware information:[Click to download](https://dl.sipeed.com/shareURL/MaixSense/MaixSense_A010) ## Product unpacking guide ### Preparation MaixSense A010 Uses the serial port protocol to provide interfaces and transmit data. The physical interfaces we provide include type c (virtual serial port) and 1.0mm 4pin motherboard (UART), which can obtain depth map data for integration. **Product wiring instructions** After connecting to the computer through the type c interface, it can identify `/dev/ttyUSBx (Linux)` or `COMx (Windows)`. ![ms_pinb](./../../../zh/maixsense/maixsense a010/assets/ms_pinb.jpg) The usb2ttl module can also be used to connect the 4 PIN bus according to the hardware pin diagram (device screen face down). <html> <img src \"./../../../zh/maixsense/maixsense a010/assets/ms_pin.jpg\" width 48%> <img src \"./../../../zh/maixsense/maixsense a010/assets/ms_pinc.jpg\" width 48%> </html> <table> <tr> <td>MS A010</td> <td>TX</td> <td>RX</td> <td>GND</td> <td>5V</td> </tr> <tr> <td>usb2ttl 模块</td> <td>RX</td> <td>TX</td> <td>GND</td> <td>5V</td> </tr> </table> ### Power up preview **Button function**: \"Next\" on the left and \"Switch\" on the right. **Screen display**: the + word in the center of the screen is the ranging point, and the top right will display real time **xx cm** on behalf of the distance ranging. If there is a large area of objects near the lens, \"**block!**\" will be displayed on the right of the screen. In other cases **open!**. After the device is connected to the power supply, you can preview the depth pseudo color map in real time on the built in LCD screen of the device. ![ms_comtool](./../../../zh/maixsense/maixsense a010/assets/ms_lcd.jpg) ### PC side preview interaction Install COMTOOL on the upper computer before previewing and modifying the Settings on the PC. **Windows system**:[Click to download](https://dl.sipeed.com/shareURL/MaixSense/MaixSense_A010/software_pack/comtool) **Linux system**:[Users need to compile/click to jump](https://github.com/sipeed/MetaSense ComTool) > Note: Windows 7 and below systems need to install the driver, you can go to the FTDI official website to download. Open the COMTOOL software and select the Graph interface. If there is no Graph above the software, you can add a Graph at the + sign in the upper right corner. If the middle part is blank after creation, double click MaixSenseLite in the lower left corner ![ms_lcd](./../../../zh/maixsense/maixsense a010/assets/ms_comtool.jpg) Select a small Port and baud rate in the left port (choose any high baud rate), click open and check USB to receive a large amount of data. Connected will be displayed in the lower left corner. ![ms_comtool_two](./../../../zh/maixsense/maixsense a010/assets/ms_comtoolt.jpg) Set the Header to \\x00\\xFF to correctly parse the image data and observe the depth map to intuitively feel the depth on the 2D flat image. ![ms_comtool_three](./../../../zh/maixsense/maixsense a010/assets/ms_comtoolh.jpg) ### Comtool configuration instructions Comtool configuration control description of the host computer **Header**:et the identification header. **RawCMD**:User can send commands manually (USB and UART serial ports behave the same). **ISP**:start stop. **LCD**:display the lcd screen on and off. **USB**:serial port transmission depth map on and off. **UART**:serial port transmission depth map on and off. **ANTIMMI**:Automatic anti multi machine interference is turned on and off (susceptible to interference, the effect of turning off is better) **Binn**:pull down to set BINNING, Baud to set UART baud rate. **X, Y**:coordinates:When the checkbox to the left of D is on, the (x,y) distance from the camera is displayed. **Unit**:sets the quantization unit:16 bit quantization to 8 bit, the scale is reduced, if the setting is too small, only very close images can be seen clearly. **FPS**:Set the output frame rate (it should not be too high, set it reasonably according to the performance of the docking device, reducing the frame rate can reduce the amount of transmitted data) **Ev**:Exposure gap control (leftmost represents AE, others are fixed exposure time) ## Case:Measure Objects Distance The distance between the objects is placed to form the difference in depth value. After the module captures the difference, it displays a warm and cold color, a warm color when the distance is close, and a cool color when the distance is far. ![ms carton](./../../../zh/maixsense/maixsense a010/assets/ms_carton.jpg) ## Case:Passengers Flow Statistical Real time, high precision, high resolution monitoring of human flow and quickly statistical data. ![ms people](./../../../zh/maixsense/maixsense a010/assets/ms people.jpg) ## Case:Gesture Interaction Realize super cool keyboard light follow,track the position of the hand in real time,and then map the keyboard light according to the position of the hand. [Related code](https://dl.sipeed.com/shareURL/others/maixsense_example) ![ma_lamp](./../../../zh/maixsense/maixsense a010/assets/ms_lamp.jpg) ## Case:Connect to MCUs MS A010 has strong compatibility and is based on serial protocol. It can be connected to single chip development boards such as K210 bit or linux development boards such as Raspberry Pi for secondary development. The k210 Bit development board is a member of the sipeed Maix product line. It is an AIOT development board designed based on the edge intelligent computing chip K210 (RISC V architecture 64 bit dual core) of Canaan Canzhi Technology. [Click to learn about K210 Bit](https://www.aliexpress.com/item/1005002547039100.html?spm 5261.ProductManageOnline.0.0.15744edfvEngHc) [MS A010 external K210 bit source code acquisition](./../../../zh/maixsense/maixsense a010/code.html#tof_mainpy) ![ms_mcu](./../../../zh/maixsense/maixsense a010/assets/ms_mcu.jpg) ## Secondary development:Serial protocol Please refer to the above case: **MS A010 external K210 bit** MS A010 Secondary Development Manual:[Click to view](./at_command_en.html) ## Secondary development:Access ROS ### Access ROS1 **1. Preparations** First, prepare the applicable environment: `Linux` system. You can use the virtual machine `virtual box` or `vmware`. **2. Install and run** ROS Access Package: [Click to download.](https://dl.sipeed.com/shareURL/MaixSense/MaixSense_A010/software_pack/SDK) ```bash # Unzip sipeed_tof_ms_a010.zip and enter the directory cd ros1 source /opt/ros/*/setup.sh catkin_make source devel/setup.sh rosrun sipeed_tof_ms_a010 a010_publisher _device: \"/dev/ttyUSB0\" # After that, the terminal will continue to refresh and display [sipeed_tof]: Publishing, that is, it works normally ``` ![](./../../../zh/maixsense/maixsense a010/assets/ros_adb.jpg) **3. You can view the frame rate in RQT** ![ms rosone](./../../../zh/maixsense/maixsense a010/assets/ms_rosone.jpg) **4. RVIZ2 Preview** After opening `rviz2`, in the lower left corner of the interface `Add` >`By topic` >`PointCloud2 or /depth` >`Image Add` >`Display/Global Options/Fixed Frame` needs to be modified to `tof `, the point cloud can be displayed normally. According to the added content, `Image` will be displayed on the left and the point cloud will be displayed in the middle. ![ms_rviz](./../../../zh/maixsense/maixsense a010/assets/ms_rviz.jpg) ### Access ROS2 **1. Preparations** First, prepare the applicable environment: `Linux` system. You can use the virtual machine `virtual box` or `vmware`. >If your environment also has ROS1 installed, ROS2 will need to be used with the correct version. ```bash ls /opt/ros ros@ros virtual machine:~/Desktop$ ls /opt/ros noetic rolling ``` **2. Install and run** We provide an access package for ROS2, which users need to compile and install on a system running ROS2. ROS Access Package:[Click to download.](https://dl.sipeed.com/shareURL/MaixSense/MaixSense_A010/software_pack/SDK) ```bash #Unzip sipeed_tof_ms_a010.zip and enter the directory cd ros2 source /opt/ros/*/setup.sh colcon build #If you are prompted that colcon is missing, you need sudo apt install python3 colcon ros source install/setup.sh ros2 run sipeed_tof_ms_a010 publisher ros args p device: \"/dev/ttyUSB0\" # After that, the terminal will continue to refresh and display [sipeed_tof]: Publishing, that is, it works normally ``` **3. RQT View frame rate** ![ms_rqt](./../../../zh/maixsense/maixsense a010/assets/ms_rqt.jpg) **4. RVIZ2 Preview** After opening `rviz2`, in the lower left corner of the interface `Add` >`By topic` >`PointCloud2 or /depth` >`Image Add` >`Display/Global Options/Fixed Frame` needs to be modified to `tof `, the point cloud can be displayed normally. According to the added content, `Image` will be displayed on the left and the point cloud will be displayed in the middle. ![ms_ros](./../../../zh/maixsense/maixsense a010/assets/ms_ros.jpg)"},"/hardware/en/maixsense/index.html":{"title":"MaixSense series","content":" title: MaixSense series ## What is MaixSense? <img src \"./../../zh/maixsense/assets/meta.jpg\" alt \"summary\" width 100%> MaixSense series products are equipped with TOF depth cameras, currently there are two products: MaixSense A010 and MaixSense A075V. MS A010 is an extremely cost effective TOF 3D sensor module composed of BL702 + OPNOUS 100x100 TOF module, which supports a maximum resolution of 100x100 and 8 bit Preview the depth map after color map in real time. While MS A075V is a 3D TOF camera module with RGB function, this module can realize Linux driver free plug and play and real time color 3D display. Purchase method:[Aliexpress](https://www.aliexpress.com/item/1005004984020473.html) <p style \"white space:nowrap\">MaixSense A010</p> <p style \"white space:nowrap\">MaixSense A075V</p> : : : ![me small](./../../zh/maixsense/assets/me_small.jpg) ![me big](./../../zh/maixsense/assets/me_big.jpg) Interface UART 1.25mm connector \\*1<br>USB2.0 Type C connector \\*1 UART 1.25mm connector \\*1 <br>USB2.0 Type C connector \\*1 Resolution TOF: 100x100@30fps RGB: 1600x1200@30fps<br>TOF: 320x240@60fps FOV RGB: No<br>TOF: 70°(H) * 60°(V) RGB: 120°<br>TOF: 55°(H)*72°(H) <p style \"white space:nowrap\">TOF pixel size</p> 15um Laser transmitter 940nm VCSEL 940nm,3W Distance 0.2 2.5m 0.15 1.5m Accuracy &lt; 1%/cm &lt; 1%/cm ## What can MaixSense do? ### Case:Real shot of far, middle and near objects High precision mapping of the difference in the distance between items, the point cloud map can intuitively feel a more realistic visualization. <html> <img src \"./../../zh/maixsense/maixsense a010/assets/ms_cloud.jpg\" width 48%> <img src \"./../../zh/maixsense/maixsense a075v/assets/mt_cloud.jpg\" width 48%> </html> ### Case:statistics traffic It can monitor the flow of people in real time and make statistics with high precision and large resolution. <html> <img src \"./../../zh/maixsense/assets/me_p.jpg\" width 48%> <img src \"./../../zh/maixsense/assets/me_pt.jpg\" width 48%> </html> ### Case:obstacle avoidance car It can be mounted on a robot car to move and determine whether there are obstacles on the screen.The module comes with an LCD screen to accurately display the distance and respond to avoid obstacles. ![me_car](./../../zh/maixsense/assets/me_car.jpg) ### Case:Keyboard lights follow gesture changes Realize super cool keyboard light follow,track the position of the hand in real time,and then map the keyboard light according to the position of the hand. ![ms_lamp](./../../zh/maixsense/maixsense a010/assets/ms_lamp.jpg) ### Case:Volume measurement After obtaining the camera internal parameters through the SDK, a preliminary point cloud is calculated, and the total volume is accumulated to achieve the effect of volume measurement. ![mt_volume](./../../zh/maixsense/maixsense a075v/assets/mt_volumbs.jpg) ### Case:Access to MCU MS A010 has strong compatibility and is based on serial protocol. It can be connected to single chip development boards such as K210 bit or linux development boards such as Raspberry Pi for secondary development. ![ms_mcu](./../../zh/maixsense/maixsense a010/assets/ms_mcu.jpg) ### Case: Support ROS1 + ROS2 Dual support ROS system, open ROS1 + ROS2 access function package, can quickly obtain depth data and depth map. <html> <img src \"./../../zh/maixsense/assets/me_ross.jpg\" height 250 width 49%> <img src \"./../../zh/maixsense/assets/me_rosb.jpg\" width 49% height 250> </html> ## Quick understanding of TOF technology 1. TOF: It is a method of distance measurement, which calculates the distance between the two by measuring the \"time of flight\" of signals such as ultrasonic/microwave/light between the transmitter and the reflector. It is the TOF sensor that can achieve TOF ranging. The most commonly used is infrared or laser ranging. 2. There is a difference in the distance between the objects. The module displays the cold and warm colors through the difference of the captured depth values. The cool and warm colors change with the mapping of the distance. <html> <img src \"./../../zh/maixsense/assets/tof_two.jpg\" height 250 width 49%> <img src \"./../../zh/maixsense/assets/tof.jpg\" width 49% height 250> </html> ## More For more detailed information about MS 010: [Click to jump](https://wiki.sipeed.com/en/maixsense10) For more detailed information about MS 075: [Click to jump](https://wiki.sipeed.com/en/maixsense75)"},"/hardware/en/index.html":{"title":"Sipeed Hardware","content":" title: Sipeed Hardware keywords: Sipeed, Hardware, Sipeed, Hardware specifications, Documentation, Downloaden, Deeplearning, Artificial Intelligence, K210 desc: Sipeed hardware documentation website ## Summary [Maix I & Zero](#maix i zero) AI devemopment board based on MCU [Maix II](#maix ii series)：Linux AI devemopment board with tiny size. [Maix III](#maix iii)： Linux AI devemopment board with high performance [LicheePI](#licheepi series)： Linux devemopment board [Tang](#tang fpga series)：FPGA devemopment board [MaixSense](#maixsense series)：3D TOF Module [Longon](#longon series)：MCU Development board [MaixFace](#maixface 模组)：Business board [其他外设](#外设模组) ## Maix Zero Item M0S M0 : : : Chip BL616 BL702 Core RV32GCP@320MHz RV32@144MHz RAM 480KB 132KB Storage 4MB Flash Inside 192KB ROM, 512KB Flash Inside Wireless · Wifi<br>· Bluetooth<br>· Zigbee Bluetooth Model platform [MaixHub](https://www.maixhub.com) [MaixHub](https://www.maixhub.com) Size 11(L)x10(W)mm Detail [Click me](./maixzero/m0s/m0s.html) [Click me](./maixzero/sense/maix_zero_sense.html) Outlook <img src \"./../zh/maixzero/m0s/assets/m0s/m0s_pin_map.png\" alt \"m0sense\" width \"360\"> <img src \"./../zh/maixzero/sense/assets/m0sense_1.png\" alt \"m0sense\" width \"360\"> ## Maix I Detail M1/M1w M1n M1s M0 : : : : : MainChip K210 K210 BL808 BL702 Core RV64@400MHz \\* 2 RV64@400MHz \\* 2 RV64GCV@480MHz<br>RV32GCP@320MHz<br>RV32EMC@160MHz RV32@144MHz RAM 8MB 8MB 64MB 132KB Wireless M1w supports Wifi · Wifi<br>· Bluetooth<br>· Zigbee Bluetooth Package Stamp hole Golden finger Stamp hole Model platform [MaixHub](https://www.maixhub.com) [MaixHub](https://www.maixhub.com) [MaixHub](https://www.maixhub.com) [MaixHub](https://www.maixhub.com) Size 25.4(L)x25.4(W)mm 25.0(L)x22.0(W)mm 31.0(L)x18.0(W)mm Details [Click me](./maix/core_module.html) [Click me](./maix/M1n.html) [Click me](./maix/m1s/m1s_module.html) [Click me](./maixzero/sense/maix_zero_sense.html) ### Maix I S This is the AIOT module and develptment board based on BL808. [M1s](./maix/m1s/m1s_module.html) [M1s Dock](./maix/m1s/m1s_dock.html) Appearance <a href \"https://wiki.sipeed.com/en/m1s\"><img src \"https://gd4.alicdn.com/imgextra/i4/2200606237318/O1CN011g9yY323vhCXEyiKU_!!2200606237318.jpg\" style \"transform:rotate(270deg);\" alt \"M1s_module\" width \"80%\"></a> <a href \"https://wiki.sipeed.com/en/m1s#dock\"><img src \"https://gd1.alicdn.com/imgextra/i1/2200606237318/O1CN01gE4a1E23vhCV77ggE_!!2200606237318.jpg\" style \"transform:rotate(270deg);\" alt \"M1s_Dock\" width \"80%\"></a> ### Maix I This is a series of AIOT development boards based on K210 in 2019. <table role \"table\" class \"center_table\"> <tbody> <tr> <th scope \"col\"></th> <th scope \"col\">Maix Bit</th> <th scope \"col\">Maix Dock</th> <th scope \"col\">Maix Duino</th> <th scope \"col\">Maix nano</th> </tr> <tr> <td style \"white space:nowrap\">Appearance</td> <td> <a href \"./maix/maixpy_develop_kit_board/maix_bit.html\" target \"_blank\"><img src \"./maix/assets/dk_board/maix_bit/Bit.png\" ></a> </td> <td><a href \"./maix/maixpy_develop_kit_board/Maix_dock.html\" target \"_blank\"><img src \"./maix/assets/dk_board/maix_dock/Dan_Dock.png\" ></a></td> <td><a href \"./maix/maixpy_develop_kit_board/maix_duino.html\" target \"_blank\"><img src \"./maix/assets/dk_board/maix_duino/maixduino_0.png\" ></a></td> <td><a href \"./maix/maixpy_develop_kit_board/maix_nano.html\"><img src \"./maix/assets/dk_board/maix_nano/maix_nano.jpg\" alt \"Maxi nano\"></a></td> </tr> <tr> <th scope \"col\"></th> <th scope \"col\">Maix Cube</th> <th scope \"col\">Maix Amigo</th> <th scope \"col\">Maix HAT</th> <th scope \"col\">Maix Go</th> </tr> <tr> <td style \"white space:nowrap\">Appearance</td> <td><a href \"./maix/maixpy_develop_kit_board/maix_cube.html\" target \"_blank\"><img src \"./maix/assets/dk_board/maix_cube/maix_cube.png\" ></a></td> <td><a href \"./maix/maixpy_develop_kit_board/maix_Amigo.html\" target \"_blank\"><img src \"./maix/assets/dk_board/maxi_amigo/maix_amigo_0.png\" ></a></td> <td><a href \"./maix/maixpy_develop_kit_board/maix_hat.html\"><img src \"./../../soft/maixpy/assets/hardware/grove_ai_hat/grove_ai_hat1.png\" alt \"Maix HAT\"></a></td> <td><a href \"./maix/maixpy_develop_kit_board/maix_go.html\" target \"_blank\"><img src \"./maix/assets/dk_board/maix_go/Go.jpg\" ></a></td> </tr> </tbody> </table> ### Support Maix series products have meet different needs of customers in a variety of situations. The quality and performance are good reputation in the industry. Professional technical team solves various problems in hardware design or software usages for our customers. For business cooperation, please contact <support@sipeed.com>. ## Maix II Detail MaixII Dock MaixII Sense MaixII S : : : : MainChip V831 R329 V833 Core Cortex A7@800MHz Cortex A53\\*2@1.5GHz Cortex A7@1.2GHz RAM 64MB 256MB 默认 128MB Wireless Wifi · Wifi<br>· Bluetooth · Wifi Appearance <img src \"https://gd3.alicdn.com/imgextra/i3/2200606237318/O1CN01dT63dq23vhAOtdtm7_!!2200606237318.png_400x400.jpg\" style \"transform:rotate(0deg);\" alt \"MaixII Dock\"> <img src \"https://gd3.alicdn.com/imgextra/i3/2200606237318/O1CN01AJdLYs23vh6b40oy2_!!2200606237318.png_400x400.jpg\" style \"transform:rotate(0deg);\" alt \"MaixII Sense\"> <img src \"https://gd2.alicdn.com/imgextra/i2/2200606237318/O1CN01C4iTYi23vh6muQApg_!!2200606237318.png_400x400.jpg\" style \"transform:rotate(0deg);\" alt \"MaixII S\"> Model platform [MaixHub](https://www.maixhub.com) Details [Click me](http://wiki.sipeed.com/m2dock) [Click me](./maixii/m2a/maixsense.html) [Click me](./maixii/M2S/V833.html) Notes <strong>Popular product</strong>，it supports hardware AI acceleration (0.2Tops computing power) unit. At present, the software support is the easiest to get started. C SDK and Python SDK are provided. And an online model training service (<a href \"https://maixhub.com\" target \"_blank\">MaixHub</a>) Hardware AI acceleration unit with 0.25Tops computing power Business only ## Maix III Latest AI development board, with good performance and enough memory, many connectors and supports plenty of operators. MaixIII axpi : : Chip Ax620a CPU Cortex A7\\*4@1.0GHz NPU 14.4Tops@int4，3.6Tops@int8 ISP 4K@30fps RAM 2GB LPDDR4X 3733Mhz CAMERA 3 CAMERA max <br>· 1 x MIPI4 LANE CSI<br>· 2 x MIPI2 LANE CSI SCREEN 4 LANE MIPI DSI NETWORK · 1000M ETHERNET <br>· 2.4GHz WI FI USB CONNECTOR · 1 x USB2.0HS For user，<br>· 1 x USB UART for controling OUTLOOK <img src \"https://gd2.alicdn.com/imgextra/i2/2200606237318/O1CN01AY6Mu123vhBaHWr6H_!!2200606237318.jpg_400x400.jpg\" style \"transform:rotate(0deg);\" alt \"MaixIII Axpi\" width \"40%\"> MODELS [MaixHub](https://www.maixhub.com) Visit [Maix III AXera Pi](./maixIII/ax pi/axpi.html) to know more. ## LicheePI series Lichee RV Lichee Zero Plus Lichee Zero Lichee nano : : : : : SOC Allwinner D1 Allwinner S3 Allwinner V3s Allwinner F1c100s CPU Xuantie C906 Cortex™ A7 Cortex™ A7 ARM 926EJS Frequency 1GHz 1.2GHz 1.2GHz(max) 600MHz(max) RAM 512MB DDR3 128Mbyte DDR3 64MB DRAM 32MB DDR FLASH Optional SD nand Optional SD Nand, SPI Nor Flash or eMMC eserved SOP8 SPI Flash PAD Onboard 16MB NOR FLASH TF Slot YES YES YES YES LicheePI is the linux development board. <table> <thead> <tr> <th style \"text align:center\">Lichee Zero</th> <th style \"text align:center\">Lichee Nano</th> </tr> </thead> <tbody> <tr> <td style \"text align:center\"><a href \"./lichee/Zero/Zero.html\"><img src \"./lichee/assets/Zero/Zero_1.png\" alt \"Lichee Zero\"></a></td> <td style \"text align:center\"><a href \"./lichee/Nano/Nano.html\" ><img src \"./lichee/assets/Nano/Nano_2.png\" alt \"Lichee Nano\"></a></td> </tr> </tbody> <thead> <tr> <th style \"text align:center\">Lichee Zero Plus</th> <th style \"text align:center\">Lichee RV</th> </tr> </thead> <tbody> <tr> <td style \"text align:center\"><a href \"./lichee/ZeroPlus/ZeroPlus.html\"><img src \"./lichee/assets/Zero Plus/Plus_1.jpg\" alt \"Tang Nano 4K\"></a></td> <td style \"text align:center\"><a href \"./lichee/RV/RV.html\"><img src \"./lichee/assets/RV/D1 4.png\" alt \"Lichee RV\"></a></td> </tr> </tbody> </table> ## Tang FPGA series <p style \"white space:nowrap\">Tang Primer 20K</p> <p style \"white space:nowrap\">Tang Nano 9K</p> <p style \"white space:nowrap\">Tang Nano 4K</p> <p style \"white space:nowrap\">Tang Nano 1K</p> : : : : LUT4 20736 8640 4608 1152 Flip Flop 15552 6480 3456 864 S SRAM (bits) 41472 17280 B SRAM (bits) 828K x 46 468K x 26 180K x 10 72K x 4 User Flash (bits) 608K 256K 96K PLL 4 2 2 1 Onboard Flash 32Mbits NOR Flash 32Mbits NOR Flash 32Mbits NOR Flash PAD reserved Embedded core Cortex M3 Tang FPGA series Contains `Tang Nano` and `Tang Primer` . <table> <thead> <tr> <th style \"text align:center\">Tang Primer 20K (COre Module) </th> <th style \"text align:center\">Tang Nano 1K</th> </tr> </thead> <tbody> <tr> <td style \"text align:center\"><a href \"./tang/tang primer 20k/primer 20k.html\"><img src \"./tang/../../assets/Tang/primer_20k/primer_20k.png\" alt \"Tang Primer 20K（核心板）\"></a></td> <td style \"text align:center\"><a href \"./tang/Tang Nano 1K/Nano 1k.html\"><img src \"./tang/../../assets/Tang/Nano 1K/1K.png\" alt \"Tang Nano 1K\"></a></td> </tr> </tbody> <thead> <tr> <th style \"text align:center\">Tang Nano 4K</th> <th style \"text align:center\">Tang Nano 9K</th> </tr> </thead> <tbody> <tr> <td style \"text align:center\"><a href \"./tang/Tang Nano 4K/Nano 4K.html\"><img src \"./tang/../../assets/Tang/Nano_4K/Nano_4K.png\" alt \"Tang Nano 4K\"></a></td> <td style \"text align:center\"><a href \"./tang/Tang Nano 9K/Nano 9K.html\"><img src \"./tang/../../assets/Tang/Nano 9K/9K.png\" alt \"Tang Nano 9K\"></a></td> </tr> </tbody> </table> ### Sold Out FPGA Tang Nano Tang Primer : : : : [![Tang Nano](./tang/../../assets/Tang/Nano/Tang_Nano.jpg)](./tang/Tang Nano/Nano.html) [![Tang Primer](./tang/../../assets/Tang/permier/Tang_permier.jpg)](./tang/Tang primer/Tang primer.html) ## MaixSense series Depth camera based on TOF Maixsense a010 MaixSense a075V Outlook ![me_small](./../../hardware/zh/maixsense/assets/me_small.jpg) ![me_big](./../../hardware/zh/maixsense/assets/me_big.jpg) Interface 1.25mm Uart connector \\*1<br>Type C USB2.0 \\*1 1.25mm Uart connector \\*1 <br>Type C USB2.0 \\*1 Solution TOF：100x100@30fps RGB：1600x1200@30fps<br>TOF：320x240@60fps Field Angle RGB：None<br>TOF：70°(H) \\* 60°(V) RGB：120°<br>TOF：55°(H)\\*72°(H) <p style \"white space:nowrap\">TOF pixel size</p> 15um Laser transmitter 40nm VCSEL 940nm,3W Measuring range 0.2 2.5m 0.15 1.5m Measurement accuracy &lt; 1%/cm &lt; 1%/cm ## SLogic series SLogic is Sipeed Logic Analyzer. Lite8 Combo8 Chip BL616 BL616 Communication USB2.0 HS USB2.0 HS Sampling rate@Channels 160M@2Channel<br>80M@4Channel<br>40M@8Channel 160M@2Channel<br>80M@4Channel<br>40M@8Channel Signal input range 0～3.6V 0～3.6V Voltage identification VIH: >2V<br>VIL: <0.8V VIH: >2V<br>VIL: <0.8V CKLink Support DapLink Support UART Support 4 UART, each UART at 20MBps max ## Longon series MCU Development board <img src \"./longan/Nano/assets/longan_nano.jpg\" alt \"longan_nano\" width \"40%\"> [Click me](./longan/Nano/assets/index.html) to know more. ## MaixFace Module Business only. ## Peripheral Visit [homepage](https://wiki.sipeed.com/en/) to locate your device and read more."},"/hardware/en/logic_analyzer/combo8/index.html":{"title":"SLogic Combo8","content":" title: SLogic Combo8 keywords: LogicAnalyzer, debugger, link, RISCV, tool update: date: 2023 03 09 version: v0.1 author: wonder content: 新建文件 ## 简介 SLogic Combo8 是基于 Sipeed M0s Dock 进行二次开发而成的逻辑分析仪，除此之外还有 Cklink、Daplink 和 USB 转四串口的功能。 ## 参数 ## 引脚分布 ## 使用说明 ### 逻辑分析仪 ### Cklink ### Daplink ### USB 转四串口"},"/hardware/en/logic_analyzer/index.html":{"title":"SLogic series","content":" title: SLogic series keywords: LogicAnalyzer, debugger, link, RISCV, tool update: date: 2023 03 09 version: v0.1 author: wonder content: 新建文件 SLogic 的意思是 Sipeed Logic Analyzer，中文意思为逻辑分析仪。"},"/hardware/en/maixzero/sense/maix_zero_sense.html":{"title":"M0sense Board","content":" title: M0sense Board keywords: BL702 ,M0sense update: date: 2022 11 16 version: v0.1 author: wonder content: Creat file ## Summary Sipeed M0sense is an AIOT development board based on BL702 of [Bouffalo Lab](https://en.bouffalolab.com/), it's RISC V architecture, supports low energy bluetooth. There is a 8Pins FPC connector for connecting LCD screen, and 1 microphone, 1 RGB LED and a six axis sensor chip are on this board. One USB 2.0 FS routes to Type C interface. Buy one: [Aliexpress](https://www.aliexpress.com/item/1005005012406688.html) Render picture: <img src \"./../../../../hardware/zh/maixzero/sense/assets/m0sense_1.png\" alt \"m0sense_1.png\"> Real picture: <div> <img src \"./../../../../hardware/zh/maixzero/sense/assets/m0sense_outlook_top.png\" alt \"m0sense_outlook_top.png\" width 20%> <img src \"./../../../../hardware/zh/maixzero/sense/assets/m0sense_outlook_bot.png\" alt \"m0sense_outlook_bot.png\" width 20%> </div> ## Video Introduction video for [M1s Dock](https://wiki.sipeed.com/en/m1s#dock) and M0Sense. M0Sense introduction starts at 3:15, before when the introduction of [M1s Dock](https://wiki.sipeed.com/en/m1s#dock) is. <iframe width \"560\" height \"315\" src \"https://www.youtube.com/embed/hkSAW42Evl4?start 197\" title \"M0Sense\" frameborder \"0\" allow \"accelerometer; autoplay; clipboard write; encrypted media; gyroscope; picture in picture\" allowfullscreen></iframe> ## Feature Mainchip BL702 RISC V 144MHz BlueTooth 5.0/ BLE Onboard screen interface (Optional 0.68 inch 80x160 solution screen) Onboard 1 analog microphone、1 LED、1 IMU Route USB 2.0 FS to USB Type C port ## Parameter <table> <thead> <tr> <th colspan \"2\" > M0sense </th> </tr> </thead> <tbody> <tr> <td rowspan \"6\" style \"white space:nowrap\">Mainchip BL702</td> </tr> <tr> <td>32 bits RISC V with FPU (Max Freq 144MHz)</td> </tr> <tr> <td>132KB RAM，192KB ROM, 512KB Flash</td> </tr> <tr> <td> · Two 32 bit timer <br> · Eight DMA channels <br> · One SPI <br> · Two UART <br> · One I2C interface <br> · One I2S <br> · Five PWM <br> · One 12 bit ADC <br> · One 10 bit DAC <br> </td> </tr> <tr> <td>Wireless：<br> · 2.4Ghz BlueTooth V5.0<br> · 1Mbps and 2Mbps BLE </td> </tr> <tr> <td> USB 2.0 FS route to USB Type C to burn firmware </td> </tr> <tr> <td rowspan \"6\" style \"white space:nowrap\"> Onboard components </td> </tr> <tr> <td>Screen interface (Optional 0.68 inch 80x160 solution screen)</td> </tr> <tr> <td> One analog microphone </td> </tr> <tr> <td> One RGB LED</td> </tr> <tr> <td> One six axis IMU（QMI8658A）</td> </tr> <tr> <td>Ceramic antenna</td> </tr> <tr> <td rowspan \"5\" style \"white space:nowrap\"> Others </td> </tr> <tr> <td> 3D file model：<a href \"https://dl.sipeed.com/shareURL/Maix Zero/M0sense/5_3D_file\">Click me</a> </td> </tr> <tr> <td>External TYPE C PORT power supply requirements：<br>5V±10% 0.5A</td> </tr> <tr> <td>Temperature rise: &lt;30K</td> </tr> <tr> <td>Operating temperature: 10℃ ~ 65℃</td> </tr> </tbody> </table> <img src \"./../../../../hardware/zh/maixzero/sense/assets/m0sense_size.png\" alt \"m0sense_size\" width 55%> ## Pinmap <img src \"./../../../../hardware/zh/maixzero/sense/assets/m0sense_pinmap.png\" alt \"m0sense_pinmap\" width 75%> ## Comparsion <table> <thead> <tr> <th>Item</th> <th>Arduino Nano 33 BLE SENSE</th> <th>Sipeed M0sense</th> </tr> </thead> <body> <tr> <td> MCU </td> <td>nRF52840 (Cortex M4)</td> <td>BL702 (RV32)</td> </tr> <tr> <td>Freq</td> <td>64MHz</td> <td>144MHz</td> </tr> <tr> <td>SRAM</td> <td>256KB</td> <td>132KB</td> </tr> <tr> <td>Bluetooth</td> <td>Yes</td> <td>Yes</td> </tr> <tr> <td>IIC/UART/SPI</td> <td>Yes</td> <td>Yes</td> </tr> <tr> <td>LED</td> <td>Single</td> <td>RGB Three color</td> </tr> <tr> <td>MIC</td> <td>Yes</td> <td>Yes</td> </tr> <tr> <td>IMU</td> <td>Yes</td> <td>Yes</td> </tr> <tr> <td>Other sensors</td> <td>APDS9960，LPS22HB，HTS221</td> <td></td> </tr> <tr> <td>LCD</td> <td></td> <td>Optional 0.68 inch 80x160 solution screen</td> </tr> <tr> <td>USB</td> <td>Yes</td> <td>Yes</td> </tr> <tr> <td>Dimenssion</td> <td>45mm x 18mm</td> <td>23mm x 18mm</td> </tr> <tr> <td>Model platform</td> <td>TFLite Micro + edge impulse</td> <td>TinyMaix + MaixHub</td> </tr> <tr> <td>Price</td> <td>$40</td> <td>$4</td> </tr> </body> </table> ## Software <table> <thead> <tr> <th colspan \"2\" > M0sense </th> </tr> </thead> <tbody> <tr> <td>OS</td> <td>FreeRTOS</td> </tr> <tr> <td>Development</td> <td>· C SDK<br>· MaixHAL C <br>· pikascript</td> </tr> <tr> <td>Burn Firmware </td> <td>· USB virtual uart<br>· USB virtual disk burn</td> </tr> <tr> <td>AI Framework</td> <td>TinyMaix Framework</td> </tr> <tr> <td>AI model</td> <td>· Download from <a href \"https://maixhub.com/\">MaixHub</a>. Support voice response, gesture detection and other models</td> </tr> <tr> <td>Sipeed examples</td> <td>· https://github.com/sipeed</td> </tr> </tbody> </table> ## Links [Board Datasheet](https://dl.sipeed.com/shareURL/Maix Zero/M0sense/1_Specification) [Board Schematic](https://dl.sipeed.com/shareURL/Maix Zero/M0sense/2_Schematic) [Board Bit map](https://dl.sipeed.com/shareURL/Maix Zero/M0sense/3_Bit_number_map) [Board Dimension](https://dl.sipeed.com/shareURL/Maix Zero/M0sense/4_Dimensional_drawing) [3D model file](https://dl.sipeed.com/shareURL/Maix Zero/M0sense/5_3D_file) [Bouffalolab official documents](https://dev.bouffalolab.com/home/) [BL702 DataSheet](https://github.com/bouffalolab/bl_docs/tree/main/BL702_DS/en) (github) [BL702 Reference Manual](https://github.com/bouffalolab/bl_docs/tree/main/BL702_RM/en) (github) [Bouffalolab SDK](https://github.com/bouffalolab/bouffalo_sdk)(Github) [Sipeed example](https://gitee.com/Sipeed/M0sense_BL702_example)(Github) [Telegram](https://t.me/sipeed) [Twitter](https://twitter.com/SipeedIO) [Reddit](https://www.reddit.com/r/Sipeed/) [Online model platform](https://maixhub.com/) ## Attentions <table> <tr> <th>Item</th> <th>Attention</th> </tr> <tr> <td>Electrostatic protection</td> <td>Avoid static electricity hitting the PCBA. Release the static electricity of hand before touching the PCBA</td> </tr> <tr> <td>Operating voltage</td> <td>The operating voltage of each GPIO has been marked in the schematic. Please do not allow the actual operating voltage of the GPIO to exceed the rated value, otherwise the PCBA will be permanently damaged</td> </tr> <tr> <td>FPC Connector</td> <td>When connecting FPC cable，make sure that the row is completely inserted into the row without bias</td> </tr> <tr> <td>Plug and Remove</td> <td>Power off completely before plugging or removing it</td> </tr> <tr> <td>Avoid short circuit</td> <td>During the power on, avoid any liquid or metal touching PCBA components，otherwise the PCBA will be damaged even burn</td> </tr> </table> ## Contact M0sense eets different needs of customers in various scenarios. Please contact email [support@sipeed.com](support@sipeed.com) for technical support and business cooperation."},"/hardware/en/maixzero/sense/start.html":{"title":"M0sense guide","content":" title: M0sense guide keywords: M0sense update: date: 2023 02 03 version: v0.2 author: wonder content: Add the previous firmware note. date: 2022 12 15 version: v0.1 author: wonder content: Create file > Because of the different firmware, there is no u disk in computer after connecting computer with m0sense, visit [Burn bin file](#burn bin file) to solve this. ## Power On > Because of the different firmware, there may not be spectrum diagram of ambient sound on the screen, The led lights up when M0sense is powered on, and the screen displays spectrum diagram of ambient sound. <img src \"./../../../zh/maixzero/sense/assets/start/m0sense_start.jpg\" alt \"m0sense_start\" width \"45%\"> <img src \"./../../../zh/maixzero/sense/assets/start/m0sense_start_screen.jpg\" alt \"m0sense_start_screen\" width \"45%\"> ## Burn by U Disk M0sense can be burned by dragging and dropping firmware to u disk. > There maybe no u disk because of diferent firmware, visit [Burn bin file](#burn bin file) to solve this. Hold BOOT key, then click RESET key once, a removable disk is shown in computer. ![m0sense_udisk](./../../../zh/maixzero/sense/assets/start/m0sense_udisk.jpg) Just drag the firmware you want to burn and drop it in the removable disk, the removable disk will be automatically removed and M0sense will be automatically burned with this firmware. ![m0sense_drag_burn](./../../../zh/maixzero/sense/assets/start/m0sense_drag_burn.gif) Here are some demos [Click me](https://dl.sipeed.com/shareURL/Maix Zero/M0sense/7_Example_demos), just use them by dragging and dropping firmware to u disk to see their result, the source codes are in [github](https://github.com/sipeed/M0sense_BL702_example). And the result of each demo is as follows: ### hello_world.uf2 [Click me to download](https://dl.sipeed.com/shareURL/Maix Zero/M0sense/7_Example_demos/hello_world) Burn it into m0sense via u disk burn. Run serial application, and open the serial port, `Hello, World` is being printed. ![m0sense_hello_world](./../../../zh/maixzero/sense/assets/start/m0sense_hello_world.gif) ### blink_baremetal.uf2 [Click me to download](https://dl.sipeed.com/shareURL/Maix Zero/M0sense/7_Example_demos/blink_baremetal) Dragging and dropping this file to u disk, then repower M0sense, LED flashes, open the serial port and the LED states are printed. Open the serial port ![m0sense_blink_baremetal_uart](./../../../zh/maixzero/sense/assets/start/m0sense_blink_baremetal_uart.gif) LED flashes ![m0sense_blink_baremetal_led](./../../../zh/maixzero/sense/assets/start/m0sense_blink_baremetal_led.gif) ### blink_rtos.uf2 [Click me to download](https://dl.sipeed.com/shareURL/Maix Zero/M0sense/7_Example_demos/blink_rtos) This demo has the same effect as the previous one, but this demo is based on RTOS. Open the serial port ![m0sense_blink_baremetal_uart](./../../../zh/maixzero/sense/assets/start/m0sense_blink_baremetal_uart.gif) LED flashes ![m0sense_blink_baremetal_led](./../../../zh/maixzero/sense/assets/start/m0sense_blink_baremetal_led.gif) ### lcd_flush.uf2 [Click me to download](https://dl.sipeed.com/shareURL/Maix Zero/M0sense/7_Example_demos/lcd_flush) Burn this demo to M0sense, lcd background color flushes, and the color of screen is printed by serial port. ![m0sense_lcd_flush](./../../../zh/maixzero/sense/assets/start/m0sense_lcd_flush.gif) ![m0sense_lcd_flush_uart](./../../../zh/maixzero/sense/assets/start/m0sense_lcd_flush_uart.gif) ### imu.uf2 [Click me to download](https://dl.sipeed.com/shareURL/Maix Zero/M0sense/7_Example_demos/imu) Burn this demo to board, the data of onboard 6 axi IMU is printed by serial port. 烧录进板子后，从串口可以看到板子上面 6 轴 IMU (惯性传感器)的数据。 ![m0sense_imu_uart](./../../../zh/maixzero/sense/assets/start/m0sense_imu_uart.gif) ### single_button_control.uf2 [Click me to download](https://dl.sipeed.com/shareURL/Maix Zero/M0sense/7_Example_demos/single_button_control) Burn this demo to M0sense, press BOOT key, LED changes the color, and the state of LED is printed by serial port. The detailed usage can be analysised by reading <a href \"https://github.com/Sipeed/M0sense_BL702_example/blob/main/m0sense_apps/rtos_demos/single_button_control/main.c\">source code</a>. ![single_button_control](./../../../zh/maixzero/sense/assets/start/single_button_control.gif) ![single_button_control_uart](./../../../zh/maixzero/sense/assets/start/single_button_control_uart.gif) ### audio_recording.uf2 [Click me to download](https://dl.sipeed.com/shareURL/Maix Zero/M0sense/7_Example_demos/audio_recording) Burn this demo to M0sense, the 16bit pcm format data of the onboard microphone is printed by serial port. ![audio_recording](./../../../zh/maixzero/sense/assets/start/audio_recording.gif) ## SDK uasge M0sense can be compiled in Linux. ### Get example ```bash git clone https://github.com/Sipeed/M0sense_BL702_example.git ``` Then the file tree should be like this: ```bash sipeed@DESKTOP:~$ tree L 1 M0sense_BL702_example/ M0sense_BL702_example/ ├── LICENSE # License file ├── README.md # guide ├── bl_mcu_sdk # Folder of SDK ├── build.sh # Compile script ├── m0sense_apps # Folder of example codes ├── misc # Other utils └── uf2_demos # Example demo ``` ### Get SDK Get sdk in the path of example folder. It's about 400MB memory storage. ```bash cd M0sense_BL702_example git clone https://github.com/bouffalolab/bouffalo_sdk ``` Then the file tree should be like this(The main folder and files): ```bash sipeed@DESKTOP:~$ tree L 2 M0sense_BL702_example/ M0sense_BL702_example/ ├── LICENSE # License file ├── README.md # guide ├── bl_mcu_sdk # Folder of SDK │ ├── README.md # SDK guide │ ├── ReleaseNotes # SDK history │ ├── bsp │ ├── cmake │ ├── components │ ├── docs │ ├── drivers │ ├── examples │ ├── project.build │ ├── tools │ └── utils ├── build.sh # Compile script ├── m0sense_apps # Folder of example codes ├── misc # Other utils └── uf2_demos # Example demo ``` ### Get toolchain Get toolchain in the path of example folder. ```bash git clone https://github.com/wonderfullook/toolchain_gcc_sifive_linux ``` Then the file tree should be like this(The main folder and files): ```bash sipeed@DESKTOP:~$ tree L 2 M0sense_BL702_example/ M0sense_BL702_example/ ├── LICENSE # License file ├── README.md # guide ├── bl_mcu_sdk # Folder of SDK │ ├── README_zh.md # SDK guide │ ├── ReleaseNotes # SDK history │ ... ├── build.sh # Compile script ├── m0sense_apps # Folder of example codes ├── misc # Other utils ├── toolchain_gcc_sifive_linux # Folder of toolchain │ ├── bin # Folder of executable program │ ├── lib # Folder of library │ ... └── uf2_demos # Example demo ``` ### Put the patch Make sure you are in `M0sense_BL702_example` directory. Before putting the patch, we need to set username and email, just set what you like. ```bash cd bl_mcu_sdk git config user.email \"m0sense@sipeed.com\" git config user.name \"tinymaix\" ``` Then put the patch. ```bash cd .. ./build.sh patch ``` When it shows `Apply patch for you!`, we succeed in doing this. ![m0sense_patch](./../../../zh/maixzero/sense/assets/start/m0sense_patch.jpg) ### Set toolcahin path Everytime compling for M0sense, we need to set toolcahin path once. First we need to know the path of `M0sense_BL702_example`: ```bash sipeed@DESKTOP:~$ pwd /home/lee/M0sense_BL702_example ``` We copy the result (the result of everyone is different) of `pwd` command, then add `/toolchain_gcc_sifive_linux/bin` in the end，run following command, then we finish setting the toolcahin path. ```bash PATH $PATH:/home/lee/M0sense_BL702_example/toolchain_gcc_sifive_linux/bin ``` Then we can use command `riscv64 unknown elf gcc v` to test our toolcahin, here is the right result. ```bash sipeed@DESKTOP:~$ riscv64 unknown elf gcc v Using built in specs. COLLECT_GCC riscv64 unknown elf gcc COLLECT_LTO_WRAPPER /home/lee/M0sense_BL702_example/toolchain_gcc_sifive_linux/bin/../libexec/gcc/riscv64 unknown elf/10.2.0/lto wrapper Target: riscv64 unknown elf ``` If not set the path right, the command `riscv64 unknown elf gcc` will be shown not found, try to reset the toolcahin path. ![m0sense_toolchain_notfound](./../../../zh/maixzero/sense/assets/start/m0sense_toolchain_notfound.jpg) ### Compile demo Before compiling demo first time, we need to compile the firmware conversion application on the computer for dragging and burning firmware by u disk. Run following command in the directory of `M0sense_BL702_example` . ```bash sudo apt install gcc # Install gcc gcc I libs/uf2_format misc/utils/uf2_conv.c o uf2_convert # Compile the firmware conversion application ``` Then we can compile demo. ```bash ./build.sh m0sense_apps/blink/blink_baremetal ``` The demo of uf2 format which can be burned to M0sense by u disk is in the uf2_demos folder, and the demo file is in bl_mcu_sdk/out folder. ## SDK Note 1. Compiling your own firmware conversion application if it's the first time compiling. 2. Everytime compiling the firmware, make sure you have [set the toolcahin path](#set toolcahin path) 3. If failing to compile SDK. make sure the compiling command is `./build.sh m0sense_apps/blink/blink_baremetal`, not `./build.sh m0sense_apps/blink/blink_baremetal/` (Pay attention to the `/` in the end) ## Burn bin file Sometimes we need to burn bin file because of some reasons, here are the steps. We need to use bouffalolab official flash application to burn M0sense, visit https://dev.bouffalolab.com/download and download the file whose name is `Bouffalo Lab Dev Cube`, cecompress it then we get the flash application. ![bouffalo_cube](./../../../zh/maix/m1s/other/assets/start/bouffalo_cube.png) We mainly use `BLDevCube`, `BLDevCube macos` and `BLDevCube ubuntu` these three files, by which to burn our board with graphical interface on different OS. ![application](./../../../zh/maix/m1s/other/assets/start/application.png) We use metal material or wire to connect the 3.3V pin and boot pin, then power up M0sense, it will be into download mode, we can see there is a serial device in computer device manager. Connect pin Serial device in computer device manager ![boot_mode](./../../../zh/maixzero/sense/assets/start/boot_mode.jpg) ![serial_device](./../../../zh/maixzero/sense/assets/start/serial_device.jpg) Run `BLDevCube`(Depends on your OS), choose `BL702`，and select MCU mode in application interface，choose the firmware bin file you want to burn. The default downloaded firmware can be found here: [Click me](https://dl.sipeed.com/shareURL/Maix Zero/M0sense/7_Example_demos/default_firmware) <table> <tr> <td><img src \"./../../../zh/maix/m1s/other/assets/start/select_bl702.png\" alt \"select_bl702\" style \"transform:rotate(0deg);\"></td> <td><img src \"./../../../zh/maix/m1s/other/assets/start/mcu_mode.png\" alt \"mcu_mode\" style \"transform:rotate(0deg);\" width \"70%\"></td> </tr> </table> Click `Refresh`，choose the only one serial port, if you did not see the serial port, reconnect the 3.3V pin and boot pin before power M0sense, set uartRate 2000000, click `Create & Diwnload`. ![burn_bl702](./../../../zh/maixzero/sense/assets/start/burn_bl702.png) Finishing flashing firmware, repower M0sense to load the new firmware. ![finish_burn_702](./../../../zh/maixzero/sense/assets/start/finish_burn_702.png) ## Notes There is a BOOT key and a BOOT silkprint pin on M0sense. <img src \"./../../../zh/maixzero/sense/assets/start/m0sense_boot_key.jpg\" width \"40%\" alt \"m0sense_boot_key\"> <img src \"./../../../zh/maixzero/sense/assets/start/m0sense_boot_silkprint.jpg\" width \"40%\" alt \"m0sense_boot_silkprint\"> There are 2 BOOT on M0sense, here are their differences: ![boot_description](./../../../zh/maixzero/sense/assets/start/boot_description.png) From the [schematic](https://dl.sipeed.com/shareURL/Maix Zero/M0sense/2_Schematic) above, we can see that the two keys on Mosense are routed to GPIO_2 and AU_CHIP, from the chip manual we can know that `AU_CHIP` is the reset pin, so SW1 is the reset key, and another key is the soft BOOT key on M0sense, it requires the [firmware](https://dl.sipeed.com/shareURL/Maix Zero/M0sense/7_Example_demos/default_firmware) for u disk burn. And we can see that the BOOT silkprint pin is Boot_Strap on M0sense, it's the hardware Boot key. Hold it before powering it to burn the firmware into M0sense. U disk is a special burn method based on firmware, while uart burn method is the basic way to burn this chip."},"/hardware/en/maixzero/m0p/m0p.html":{"title":"M0P 模组","content":" title: M0P 模组 keywords: M0P ,模组, bl618, BL618 update: date: 2023 03 09 version: v0.1 author: wonder content: 初次编写文档 ## 模组概述 Sipeed M0P 模组是基于[博流智能科技](http://www.bouffalolab.com/)的 BL618 芯片所设计的一款 AIOT 模组，支持 WIFI6、蓝牙 5.2 等无线协议，邮票孔的让它能快速应用在多种 AIOT 场合。 购买链接：[淘宝](https://item.taobao.com/item.htm?id 710359411812) <img src \"./../../../zh/maixzero/m0p/assets/m0p/m0p_module_outlook.png\" alt \"m0p_module_outlook\" width 15%> ## 模组特点 主芯片 BL618 RV32 320MHz RISC V 支持 2.4G WIFI6（IEEE 802.11 b/g/n/ax） 支持蓝牙 5.x 双模（BT+BLE） 支持 Zigbee / IEEE 802.15.4 支持 USB 2.0 HS OTG（480Mhz） 支持IPEX一代天线座子和 PCB 板载天线 板载 SPI FLASH（可选容量） 邮票孔引出所有 IO ## 模组参数 <table> <thead> <tr> <th colspan \"3\"> M0P 模组 </th> </tr> </thead> <tbody> <tr> <td rowspan \"18\" style \"white space:nowrap\">主控 BL618 处理器</td> </tr> <tr> <td colspan \"2\">RISC V CPUs：RV32 320MHz</td> </tr> <tr> <td colspan \"2\">SRAM: 480KB + 4MB </td> </tr> <tr> <td rowspan \"15\"> 支持接口 </td> </tr> <tr> <td>DVP Camera</td> </tr> <tr> <td>Display（QSPI、DBI）</td> </tr> <tr> <td>USB2.0 HS OTG(High Speed 480Mhz)</td> </tr> <tr> <td>SPI</td> </tr> <tr> <td>UART * 2</td> </tr> <tr> <td>IIC * 2</td> </tr> <tr> <td>IIS</td> </tr> <tr> <td>10bit GPDAC</td> </tr> <tr> <td>12~16bit GPADC</td> </tr> <tr> <td>ACOMP</td> </tr> <tr> <td>PWM</td> </tr> <tr> <td>SDIO2.0</td> </tr> <tr> <td>Audio Codec</td> </tr> <tr> <td>无线：<br>· 支持Wi Fi 802.11 b/g/n/ax（WiFi6）<br>· 支持蓝牙 5.x 双模(BT+BLE)<br>· 支持Wi Fi / 蓝牙/Zigbee 共存</td> </tr> <tr> <td rowspan \"3\" style \"white space:nowrap\"> 板载部件 </td> </tr> <tr> <td colspan \"2\">板载 SPI FLASH： 8MByte</td> </tr> <tr> <td colspan \"2\">支持 IPEX 一代天线座子和 PCB 板载天线</td> </tr> </tbody> <tr> <td rowspan \"5\" style \"white space:nowrap\"> 其他说明 </td> </tr> <tr> <td colspan \"2\"> 尺寸：25.5mm (L) x 18mm (W) </td> </tr> <tr> <td colspan \"2\"> KICAD 格式封装文件下载：<a href \"https://dl.sipeed.com/shareURL/Maix Zero/M0P/M0P/4_Package\">点击跳转</a> </td> </tr> <tr> <td colspan \"2\">温升: &lt;30K</td> </tr> <tr> <td colspan \"2\">工作温度范围: 10℃ ~ 65℃</td> </tr> </table> ## 尺寸大小 <img src \"./../../../zh/maixzero/m0p/assets/m0p/m0p_size.png\" alt \"m0p_size\" width 35%> ## 引脚分布 前往原理图查看：[点我](https://dl.sipeed.com/shareURL/Maix Zero/M0P/M0P/2_Schematic) ## 软件描述 <table> <thead> <tr> <th colspan \"2\" > M0P 模组 </th> </tr> </thead> <tbody> <tr> <td>OS</td> <td> 支持FreeRTOS</td> </tr> <tr> <td>开发方式</td> <td>· 原生C SDK<br>· MaixHAL C 模块<br>· PikaPython </td> </tr> <tr> <td> SDK </td> <td><a href \"https://github.com/bouffalolab/bouffalo_sdk\"> github </a></td> </tr> <tr> <td>Examples</td> <td><a href \"https://github.com/sipeed/M0P_BL618_examples\"> github </a></td> </tr> </tbody> </table> ## 模组资料 [模组规格书](https://dl.sipeed.com/shareURL/Maix Zero/M0P/M0P/1_datasheet) [模组原理图](https://dl.sipeed.com/shareURL/Maix Zero/M0P/M0P/2_Schematic) [模组封装库](https://dl.sipeed.com/shareURL/Maix Zero/M0P/M0P/4_Package) [模组尺寸图](https://dl.sipeed.com/shareURL/Maix Zero/M0P/M0P/3_Dimensional_drawing) [博流官方文档](https://dev.bouffalolab.com/home/) [BL618 数据手册](https://gitee.com/wonderfullook/bl_docs/tree/main/BL616_DS/zh_CN) (gitee) [BL618 参考手册](https://gitee.com/wonderfullook/bl_docs/tree/main/BL616_RM/zh_CN) (gitee) [Sipeed Examples](https://github.com/sipeed/M0P_BL618_examples)（github） [Bouffalolab SDK](https://github.com/bouffalolab/bouffalo_sdk) (github) 交流 QQ 群：`816177882` 。[点我加群](https://jq.qq.com/?_wv 1027&k 4lroNFnI) 论坛：[bbs.sipeed.com](https://bbs.sipeed.com/) ## 注意事项 <table> <tr> <th>项目</th> <th>注意事项</th> </tr> <tr> <td>静电防护</td> <td>· 请注意避免静电打到 PCBA 上；接触 PCBA 之前请把手的静电释放掉<br>· 在底板设计时，必须要从 ESD 防护角度进行设计（串电阻、加 ESD 二极管等）</td> </tr> <tr> <td>容忍电压</td> <td> 所有 GPIO 都是 3.3V 电平，请不要让 GPIO 的实际工作的电压超过额定值，否则会引起 PCBA 的永久性损坏 </td> </tr> <tr> <td>避免短路</td> <td>请在上电过程中，避免任何液体和金属触碰到 PCBA 上的元件的焊盘，否则会导致短路，烧毁 PCBA</td> </tr> <tr> <td>BOOT 模式选择</td> <td> 在启动时，芯片判定 BOOT 引脚的电平，选择两个启动选项之一<br> · BOOT 低电平：从 FLASH 加载固件<br> · BOOT 高电平：进入 USB 下载模式 </td> </tr> </table> ## 联系方式 M0P 模组可以在多种场景实现客户不同方面的需要，技术支持和商业合作请联系使用邮箱 [support@sipeed.com](support@sipeed.com)"},"/hardware/en/maixzero/m0p/m0p_dock.html":{"title":"M0P Dock","content":" title: M0P Dock keywords: M0P ,Dock, bl618, BL618 update: date: 2023 03 09 version: v0.1 author: wonder content: 初次编写文档 ## 板卡概述 Sipeed M0P Dock 是使用 [Sipeed M0P](https://wiki.sipeed.com//hardware/zh/maixzero/m0p/m0p.html) 模组设计的开发板，主控是 [bouffalolab](http://www.bouffalolab.com/) 的 BL618 芯片，支持 Wifi6 和蓝牙 5.2 无线协议，默认最高主频 320MHz，支持 USB2.0 HS。板卡上有 DVP 接口来连接摄像头，有 FPC 座子来连接屏幕，有 TF 卡槽来扩展存储，还有一颗 WMM7027ATSN1 MEMS 麦克风用于自定义功能，板卡上还有电池充电管理电路，支持使用锂电池供电。 购买链接：[Aliexpress](https://item.taobao.com/item.htm?id 710359411812) <img src \"./../../../zh/maixzero/m0p/assets/m0p_dock/m0p_dock_outlook.png\" alt \"m0p_dock_outlook\" width 15%> ## 板卡特点 主芯片 BL618 RV32 320MHz RISC V Support 2.4G WIFI6（IEEE 802.11 b/g/n/ax） 支持蓝牙 5.x 双模（BT+BLE）和 Zigbee / IEEE 802.15.4 USB 2.0 Type C（480Mhz）（可用作下载固件和USB转串口） DVP 摄像头连接器 SPI 屏幕连接器（可以连接3.92寸320x320方形电容触摸屏） 4.2V 锂电池充电电路 1 个 TF 卡连接器（SDIO接口） 1 个模拟麦克风、2 个 ADC 按键和 1 个状态指示灯 ## 板卡参数 <table> <tbody> <tr> <th colspan \"3\" style \"white space:nowrap\"> M0P Dock 参数 </td> </tr> <tr> <td rowspan \"18\" style \"white space:nowrap\"> M0P 模组 </td> </tr> <tr> <td colspan \"2\"> RISC V CPUs：RV32 320MHz </td> </tr> <tr> <td colspan \"2\"> SRAM: 480KB + 4MB </td> </tr> <tr> <td rowspan \"15\"> 支持接口 </td> </tr> <tr> <td>DVP Camera</td> </tr> <tr> <td>Display（QSPI、DBI）</td> </tr> <tr> <td>USB2.0 HS OTG(High Speed 480Mhz)</td> </tr> <tr> <td>SPI</td> </tr> <tr> <td>UART * 2</td> </tr> <tr> <td>IIC * 2</td> </tr> <tr> <td>IIS</td> </tr> <tr> <td>10bit GPDAC</td> </tr> <tr> <td>12~16bit GPADC</td> </tr> <tr> <td>ACOMP</td> </tr> <tr> <td>PWM</td> </tr> <tr> <td>SDIO2.0</td> </tr> <tr> <td>Audio Codec</td> </tr> <tr> <td> 无线：<br>· 支持Wi Fi 802.11 b/g/n/ax（WiFi6）<br>· 支持蓝牙 5.x 双模(BT+BLE)<br>· 支持Wi Fi / 蓝牙/ Zigbee 共存<br>（更详细的特性请查看芯片 <a href \"https://gitee.com/wonderfullook/bl_docs/tree/main/BL616_DS/zh_CN\"> datasheet</a>）</td> </tr> </td> </tr> <tr> <td colspan \"1\" rowspan \"11\" style \"white space:nowrap\"> 板载部件 </td> </tr> <tr> <td colspan \"2\">USB2.0 Type C 母座连接器: <br> 可用作USB通信、下载固件和USB转串口</td> </tr> <tr> <td colspan \"2\">DVP 摄像头连接器：<br> 通用接口，可以连接 GC0328 摄像头模组</td> </tr> <tr> <td colspan \"2\">SPI 屏幕连接器：<br>可以连接 3.92 寸 320x320 方形电容触摸屏</td> </tr> <tr> <td colspan \"2\">SPI FLASH（默认8MByte）</td> </tr> <tr> <td colspan \"2\">1 个 TF 卡连接器（SDIO接口）</td> </tr> <tr> <td colspan \"2\">1 个模拟麦克风：WMM7027ATSN1（全指向，灵敏度 38dB，信噪比 59dB ）</td> </tr> <tr> <td colspan \"2\">2 个 ADC 按键（在板子两侧）</td> </tr> <tr> <td colspan \"2\">1 个电源指示灯和 1 个状态指示灯</td> </tr> <tr> <td colspan \"2\">两侧排针引出所有 IO（出厂已经焊接好排针）</td> </tr> <tr> <td colspan \"2\">4.2V 锂电池充电电路：<br>· USB 给整板供电，整板给电池供电，电池与整板主电源之间有二极管防倒灌<br>· 电池电压低于 3.3V 时 BL618 芯片会被强制处于复位状态<br>· 只支持最大电压是 4.2V 的可充电锂电池，不支持最大电压小于 4.2V 的可充电锂电池及不可充电的电池</td> </tr> </tbody> </tbody> </table> ## 引脚分布 ![m0p_dock_pinmap](./../../../zh/maixzero/m0p/assets/m0p_dock/m0p_dock_pinmap.png) ## 产品对比 M0P Dock ESP32 S3 DevKitC MCU 单核320Mhz RISC V 双核240Mhz SRAM 480KB + 4MB 512KB + 2MB(optional) ROM √ √ SPI Nor Flash 8MB(optional) 8MB(optional) WIFI IEEE 802.11 b/g/n/ax (WiFi6) IEEE 802.11 b/g/n BLE √ √ I2C/UART/SPI √ √ Microphone 模拟麦克风 × LCD 支持 3.92 英寸电容触摸屏 × Camera DVP camera × USB USB 2.0 High speed OTG（480Mbps） USB 2.0 Full speed OTG（12Mbps） 固件下载方式 USB USB ## 软件描述 <table> <thead> <tr> <th colspan \"2\" > M0P 模组 </th> </tr> </thead> <tbody> <tr> <td>OS</td> <td> 支持FreeRTOS</td> </tr> <tr> <td>开发方式</td> <td>· 原生C SDK<br>· MaixHAL C 模块<br>· PikaPython </td> </tr> <tr> <td> SDK </td> <td><a href \"https://github.com/bouffalolab/bouffalo_sdk\"> github </a></td> </tr> <tr> <td>Examples</td> <td><a href \"https://github.com/sipeed/M0P_BL618_examples\"> github </a></td> </tr> </tbody> </table> ## 板卡资料 [板卡规格书](https://dl.sipeed.com/shareURL/Maix Zero/M0P/M0P%20Dock/1_datasheet) [板卡原理图](https://dl.sipeed.com/shareURL/Maix Zero/M0P/M0P%20Dock/2_Schematic) [板卡尺寸图](https://dl.sipeed.com/shareURL/Maix Zero/M0P/M0P%20Dock/4_Dimensional_drawing) [板卡位号图](https://dl.sipeed.com/shareURL/Maix Zero/M0P/M0P%20Dock/3_Bit_number_map) [3D 模型文件](https://dl.sipeed.com/shareURL/Maix Zero/M0P/M0P%20Dock/5_3D_File) [博流官方文档](https://dev.bouffalolab.com/home/) [BL618 数据手册](https://gitee.com/wonderfullook/bl_docs/tree/main/BL616_DS/zh_CN) (gitee) [BL618 参考手册](https://gitee.com/wonderfullook/bl_docs/tree/main/BL616_RM/zh_CN) (gitee) [Sipeed Examples](https://github.com/sipeed/M0P_BL618_examples)（github） [Bouffalolab SDK](https://github.com/bouffalolab/bouffalo_sdk) (github) 交流 QQ 群：`816177882` 。[点我加群](https://jq.qq.com/?_wv 1027&k 4lroNFnI) 论坛：[bbs.sipeed.com](https://bbs.sipeed.com/) ## 注意事项 <table> <tr> <th>项目</th> <th>注意事项</th> </tr> <tr> <td>静电防护</td> <td>· 请注意避免静电打到 PCBA 上；接触 PCBA 之前请把手的静电释放掉 </td> </tr> <tr> <td>容忍电压</td> <td> 所有 GPIO 都是 3.3V 电平，请不要让 GPIO 的实际工作的电压超过额定值，否则会引起 PCBA 的永久性损坏 </td> </tr> <tr> <td>避免短路</td> <td>请在上电过程中，避免任何液体和金属触碰到 PCBA 上的元件的焊盘，否则会导致短路，烧毁 PCBA</td> </tr> <tr> <td>FPC 座子</td> <td>在连接 FPC 软排线的时候，请确保排线无偏移地完整地插入到排线中</td> </tr> <tr> <td>BOOT 模式选择</td> <td> 在启动时，芯片判定 BOOT 引脚的电平，选择两个启动选项之一<br> · BOOT 低电平：从 FLASH 加载固件<br> · BOOT 高电平：进入 USB 下载模式 </td> </tr> </table> ## 联系方式 M0P Dock 开发板可以在多种场景实现客户不同方面的需要，技术支持和商业合作请联系使用邮箱 [support@sipeed.com](support@sipeed.com)"},"/hardware/en/maixzero/m0s/m0s.html":{"title":"M0S module","content":" title: M0S module keywords: M0S, module, BL616, wifi6 update: date: 2023 01 14 version: v0.1 author: wonder content: Create file ## Module summary Sipeed M0S is a ultra low power consumption tiny IOT module based on BL616 of [Bouffalo Lab](https://en.bouffalolab.com/), supports wireless protocol like Wifi6, BT 5.2 and zigbee, 320MHz default frequency, tiny size and ultra low power mode and various wake sources of the chip meet different low power scenarios. Buy one: [Aliexpress](https://www.aliexpress.com/item/1005005142466936.html) <img src \"./../../../zh/maixzero/m0s/assets/m0s/m0s_module_outlook.png\" alt \"m0s_module_outlook\" width 35%> ## Module Feature Tri Mode Wireless: WiFi6 / BT 5.2 / Zigbee High Frequency：320MHz default Ultra low Power Consumption：Wifi6 low power consumption feature DSP Acceleration：Support RISC V P Extended instruction set, double speeds up TinyMaix reasoning frame. High speed USB：Support USB2.0 HS OTG，up to 480Mbps Rich peripheral ports：Support RGB LCD，DVP Camera，Ethernet RMII and SDIO Tiny Size：Place ceramic antenna on 10x11 mm tiny size, and route all IO out ## Module Parameter <table> <thead> <tr> <th colspan \"2\" > M0S Module </th> </tr> </thead> <tbody> <tr> <td rowspan \"5\" style \"white space:nowrap\"> Main Chip BL616 </td> </tr> <tr> <td>RISC V CPU：RV32GCP@320MHz default </td> </tr> <tr> <td> 480KB SRAM + 4MB Flash inside</td> </tr> <tr> <td>Wireless：<br> Support Wi Fi6<br> Support Bluetooth 5.2 Dual mode(BT+BLE)<br> Support Zigbee </td> </tr> <tr> <td>USB 2.0 HS OTG</td> </tr> <tr> <td rowspan \"2\" style \"white space:nowrap\"> Onboard components </td> </tr> <tr> <td>Ceramic antenna</td> </tr> </tbody> <tr> <td rowspan \"4\" style \"white space:nowrap\"> Others </td> </tr> <tr> <td> Size：10mm (W) x 11mm (H) </td> </tr> <tr> <td> Package file (KiCAD)：<a href \"https://dl.sipeed.com/shareURL/Maix Zero/M0S/M0S/4_Package\">Click me</a> </td> </tr> <tr> <td> 3D model file：<a href \"https://dl.sipeed.com/shareURL/Maix Zero/M0S/M0S/3_3D_file\">Click me</a> </td> </tr> </tbody> </table> ## Pinmap ![m0s_pin_map](./../../../zh/maixzero/m0s/assets/m0s/m0s_pin_map.png) ## Comparsion Model M0S Module ESP32 S3 N4 Module : : : : Chip BL616(RV32GCP) ESP32 S3 (LX7) Frequency 320MHz 240MHz SRAM 480KB 520KB Flash 4MByte 4MByte Wifi WiFi6 WiFi4 Bluetooth BT5.2 BT5 USB USB2.0 HS OTG 480Mbps USB2.0 FS OTG 12Mbps IIC/UART/SPI Yes Yes DVP Camera Yes Yes Size 10mm x 11mm 18mm x 25.5mm Model platform TinyMaix + MaixHub ## M0S Dock <table> <thead> <tr> <th colspan \"2\" > M0S Dock </th> </tr> </thead> <tbody> <tr> <td> Module x 1 </td> <td> M0S Module </td> </tr> <tr> <td> Key x 1 </td> <td> Press this key then boot this device to burn this module </td> </tr> <tr> <td> LED x 3 </td> <td> One power LED，Two user LEDs </td> </tr> <tr> <td> TypeC Port x 1 </td> <td> To download firmware or other custom USB function </td> </tr> <tr> <td> IO connector x 10 </td> <td> 8 IO route to Pin headers<br> 2 IOs near TypeC Port </td> </tr> <tr> <td> Schematic </td> <td> <a href \"https://dl.sipeed.com/shareURL/Maix Zero/M0S/M0S_Dock/2_Schematic\"> 点我 </a></td> </tr> </tbody> </table> <img src \"./../../../zh/maixzero/m0s/assets/m0s/m0s_dock_top.png\" width \"45%\"> <img src \"./../../../zh/maixzero/m0s/assets/m0s/m0s_dock_bottom.png\" width \"45%\"> ## Software <table> <thead> <tr> <th colspan \"2\" > M0S Module </th> </tr> </thead> <tbody> <tr> <td>OS</td> <td>FreeRTOS</td> </tr> <tr> <td>Development</td> <td>· C SDK<br>· MaixHAL C <br>· PikaPython</td> </tr> <tr> <td>Burn Firmware </td> <td>· USB uart burn<br>· · USB burn</td> </tr> <tr> <td>AI Framework</td> <td>TinyMaix Framework</td> </tr> <tr> <td>AI model</td> <td>· <a href \"https://maixhub.com/\"> MaixHub </td> </tr> <tr> <td>Sipeed examples</td> <td>· https://github.com/sipeed/M0S_BL616_example</td> </tr> </tbody> </table> ## Other Links [M0S Datasheet](https://dl.sipeed.com/shareURL/Maix Zero/M0S/M0S/1_Specification) [M0S Schematic](https://dl.sipeed.com/shareURL/Maix Zero/M0S/M0S/2_Schematic) [M0S Package](https://dl.sipeed.com/shareURL/Maix Zero/M0S/M0S/4_Package) [3D Model File](https://dl.sipeed.com/shareURL/Maix Zero/M0S/M0S/3_3D_file) [Bouffalolab official documents](https://dev.bouffalolab.com/home/) [BL616 DataSheet](https://github.com/bouffalolab/bl_docs/tree/main/BL616_DS/en) (github) [BL616 Reference Manual](https://github.com/bouffalolab/bl_docs/tree/main/BL616_RM/en) (github) [M0S Dock Datasheet](https://dl.sipeed.com/shareURL/Maix Zero/M0S/M0S_Dock/1_Specification) [M0S Dock Schematic](https://dl.sipeed.com/shareURL/Maix Zero/M0S/M0S_Dock/2_Schematic) [Sipeed Examples](https://github.com/sipeed/M0s_BL616_example)（Github） [Bouffalolab SDK](https://github.com/bouffalolab/bouffalo_sdk) (Github) [Telegram](https://t.me/sipeed) [Twitter](https://twitter.com/SipeedIO) [Reddit](https://www.reddit.com/r/Sipeed/) [Online model platform](https://maixhub.com/) ## Attentions <table> <tr> <th>Item</th> <th>Attention</th> </tr> <tr> <td>Electrostatic protection</td> <td>Avoid static electricity hitting the PCBA. Release the static electricity of hand before touching the PCBA</td> </tr> <tr> <td>Operating voltage</td> <td>Do not allow the actual operating voltage of the GPIO to exceed the rated value, otherwise the PCBA will be permanently damaged</td> </tr> <tr> <td>Plug and Remove</td> <td>Power off completely before plugging or removing it</td> </tr> <tr> <td>Avoid short circuit</td> <td>During the power on, avoid any liquid or metal touching PCBA components，otherwise the PCBA will be damaged even burn</td> </tr> </table> ## Contact M0sense eets different needs of customers in various scenarios. Please contact email [support@sipeed.com](support@sipeed.com) for technical support and business cooperation."},"/hardware/en/tang/Tang-Nano-1K/examples/led/github_led.html":{"title":"Blink by github project","content":"# Blink by github project First get sourcecode from github https://github.com/sipeed/TangNano 1K examples Open led_prj.gprj file in TangNano 1K examples\\example_led\\led_prj path Right click clean&Rerun all in process interface ![](./../../../../../zh/tang/Tang Nano 1K/examples/led/assets/github_nano1K_place&route.png) Connet the board and download firmware. Double click `Program Device` in Process interface to open programmer tool. ![](./../../../../../zh/tang/Tang Nano 1K/examples/led/assets/Open_Programmer_nano_1k.png) Choose download to SRAM to verify codes quickly ![](./../../../../../zh/tang/Tang Nano 1K/examples/led/assets/Success_led_nano_1k.png) <p id \"back\"> <a href \"#\" onClick \"javascript :history.back( 1);\">Previou page</a> </p>"},"/hardware/en/tang/Tang-Nano-1K/examples/led/create_led.html":{"title":"Blink led","content":"# Blink led > Edit on 2022.04.19 From this essay we can learn the basic usage of Gowin IDE ## Create project Create Project：File >NEW >FPGA Dsign Project >OK ![](./../../../../../zh/tang/Tang Nano/assets/LED 1.png) Set project name and project path (File name and project path shoule be English) ![](./../../../../../zh/tang/Tang Nano/assets/LED 2.png) Choose correct device: ![Tang_nano_device_choose](./../../../../../zh/tang/Tang Nano 1K/assets/Nano_1K_device_choose.png) ## Prepare codes After creating project, we can start editing codes. To creat a new file, we can click where the arrow points to in the picture or use shortcut key Ctrl+N. Then choose Verilog File in the pop up window. ![](./../../../../../zh/tang/Tang Nano/assets/LED 5.png) Name for file (Suggested using English) ![](./../../../../../zh/tang/Tang Nano/assets/LED 6.png) Double click the created file, then edit in right window ![](./../../../../../zh/tang/Tang Nano/assets/LED 7.png) We use light led as an example, copy the following \"LED example codes\" into the created file or edit the created file by yourself. ~~~v module led ( input sys_clk, // clk input input sys_rst_n, // reset input output reg [2:0] led // 110 B, 101 G,001 R ); reg [23:0] counter; always @(posedge sys_clk or negedge sys_rst_n) begin if (!sys_rst_n) counter < 24'd0; else if (counter < 24'd1349_9999) // 0.5s delay counter < counter + 1'b1; else counter < 24'd0; end always @(posedge sys_clk or negedge sys_rst_n) begin if (!sys_rst_n) led < 3'b110; else if (counter 24'd1349_9999) // 0.5s delay led[2:0] < {led[1:0],led[2]}; else led < led; end endmodule ~~~ ## Synthesize, constrain, place&route ### Synthesize After finishing steps above, go to the \"Process\" interface, Synthesize the edited file, which means running \"Synthesize\". ![](./../../../../../zh/tang/Tang Nano 9K/nano_9k/nano_9k_synthsize.png) If the result is the same as shown below ![](./../../../../../zh/tang/Tang Nano/assets/LED.png) It means that there is no bug in our code, we can continue the next steps. If there is some thing wrong, please fix by yourself. ### Constrain Clock constraint is not involved here To realize function of the code on FPGA, we must bind the ports we define with the chip pins. Double click the FloorPlanner in the Process interface to set pin constraints(This can be continued if failing Synthesize). ![](./../../../../../zh/tang/assets/examples/led_pjt_2.png) First time open FloorPlanner it will prompt lack of \".cst\" file, we just choose ok. ![](./../../../../../zh/tang/Tang Nano/assets/LED 9.png) The led schematic of nano is as shown below: ![](./../../../../../zh/tang/Tang Nano 1K/assets/Nano_1K_RGB_pins.png) In this GUI interface we have two ways to constrain pins: Drag the corresponding port to the pin of chip Type the pin number corresponding to the port in IO constraint So we can do the ordered operations in the opened window as what the following picture shows:(Just choose one way) ![](./../../../../../zh/tang/Tang Nano 1K/assets/RGB_LED_Constrains.png) ### Place&Route After finishing Running \"Place&Route\" in the Process interface window, the result will be as same as below ![](./../../../../../zh/tang/Tang Nano 1K/assets/RGB_LED_Place&Route.png) If it shows different from the picture below, please fix by yourself. ## Program Then connect the board with computer, download firmware. Double click `Program Device` in Process interface to open programmer application ![](./../../../../../zh/tang/Tang Nano/examples/led/assets//Open_Programmer.png) You can config download mode according to the following picture. We use download to SRAM as an example. ![](./../../../../../zh/tang/Tang Nano/examples/led/assets/tang nano programmer config.png) If you need to store firmware with no power, just choose download to flash mode. ## End Now the tutorial ends, if you have any suggestions, just leave a message."},"/hardware/en/tang/Tang-Nano-1K/examples/led/led.html":{"title":"blink","content":"# blink Edit on 2022.04.18 ## Preface Here we provide two ways to blink led [Blink by yourself](./create_led.html) [Using github project](./github_led.html) <p id \"back\"> <a href \"#\" onClick \"javascript :history.back( 1);\">Previous page</a> </p>"},"/hardware/en/tang/Tang-Nano-1K/examples/lcd.html":{"title":"Drive RGB screen","content":" title: Drive RGB screen > Edit on 2022.04.19 ## Introduce timing RGB LCD display protocol is similar to VGA protocol, both have horizon synchronization signal line and vertical synchronization signal line. The main difference is that RGB LCD display protocol transfers by digital signal while VGA protocol transfers by analog signal. Here we introduce VGA timing. ![](./../../../../zh/tang/assets/examples/lcd_pjt_1.png) There shows horizon synchronization timing and vertical synchronization timing in the picture above. From the timing picture, we know both display a horizon of data or display a vertical of data, data transfers during the two synchronization signal pulses. Each horizon of data contains back porch, visible data **(this is normally thought as active data)** and front porch. The visible data is resolution we normally think, while the parameter of back porch and front porch depends on the resolution and frame rate. Its typical parameters can be found in this web. http://www.tinyvga.com/vga timing The timing of this 5 inch screen we sell is a bit different, its parameters can be downloaded here. [Detail book](https://dl.sipeed.com/fileList/TANG/Nano%209K/6_Chip_Manual/EN/LCD_Datasheet/5.0inch_LCD_Datashet%20_RGB_.pdf) For other size screen parameters, they can be downloaded here. [Click me](https://dl.sipeed.com/TANG/Nano%209K/6_Chip_Manual/EN/LCD_Datasheet/) The following picture shows the screenshot about this LCD timing. ![](./../../../../zh/tang/assets/examples/lcd_pjt_2.png) ![](./../../../../zh/tang/assets/examples/lcd_pjt_3.png) The first picture form shows parameters of the screen and the the following picture is its timing. From its timing picture, we can know we don't need to set front porch time and back proch time, we just need to set blanking time. ## Create project Please refer to this [article](./led/led.html) to see how to create project. ## Generate screen clock Here we use gowin official IP The crystal oscillator onboard is 27MHz, but our screen needs 33.3MHZ clock, so we need to use the corresponding ip core to generate the corresponding clock. Here we use `IP Core Generate` which can be find in Tools > IP Core Generate ![](./../../../../zh/tang/Tang Nano 1K/assets/Gowin_IP_rpll.png) Double click `rPLL` and select Verilog in the pop up window language, set CLKIN 27MHz, CLKOUTD is 33.00MHz. Also config the tolerance. ![](./../../../../zh/tang/Tang Nano 1K/assets/lcd_rpll.png) After click OK it asks whether add it to current project, here we choose yes. ![](./../../../../zh/tang/Tang Nano 1K/examples/led/assets/add_ip_file_in_project.png) Then a tmp file will appear, we can use it to generate the ip, like what is shown below. ![](./../../../../zh/tang/Tang Nano/examples/led/assets/ip_examples.png) ## Screen driver **To start this we should create a verilog file first** ### Port definition First define ports which are needed to drive screen ```verilog module VGAMod ( input CLK, input nRST, input PixelClk, output LCD_DE, output LCD_HSYNC, output LCD_VSYNC, \toutput [4:0] LCD_B, \toutput [5:0] LCD_G, \toutput [4:0] LCD_R ); ``` We use RGB565 driver mode. ### Timing constants Then we define the constants according to the timing form picture ```verilog localparam V_BackPorch 16'd6; //0 or 45 localparam V_Pluse \t 16'd5; localparam HightPixel 16'd480; localparam V_FrontPorch 16'd62; //45 or 0 localparam H_BackPorch 16'd182; \t localparam H_Pluse \t 16'd1; localparam WidthPixel 16'd800; localparam H_FrontPorch 16'd210; localparam PixelForHS WidthPixel + H_BackPorch + H_FrontPorch; \t localparam LineForVS HightPixel + V_BackPorch + V_FrontPorch; ``` First we define front porch, back porch and valid pixel data. As for the front porch timing and back porch timing which have been mentioned earlier, it can be combined into an erasing time, that is, one can be set to 0, and the other can be set to the erasing time. Anyway, the front porch timing and back porch timing can be added up to meet the timing requirements in the table is ok. ### Define variables Define some variables helps us to meet timing requirment ```verilog reg [15:0] LineCount; reg [15:0] PixelCount; reg\t[9:0] Data_R; reg\t[9:0] Data_G; reg\t[9:0] Data_B; ``` ### Synchronization signals This code generates synchronization signals. It should be noted that the synchronization signals of this screen enabled by negative polarity ```verilog always @( posedge PixelClk or negedge nRST )begin if( !nRST ) begin LineCount < 16'b0; PixelCount < 16'b0; end else if( PixelCount PixelForHS ) begin PixelCount < 16'b0; LineCount < LineCount + 1'b1; end else if( LineCount LineForVS ) begin LineCount < 16'b0; PixelCount < 16'b0; end else PixelCount < PixelCount + 1'b1; end always @( posedge PixelClk or negedge nRST )begin if( !nRST ) begin \t\t\tData_R < 9'b0; \t\t\tData_G < 9'b0; \t\t\tData_B < 9'b0; end else begin \t\t\tend \tend //Here note the negative polarity of HSYNC and VSYNC assign LCD_HSYNC (( PixelCount > H_Pluse)&&( PixelCount < (PixelForHS H_FrontPorch))) ? 1'b0 : 1'b1; assign LCD_VSYNC ((( LineCount > V_Pluse )&&( LineCount < (LineForVS 0) )) ) ? 1'b0 : 1'b1; ``` ### Enable signal This code decides whether display image. This driver needs a port which is set to 1 when the 800*480 data of the image is valid to enable display. ```verilog assign LCD_DE ( ( PixelCount > H_BackPorch )&& ( PixelCount < PixelForHS H_FrontPorch ) && ( LineCount > V_BackPorch ) && ( LineCount < LineForVS V_FrontPorch 1 )) ? 1'b1 : 1'b0; //It will shake if there not minus one ``` ### Test color bars This code generates color bars to test LCD ```verilog localparam Colorbar_width WidthPixel / 16; assign LCD_R ( PixelCount < ( H_BackPorch + Colorbar_width * 0 )) ? 5'b00000 : ( PixelCount < ( H_BackPorch + Colorbar_width * 1 )) ? 5'b00001 : ( PixelCount < ( H_BackPorch + Colorbar_width * 2 )) ? 5'b00010 : ( PixelCount < ( H_BackPorch + Colorbar_width * 3 )) ? 5'b00100 : ( PixelCount < ( H_BackPorch + Colorbar_width * 4 )) ? 5'b01000 : ( PixelCount < ( H_BackPorch + Colorbar_width * 5 )) ? 5'b10000 : 5'b00000; assign LCD_G ( PixelCount < ( H_BackPorch + Colorbar_width * 6 )) ? 6'b000001: ( PixelCount < ( H_BackPorch + Colorbar_width * 7 )) ? 6'b000010: ( PixelCount < ( H_BackPorch + Colorbar_width * 8 )) ? 6'b000100: ( PixelCount < ( H_BackPorch + Colorbar_width * 9 )) ? 6'b001000: ( PixelCount < ( H_BackPorch + Colorbar_width * 10 )) ? 6'b010000: ( PixelCount < ( H_BackPorch + Colorbar_width * 11 )) ? 6'b100000: 6'b000000; assign LCD_B ( PixelCount < ( H_BackPorch + Colorbar_width * 12 )) ? 5'b00001 : ( PixelCount < ( H_BackPorch + Colorbar_width * 13 )) ? 5'b00010 : ( PixelCount < ( H_BackPorch + Colorbar_width * 14 )) ? 5'b00100 : ( PixelCount < ( H_BackPorch + Colorbar_width * 15 )) ? 5'b01000 : ( PixelCount < ( H_BackPorch + Colorbar_width * 16 )) ? 5'b10000 : 5'b00000; ``` **Do not forget to add endmodule in the end of the driver file** Up to now we have finished the driver module. ## Instantiated in the top **New a verilog file** Just copy the content below and save it is ok ```verilog module TOP //Name TOP module ( \tinput\t\t\tnRST, input XTAL_IN, \toutput\t\t\tLCD_CLK, \toutput\t\t\tLCD_HYNC, \toutput\t\t\tLCD_SYNC, \toutput\t\t\tLCD_DEN, \toutput\t[4:0]\tLCD_R, \toutput\t[5:0]\tLCD_G, \toutput\t[4:0]\tLCD_B ); // list ports \twire\t\tCLK_SYS;\t \twire\t\tCLK_PIX; //instantiate pll Gowin_rPLL chip_pll( .clkout(CLK_SYS), //output clkout //200M .clkoutd(CLK_PIX), //output clkoutd //33.00M .clkin(XTAL_IN) //input clkin );\t \tVGAMod\tVGAMod_inst //instantiate vga driver \t( \t\t.CLK\t\t(\tCLK_SYS ), \t\t.nRST\t\t(\tnRST\t\t), \t\t.PixelClk\t(\tCLK_PIX\t\t), \t\t.LCD_DE\t\t(\tLCD_DEN\t \t), \t\t.LCD_HSYNC\t(\tLCD_HYNC \t), \t.LCD_VSYNC\t(\tLCD_SYNC \t), \t\t.LCD_B\t\t(\tLCD_B\t\t), \t\t.LCD_G\t\t(\tLCD_G\t\t), \t\t.LCD_R\t\t(\tLCD_R\t\t) \t); \tassign\t\tLCD_CLK\t\t \tCLK_PIX; endmodule ``` ## Synthesize, constrain, Place&Route ### Synthesize After finishing steps above, go to the \"Process\" interface, synthesize the edited file, which means running \"Synthesize\". ![](./../../../../zh/tang/Tang Nano 9K/nano_9k/nano_9k_synthsize.png) If the result is the same as shown below ![](./../../../../zh/tang/Tang Nano/assets/LED.png) It means that there is no bug in our code, we can continue the next steps. If there is some thing wrong, please fix by yourself. ### Constrain Here we only constraint pins The corresponding pins and ports are as follows form shows The way to constain pins can refer to the [Light led](./led/create_led.html), it contains two ways to constain pins. If you feel troublesome about the method above, you can copy the content in this [page](./../../../../zh/tang/Tang Nano 1K/examples/lcd_constrains.html)， and paste it in \".cst\" file in this project (If there is no \".cst\" file, just create a \"physicsl constrains file\"). PORT PIN PORT PIN : : : : : : : : LED_B 10 LED_G 11 LED_R 9 LCD_B[4] 24 LCD_B[3] 23 LCD_B[2] 22 LCD_B[1] 20 LCD_B[0] 19 LCD_G[5] 18 LCD_G[4] 17 LCD_G[3] 16 LCD_G[2] 15 LCD_G[1] 27 LCD_G[0] 28 LCD_R[4] 29 LCD_R[3] 30 LCD_R[2] 31 LCD_R[1] 34 LCD_R[0] 35 LCD_DEN 21 LCD_SYNC 32 LCD_HYNC 33 LCD_CLK 8 XTAL_IN 47 nRST 44 ### Place&Route After constraining, we need to open IO mux to complete Place&Route. Tick Project > Configuration > Place&Route > Dual Purpose Pin which is in the Menu Bar. ![](./../../../../zh/tang/Tang Nano/examples/led/assets/enable_io_mux.png) Then we can run Place&Route. ## Program Finishing Place&Route, we can download the generated .fs file to the development board to see color bar. ## End If you want the project, it can be found in this page : https://github.com/sipeed/TangNano 1K examples.git Now the tutorial ends, if you have any suggestions, just leave a message. <p id \"back\"> <a href \"#\" onClick \"javascript :history.back( 1);\">Back to the previous page(Back)</a> </p>"},"/hardware/en/tang/Tang-Nano-1K/Tang-Nano-1k.html":{"title":"Tang Nano 1k examples","content":" title: Tang Nano 1k examples [Blink](./examples/LED.html)(Preparing, please wait) [LCD screen](./examples/LCD.html)(Preparing, please wait)"},"/hardware/en/tang/Tang-Nano-1K/Nano-1k.html":{"title":"Tang Nano 1K","content":"# Tang Nano 1K > Edit on 2022.08.18 ## Introduction Tang Nano 1K is a core board designed based on [Gowin](https://www.gowinsemi.com/en/) GW1NZ LV1 FPGA chip. The board is equipped with RGB LCD interface and onboard USG JTAG debugger, which make it convinent for users to use. User can use this for small digital logic design and experiment. ![Nano 1](./assets/1k 1.jpg) ![Nano 2](./assets/1k 2.jpg) ## Parameters item Specs : : : : chip GW1NZ LV1 FPGA logic units(LUT4) 1152 Register(FF) 864 Block SRAM(bits) 72K Number of B SRAM 4 User flash(bits) 64K Number of Pll 1 Number of I/O Bank 2 ### Pinmap ![pinmap](./assets/1k pin.png) ## Informations [Datasheet](https://dl.sipeed.com/shareURL/TANG/Nano%201K/1_Specification) [Schematic](https://dl.sipeed.com/shareURL/TANG/Nano%201K/2_Schematic) [Bit number map](https://dl.sipeed.com/shareURL/TANG/Nano%201K/3_Bit_number_map) [Dimensional drawing](https://dl.sipeed.com/shareURL/TANG/Nano%201K/4_Dimensional_drawing) [3D File](https://dl.sipeed.com/shareURL/TANG/Nano%201K/5_3D_file) [Chip Manual](https://dl.sipeed.com/shareURL/TANG/Nano%201K/6_Chip_Manual) [Examples](https://wiki.sipeed.com/hardware/en/tang/Tang Nano Doc/examples.html) ## Addition 1. If you have trouble with this board, you can join our telegram (t.me/sipeed) or contact us on twitter (https://twitter.com/SipeedIO). 2. For Fpga burning we require using [this](https://dl.sipeed.com/shareURL/TANG/programmer) Programmer application. Because other version Programmer application may fail burning this board. 3. If you meet problems, please visit [problems](./../Tang Nano Doc/questions.html) first, normally most problems will be solved after using this programmer [Click me](https://dl.sipeed.com/shareURL/TANG/programmer)."},"/hardware/en/tang/Tang-Nano-Doc/summary.html":{"title":"Tang Nano","content":" title: Tang Nano Tang Nano series development boards are designed based on [Gowin](https://www.gowinsemi.com/en/) FPGA chip. Mutiple models of development board meets various requirements. Tang nano 1K with a extremely low price can lead user into FPGA fields Tang nano 4K with a Cortex m3 hardcore, almost the cheapest heterogeneous core board Tang nano 9K with rich logic units can be used to verify Riscv core ## Comparation Model Tang Nano 1K Tang Nano 4K Tang Nano 9K Appreance ![Generated](/hardware/zh/tang/Tang Nano/assets/clip_image002.gif) ![Generated](/hardware/zh/tang/Tang Nano/assets/clip_image004.gif) ![Generated](/hardware/zh/tang/Tang Nano/assets/clip_image006.gif) Logic units（LUT4） 1152 4608 8640 Hard core Cortex M3 Crystal oscillator frequency 27Mhz 27Mhz 27Mhz Display interface RGB screen interface HDMI HDMI,<br> RGB screen interface,<br> SPI screen interface Camera OV2640 External SPI FLASH Pads are reserved Default welding<br>32Mbit SPI FLASH Default welding<br>32Mbit SPI FLASH TF card slot yes Programmer Onboard USB JTAG Onboard USB JTAG Onboard USB JTAG &<br> USB UART The blank in the form means none ## Preparation [Install IDE](./install the ide.html) ## Questions [Questions&Answers](./programmer.html)"},"/hardware/en/tang/Tang-Nano-Doc/install-the-ide.html":{"title":"Install IDE","content":" title: Install IDE keywords: Sipeed, Gowin, Tang, Nano, fpga, primer update: date: 2023 01 13 version: none author: ali raheem content: Minor language fixes We need to use the Gowin IDE to program Gowin FPGA chips, and documentation about the ide can be found [here](https://www.gowinsemi.com/en/support/database/14/). Download and install the corresponding edition of the IDE according to your OS For linux users we suggested using Openfpgaloader to burn fpga. Read the end of this page [burn in linux](#burn in linux) for more details. ## Install the IDE ### Download the IDE The IDE can be downloaded from [this page](https://www.gowinsemi.com/en/support/download_eda/) after logging in. ![download_ide](./assets/download_ide.png) It may look difference as this screenshot is from 2022.10.18 and the IDE has since been updated. The IDE is available in two editions: Standard Edition and Education Edition. The Standard Edition IDE requires license, which you can get from GOWIN Semiconductor Corp. The Education Edition IDE is free to use, but supports fewer devices and includes fewer IP cores. The following figure (updated 2022/11/09) shows the part numbers supported in the latest Education Edition IDE ![educational_device](./assets/educational_device.png) The supported chips and boards are listed in the following table. Chip full name Chip SeriesChip model Board GW1NZ LV1QN48C6/I5 GW1NZ GW1NZ Nano 1K GW1NSR LV4CQN48PC6/I5 GW1NSR GW1NSR 4C Nano 4K GW1NR LV9QN88PC6/I5 GW1NR GW1NR 9C Nano 9K GW2AR LV18QN88PC8/I7 GW2AR GW2AR LV18 Nano 20K GW2A LV18PG256C8/I7 GW2A GW2A 18C Primer 20K So for those who want to use Tang Nano (Onboard jtag is CH552), you'll need to use the Standard Edition IDE and apply for a license from GOWIN Semiconductor Corp. ### Install #### Linux OS For linux, download the Linux edition IDE and decompress it, the executable file `gw_ide` is in the decompressed folder /IDE/bin/. Execute it on command line to run the GOWIN IDE. Remember to change the permission of the software to make it executable with `chmod + x` if running the software fails. #### Windows OS Simply download the software and install it. Making sure to install all components. <div> <img src \"./../../../zh/tang/Tang Nano Doc/get_started/assets/IDE 2.png\" width 45% alt \"install ide\"> <img src \"./../../../zh/tang/Tang Nano Doc/get_started/assets/IDE 4.png\" width 45% alt \"install programmer\"> </div> In the second picture, Gowin is the IDE which we will use to generate the bitstream file, and the Gowin programmer is what we use to burn it to the fpga. But the programmer installed with IDE does not match the USB Jtag we provide. So we suggest you visit [Tang questions](./../Tang Nano Doc/questions.html) to see how to replace programmer software with one will work better. <! so we recommand you use this [programmer](https://dl.sipeed.com/shareURL/TANG/programmer) to avoid situations such as failing downloading bitstream file. > After you finish installing IDE, you will need to install 2 drivers. ![install driver](./assets/ide install driver.png) After installing everything there will be an IDE icon, like the one below, on your desktop. ![IDE icon](./assets/ide icon.png) ## Use the IDE ### About the license The Educational edition IDE does not require a license. The Standard edition IDE requires a license, which you should apply for from the Gowin official website, visit https://www.gowinsemi.com/en/support/license/ for more information, and there you will be able to make a choice of software between `GOWIN EDA` and `GOWIN GMD`. `GOWIN EDA` is what we use to program FPGA and the `GOWIN GMD` is what we use to program the hardcore or softcore in FPGA, so you should choose `GOWIN EDA` to get a license to run GOWIN IDE. ### Verify license When you run GOWIN IDE, a license manager message box will appear. Once you have a license file you can click `Browse...` and select your license file, then `Check` and finally `Save`. <img src \"./assets/IDE 13.png\" alt \"Broswer lic\" width 45%> <img src \"./assets/check.png\" alt \"Check lic\" width 45%> Now you can use the GOWIN IDE. ### Programmer Because the Programmer installed with IDE may not match the USB JTAG we provide it may not work. So for Windows users we recommended using this [Programmer](https://dl.sipeed.com/shareURL/TANG/programmer) instead. For Linux users, go to the end of this page to see the section [burn in linux](#burn in linux) if you have issues with the Gowin programmer. ## Other It may take some time to receive a license. During this time we sugegst you read the GOWIN Semiconductor Corp official documents, which are installed with the IDE. There are three things in the IDE installation path: IDE folder, Programmer folder, uninst.exe ![ide_folder](./../../../zh/tang/Tang Nano Doc/get_started/assets/ide_folder.png) **IDE** folder：Here I suggest you look in the **doc** folder, where many GOWIN Semiconductor Corp official documents are, as shown below. ![IDE](./../../../zh/tang/Tang Nano Doc/get_started/assets/doc folder.png) **Programmer folder**: There are also many documents here. ![programmer](./../../../zh/tang/Tang Nano Doc/get_started/assets/programmer folder.png) We suggest you delete the Programmer folder installed with the IDE and use this version [Click me](https://dl.sipeed.com/shareURL/TANG/programmer)，which can solve some issues. **uninst.exe**：This program uninstalls the IDE. ## Burn in linux [Click here](./flash in linux.html) is how to burn the development board in linux."},"/hardware/en/tang/Tang-Nano-Doc/examples.html":{"title":"Tang Nano Examples","content":" title: Tang Nano Examples tags: Tang Nano, example, guide keywords: Tang Nano，example update: date: 2023 01 09 author: wonder content: Add Tang Nano 9K Lushay Labs link Here are Tang Nano series examples and continuously updated ## Preface Basic guide to use Tang FPGA <! Before reading, we suggest using this [Programmer](https://dl.sipeed.com/shareURL/TANG/programmer) not that installed with IDE In addition, we are glad you submit or provide a example, and if you have any feasible ideas, you can come up and we'll try it if possible. > ## Tang Nano The onboard downloader is ch552 Github Repository: https://github.com/sipeed/Tang Nano examples [Blink](./../Tang Nano/examples/led/led.html) [LCD screen](./../Tang Nano/examples/lcd.html) ## Tang Nano 1K Github Repository: https://github.com/sipeed/TangNano 1K examples [Blink](./../Tang Nano 1K/examples/led/led.html) [LCD screen](./../Tang Nano 1K/examples/lcd.html) ## Tang Nano 4K Github Repository: https://github.com/sipeed/TangNano 4K example [Blink](./../Tang Nano 4K/examples/led.html) (Basic tutorial) [Keyflag Blink](https://github.com/sipeed/TangNano 4K example/tree/main/key_blink)(github) [HDMI display project](https://github.com/sipeed/TangNano 4K example/tree/main/hdmi_720p)(github) [Display camera content on HDMI](https://github.com/sipeed/TangNano 4K example/tree/main/camera_hdmi)(github) Run GBA on Nano 4K ：https://github.com/Martoni/GbHdmi Litex on Tang Nano 4K : https://github.com/litex hub/litex boards Other example Blink by Cortex M3：[Github](https://github.com/verilog indeed/gowin_fpga_tutorials) ## Tang Nano 9K Github Repository: https://github.com/sipeed/TangNano 9K example [Blink](./../Tang Nano 9K/examples/led.html) [LCD screen](./../Tang Nano 9K/examples/rgb_screen.html) [Examples of PicoRV](./../Tang Nano 9K/examples/picorv.html) [FPGA drives 1.14 inch SPI screen](./../Tang Nano 9K/examples/spi_lcd.html) HDMI display : [Examples of PicoRV](./../Tang Nano 9K/examples/picorv.html) Litex on Tang Nano 9K : https://github.com/litex hub/litex boards Partner tutorials: <a href \"https://learn.lushaylabs.com/tang nano series/\"><img src \"./../../../zh/tang/Tang Nano Doc/assets/lushaylab_logo.png\" alt \"lushaylab_logo\" width \"35%\"></a> 1. [Installation & Getting Started](https://learn.lushaylabs.com/getting setup with the tang nano 9k/) 2. [Debugging & UART](https://learn.lushaylabs.com/tang nano 9k debugging/) 3. [OLED 101](https://learn.lushaylabs.com/tang nano 9k graphics/) 4. [Creating a Text Engine](https://learn.lushaylabs.com/tang nano 9k creating a text engine/) 5. [Data Conversion & Visualization](https://learn.lushaylabs.com/tang nano 9k data visualization/) 6. [Reading from the External Flash](https://learn.lushaylabs.com/tang nano 9k reading the external flash/) 7. [Generating Random Numbers](https://learn.lushaylabs.com/tang nano 9k generating random/) 8. [Sharing Resources](https://learn.lushaylabs.com/tang nano 9k sharing resources/) 9. [I2C, ADC and Micro Procedures](https://learn.lushaylabs.com/i2c adc micro procedures/) 10. [Our First CPU](https://learn.lushaylabs.com/tang nano 9k first processor/) 11. [Read HDMI EDID](https://learn.lushaylabs.com/tang nano 9k project edid/) Other Blogs [Blink by Softcore](https://blog.ruux.de/tang nano 9k softcore blink) ## End If you have questions to discuss, join the [reddit](https://www.reddit.com/r/GowinFPGA) or [telegram group](https://t.me/sipeed). Reddit: https://www.reddit.com/r/GowinFPGA Telegram: https://t.me/sipeed ## Troubles Here are the most common troubles or questions we gathered: [Tang Solutions](https://wiki.sipeed.com/hardware/en/tang/Tang Nano Doc/questions.html)"},"/hardware/en/tang/Tang-Nano-Doc/questions.html":{"title":"Solutions","content":" title: Solutions tags: Tang keywords: Programmer desc: update: date: 2023 05 18 version: v0.3 author: wonder content: Add some informations <! date: 2022 10 19 version: v0.1 author: wonder content: Rewrite some solutions date: 2023 02 23 version: v0.2 author: wonder content: Add extra information about programmer > Here are some normal questions. ## Programmer Make sure there are 2 `converter` and 1 `COM` device, this means the debugger works well. ![tang_bl702_device_convertor](./../../../zh/tang/Tang Nano Doc/assets/qusetions/tang_bl702_device_convertor.png) The debugger can be used for Jtag and UART, when using its uart function, Jtag is disabled. To solve this, replug the TypeC cable of your board to disconnect the uart connection. ### Only 2 `converter` devices If there is no `COM` device but 2 `converter` devices, right click `converter B` > `Properties` > `Advanced` > `Load VCP` , then Click `OK` and reconnect your USB device. ![tang_bl702_device_convertor_load_vcp](./assets/qusetions/tang_bl702_device_convertor_load_vcp.png) ### No `convertor` device It takes 10 seconds for debugger loading the driver. And you can install the driver manually. [Click me to download driver](https://dl.sipeed.com/shareURL/TANG/programmer) ![no_convertor_install_driver](./../../../zh/tang/Tang Nano Doc/assets/qusetions/no_convertor_install_driver.png) ### Download frequency Make sure the frquency is equal or lower than `2.5MHz`, otherwise it may lead some troubles like burnning bitstream file really slow or failed burnning bitstream file. <details> <summary><font color \"#4F84FF\">Click to see steps</font></summary> <img src \"./../../../zh/tang/assets/questions/cable.png\"> <p>Choose Frequency equal to or lower than 2.5MHz</p> <img src \"./../../../zh/tang/assets/questions/frequency.png\" > <p>Then cilck Save</p> </details> ### Error found This error means the Programmer application does detect debugger or your driver is wrong. Visit [this programmer](https://dl.sipeed.com/shareURL/TANG/programmer) compressed file, download it and extract it, replace the programmer folder install with GOWIN IDE by this extracted file. If you don't know how to replace the programmer folder, just excute the programmer application in the extracted folder to download bisdtream file instead of the programmer application installed with GOWIN IDE. If this problem still occurs after you use our recommended programmer application, try to rerun this application. If all attemps fail, see the begin of this documents about `converter`. ### Cabel open failed ![cable_open_failed](./../../../zh/tang/Tang Nano Doc/assets/qusetions/cable_open_failed.png) This means the programmer application does not detect the debugger, try this programmer application mentioned in [Error found](#error found). If this problem still occurs after you use our recommended programmer application, try to rerun this application. If all attemps fail, see the begin of this documents about `converter`. <! After finishing replacing **programmer** as mentioned previously,Do following steps in programmer application. Click Edit >Cable Setting >Cable >Query in the top menu bar,then save. <details> <summary><font color \"#4F84FF\">Click to see steps by pictures</font></summary> <img src \"./../../../zh/tang/assets/questions/cable.png\"> <p>Click Query in the following picture</p> <img src \"./../../../zh/tang/assets/questions/click_query.png\" > <p>Click Save</p> </details> > ### No Gowin devices found This means the debugger does not detect the gowin chip, try this programmer application mentioned in [Error found](#error found). For 20K Dock kits, it's necessary to enable the core board before using debugger debug the chip, just put the 1 switch on the dip switch down, otherwise this error occurs. Enable Core Board Disable state Additional comments <img src \"./../../../zh/tang/tang primer 20k/assets/start/switch_1_on.png\" alt \"switch_1_on\" width 100%><img src \"./../../../zh/tang/tang primer 20k/assets/start/reset_led_on.png\" alt \"reset_led_on\" width 100%> When disabled, the LDE0 and LED1 is on, and core board doesn't work. When using RV Debugger Plus burnning firmware into 20K core board this error occurs, possibly the order of connectting wire is wrong, make sure your connectting order is same as following sheet, or you can check your core board jtag connector inside pins, make sure none of them are crooked(One time we get problem connecting Debugger with core board and finnaly check out that there is a crooked pin in the jtag connector, this maybe because of doing wrong connection operations when connecting) The JTAG pin orders can be found in the back of 20K core board. <table> <tr> <td>Core Board</td> <td>5V0</td> <td>TMS</td> <td>TDO</td> <td>TCK</td> <td>TDI</td> <td>RX</td> <td>TX</td> <td>GND</td> </tr> <tr> <td>Debugger</td> <td>5V0</td> <td>TMS</td> <td>TDO</td> <td>TCK</td> <td>TDI</td> <td>TX</td> <td>RX</td> <td>GND</td> </tr> </table> ![cable_connect](./../../../../../news/others/20k_lite_start/assets/cable_connect.png) ### ID code mismatch ![id_code_mismatch](./../../../zh/tang/Tang Nano Doc/assets/qusetions/id_code_mismatch.png) This means the selected device in the project mismatch your burnning chip. All that refers chip model(The project device, pin constrain, IP modules and programmer device choose) need to be reset. Board name Series Device Package Speed Tang Nano GW1N GW1N 1 QFN48 C6/I5 Tang Nano 1K GW1NZ GW1NZ 1 QFN48 C6/I5 Tang Nano 4K GW1NSR GW1NSR 4C QFN48P C6/I5 or C7/I6 Tang Nano 9K GW1NR GW1NR 9C QFN88P C6/I5 Tang Primer 20K GW2A GW2A 18C PBGA256 C8/I7 <! For Nano 9K it should be choose as follow: > <! <details> <summary><font color \"#4F84FF\">Click to see the choice of 9K</font></summary> <img src \"./../../../zh/tang/Tang Nano 9K/nano_9k/Tang_nano_9k_Device_choose.png\"> </details> For other boards, just make sure your device selection corresponds to the laser mark on chip package. > ### spi flash selected mismatch The board using GOWIN Semiconductor LittleBee product family (Series of chip names beginning with GW1N) incorporates embedded FLASH in main chip, so when burning firmware we burn into embedded FLASH, and reagrd the external FLASH as a peripheral. The board using GOWIN Semiconductor Arora product family (Series of chip names beginning with GW1N) does not incorporate embedded FLASH, so when burning firmware we burn into external FLASH, and the operations are as followed . <table> <tr> <td rowspan \"2\"><img src \"./../../../zh/tang/tang primer 20k/examples/assets/led_assets/flash_mode.png\" alt \"flash_mode\"></td> <td style \"white space:nowrap\">Operation is<br><code>exFlash Erase,Program thru GAO Bridge</code></td> </tr> <tr> <td>Flash Device we choose <code>Generic Flash</code></td> </tr> </table> ### Download slowly Don't choose Operation containing Verify ![never_choose_verify](./../../../zh/tang/assets/questions/never_choose_verify.png) Make sure the frquency is equal or lower than `2.5MHz`, normally `2.5MHz` everything is ok. <details> <summary><font color \"#4F84FF\">Click to see steps</font></summary> <img src \"./../../../zh/tang/assets/questions/cable.png\"> <p>Choose Frequency equal to or lower than 2.5MHz</p> <img src \"./../../../zh/tang/assets/questions/frequency.png\" > <p>Then cilck Save</p> </details> ### Directory *** has null character. Error character of the project path. Close IDE. Check projrct path, only English works and `_` are Ok, take care of the blank character ` ` in the path. Reopen the project, clean and rerun your project. ### Can't find download file Normally the download file with extension name `.fs` is in the impl/pnr folder under the project path. <details> <summary><font color \"#4F84FF\">Click to see steps by picture</font></summary> <img src \"./../../../zh/tang/assets/questions/fs_path.png\"> <p>From the picture above we can know the path of this download file is fpga_project1/impl/pnr/fpga_project1.fs </p> <p></p> <p> The fpga_project1 is the project directory, the impl is generated by IDE, and the download is in the folder named pnr</p> <p></p> <p> The file with extension name `.fs` is the firmware we will burn into fpga</p> </details> ## IDE ### See IP manual In the IP Core generate interface of IDE, click your target IP, then choose your language reference to see the IP manual. <details> <summary><font color \"#4F84FF\">Click to see instructions</font></summary> <img src \"./../../../zh/tang/assets/ip reference.png\"> </details> ### Reconfigure generated IP In the IP Core generate interface of IDE, click the folder icon next to device selection at the top to open the generated IP configuration interface. <details> <summary><font color \"#4F84FF\">Click to see instructions</font></summary> <img src \"./../../../zh/tang/assets/ip reconfigure.png\"> </details> ### Set top module For project containning muti projects, if you succeed generating your module, right click the module you want to set as the top module IDE > Hierarchy interface. ![set_top_module](./../../../zh/tang/Tang Nano Doc/assets/set_top_module.png) If your Hierarchy interface is the same as what is in the left picture, this means there are logic errors in the code, such as syntax errors or generate errors. Click 'RTL Anakysis Error' in the upper right corner then you can see the error type code and location of the error in the dialog box that pops up, as shown in the right picture in the following table. <table> <tr> <td align \"center\">RTL Analysis Error</td> <td align \"center\">Error type and details</td> </tr> <tr> <td><img src \"./../../../zh/tang/Tang Nano Doc/assets/top_error.png\" alt \"top_module_error\" ></td> <td><img src \"./../../../zh/tang/Tang Nano Doc/assets/error_detail.png\" alt \"error_detail\" ></td> </tr> </table> ### Using GAO GAO is Gowin Analyzer Oscilloscope, its document can be found in the path like what is shown below ![gao](./assets/gao.png) Using this [programmer application](https://dl.sipeed.com/shareURL/TANG/programmer) instead of the programmer application installed with, then you can use GAO.(GAO need run by IDE, so you need to replace the Programmer bin folder by your downloaded one)"},"/hardware/en/tang/Tang-Nano-Doc/flash-in-linux.html":{"title":"Flash in linux","content":" title: Flash in linux keyeords: Linux, FPGA, Gowin It's suggested to use **openFPGALoader** to flash te development board in Ubuntu. Other linux distributions have not been verified. The steps are as shown: ### Install openFPGALoader Reference：https://trabucayre.github.io/openFPGALoader/guide/install.html Using the following commands in terminal: ```bash # preprocess sudo apt get install libftdi1 2 libftdi1 dev libhidapi hidraw0 libhidapi dev libudev dev zlib1g dev cmake pkg config make g++ # compile git clone https://github.com/trabucayre/openFPGALoader.git cd openFPGALoader mkdir build cd build cmake ../ # add DBUILD_STATIC ON to build a static version # add DENABLE_UDEV OFF to disable udev support and d /dev/xxx # add DENABLE_CMSISDAP OFF to disable CMSIS DAP support cmake build . # or # make j$(nproc) # install sudo make install ``` ### Flash Detect board ```bash $ sudo ./openFPGALoader detect # This command should be executed in the directory where you previously executed make install # The log of succeed running is shown below Jtag frequency : requested 6.00MHz > real 6.00MHz index 0: idcode 0x100481b manufacturer Gowin family GW1N model GW1N(R) 9C irlength 8 ``` Download bitstream ```bash $ sudo ./openFPGALoader b tangnano9k f ../../nano9k_lcd/impl/pnr/Tang_nano_9K_LCD.fs # b means target model，this can be found in the form below # f means download to flash，with it means download to sram # The last is what need to be downloaded, it should be the related .fs file # The log of succeed running is shown below write to flash Jtag frequency : requested 6.00MHz > real 6.00MHz Parse file Parse ../../nano9k_lcd/impl/pnr/Tang_nano_9K_LCD.fs: Done DONE Jtag frequency : requested 2.50MHz > real 2.00MHz erase SRAM Done erase Flash Done write Flash: [ ] 100.00% Done CRC check: Success ``` b means target development board, should be decided from the form below： Board name FPGA Memory Flash tangnano GW1N 1 QFN48 OK Internal Flash tangnano1k GW1NZ 1 QFN48 OK Internal Flash tangnano4k GW1NSR 4C QFN48 OK Internal Flash/External Flash tangnano9k GW1NR 9C QFN88 OK Internal Flash/External Flash "},"/hardware/en/tang/tang-nano-20k/nano-20k.html":{"title":"Tang Nano 20K","content":" title: Tang Nano 20K keywords: FPGA, Tang, Nano, 20K update: date: 2023 02 27 version: v0.1 author: wonder content: Create file ## Introduction Tang Nano 20K is a development board, using the [GW2AR 18 QN88](http://www.gowinsemi.com.cn/prod_view.aspx?TypeId 10&FId t3:10:3&Id 167#GW2AR) FPGA, containing 20736 LUT4 logic cells and 15552 Filp Flops. There are 2 PLL in this FPGA chip, and many DSP units supporting 18 bit x 18 bit multiplication. Onboard [BL616](https://bouffalolab.com/product/?type detail&id 21) is used for downloading bitstream into FPGA, and it's also used as USB to serial convertor to communicate FPGA with computer via UART. The 27MHz crystal generates the clock for HDMI display, onboard MS5351 clock generating chip also provides mutiple clocks. ## Rendering appearance <img src \"./../../../../hardware/zh/tang/tang nano 20k/assets/nano_20k/tang_nano_20k_3920_top.png\" width \"40%\"> <img src \"./../../../../hardware/zh/tang/tang nano 20k/assets/nano_20k/tang_nano_20k_3920_bot.png\" width \"40%\"> ## Parameters <table> <thead> \t<tr> \t\t<th style \"text align:center\">Item</th> \t\t<th style \"text align:center\">Detail</th> \t\t<th style \"text align:center\">Others</th> \t</tr> </thead> <tbody> \t<tr> \t\t<td style \"text align:left\">FPGA Chip</td> \t\t<td style \"text align:left\"><a href \"http://www.gowinsemi.com.cn/prod_view.aspx?TypeId 10&amp;FId t3:10:3&amp;Id 167#GW2AR\">GW2A LV18QN88C8I7</a> \t\t</td> \t\t<td style \"text align:left\"> \t\t\t<table> \t\t\t\t<tbody> \t\t\t\t\t<tr> \t\t\t\t\t<td>Logic units(LUT4)</td> \t\t\t\t\t<td>20736</td> \t\t\t\t</tr> \t\t\t\t<tr> \t\t\t\t\t<td>Flip Flop(FF)</td> \t\t\t\t\t<td>15552</td> \t\t\t\t</tr> \t\t\t\t<tr> \t\t\t\t\t<td>Shadow SRAM (S SRAM)(bits)</td> \t\t\t\t\t<td>41472</td> \t\t\t\t</tr> \t\t\t\t<tr> \t\t\t\t\t<td>Block SRAM (B SRAM)(bits)</td> \t\t\t\t\t<td>828K</td> \t\t\t\t</tr> \t\t\t\t<tr> \t\t\t\t\t<td>Numbers of B SRAM</td> \t\t\t\t\t<td>46</td> \t\t\t\t</tr> \t\t\t\t<tr> \t\t\t\t\t<td>32bits SDR SDRAM</td> \t\t\t\t\t<td>64M bits</td> \t\t\t\t</tr> \t\t\t\t<tr> \t\t\t\t\t<td>Numbers of 18x18 Multiplier</td> \t\t\t\t\t<td>48</td> \t\t\t\t</tr> \t\t\t\t<tr> \t\t\t\t\t<td>Numbers of PLLs</td> \t\t\t\t\t<td>2</td> \t\t\t\t</tr> \t\t\t\t<tr> \t\t\t\t\t<td>I/O Bank</td> \t\t\t\t\t<td>8</td> \t\t\t\t</tr> \t\t\t</tbody></table> \t\t</td> \t</tr> \t<tr> \t\t<td style \"text align:left\">Onboard debugger</td> \t\t<td style \"text align:left\">BL616</td> \t\t<td style \"text align:left\">· JTAG for FPGA<br>· USB to UART for FPGA<br>· USB to SPI for FPGA communication<br>· Control MS5351 generate frequency</td> \t</tr> \t<tr> \t\t<td style \"text align:left\">Clock generator</td> \t\t<td style \"text align:left\">MS5351</td> \t\t<td style \"text align:left\">Provide extra 3 clocks for FPGA</td> \t</tr> \t<tr> \t\t<td style \"text align:left\">Display interface</td> \t\t<td style \"text align:left\">· 40Pins RGB lcd connector<br>· HDMI interface</td> \t\t<td style \"text align:left\"></td> \t</tr> \t<tr> \t\t<td style \"text align:left\"> LED </td> \t\t<td style \"text align:left\"> 6 </td> \t\t<td style \"text align:left\"> Low voltage level enable</td> \t</tr> \t<tr> \t\t<td style \"text align:left\"> RGB LED </td> \t\t<td style \"text align:left\"> 1 </td> \t\t<td style \"text align:left\"> WS2812 </td> \t</tr> \t<tr> \t\t<td style \"text align:left\"> User key </td> \t\t<td style \"text align:left\"> 2 </td> \t\t<td style \"text align:left\"> </td> \t</tr> \t<tr> \t\t<td style \"text align:left\"> TF Card Slot </td> \t\t<td style \"text align:left\"> 1 </td> \t\t<td style \"text align:left\"> </td> \t</tr> \t<tr> \t\t<td style \"text align:left\"> PCM Amplifier </td> \t\t<td style \"text align:left\"> 1 </td> \t\t<td style \"text align:left\"> MAX98357A，for audio driving</td> \t</tr> \t<tr> \t\t<td style \"text align:left\"> Storage </td> \t\t<td style \"text align:left\"> 64Mbits Flash </td> \t\t<td style \"text align:left\"> To save bitstream </td> \t</tr> \t<tr> \t\t<td style \"text align:left\"> Size </td> \t\t<td style \"text align:left\"> 22.55mm x 54.04mm </td> \t\t<td style \"text align:left\"> Visit 3D file for more information </td> \t</tr> </tbody> </table> ## Function diagram ![tang_nano_20k_functionalannotation](./../../../../hardware/zh/tang/tang nano 20k/assets/nano_20k/tang_nano_20k_functionalannotation.jpg) Detailed Function diagram <img src \"./../../../../hardware/zh/tang/tang nano 20k/assets/nano_20k/tang_nano_20k_functionalannotation_top.png\" width \"40%\" alt \"tang_nano_20k_functionalannotation_top\"> <img src \"./../../../../hardware/zh/tang/tang nano 20k/assets/nano_20k/tang_nano_20k_functionalannotation_bot.png\" width \"40%\" alt \"tang_nano_20k_functionalannotation_bot\"> ## Pin diagram ![tang_nano_20k_pinlabel](./../../../../hardware/zh/tang/tang nano 20k/assets/nano_20k/tang_nano_20k_pinlabel.png) ## FPGA Jtag test point We reserved jtag test point on Tang Nano 20K, for those who want to use their own debugger. Note: There is onboard Jtag for download FPGA firmware, so this Jtag test point is only for those who want to use their own debugger. ![tang_nano_20k_testpointlannotation](./../../../../hardware/zh/tang/tang nano 20k/assets/nano_20k/tang_nano_20k_testpointlannotation.png) ## Hardware information [Datesheet](https://dl.sipeed.com/shareURL/TANG/Nano_20K/1_Datasheet) [Schematic](https://dl.sipeed.com/shareURL/TANG/Nano_20K/2_Schematic) [PCB BOM](https://dl.sipeed.com/shareURL/TANG/Nano_20K/3_Bit_number_map)(Visit the `html` file in your board version) [Board Size](https://dl.sipeed.com/shareURL/TANG/Nano_20K/4_Dimensional_drawing) [Bosrd 3D File](https://dl.sipeed.com/shareURL/TANG/Nano_20K/4_Dimensional_drawing) [Part of chip datasheet](https://dl.sipeed.com/shareURL/TANG/Nano_20K/6_Chip_manual) ## Using guide Install IDE > Prepare your code > Burn into board Install IDE [Click me](https://wiki.sipeed.com/hardware/en/tang/Tang Nano Doc/install the ide.html) [Unbox](./example/unbox.html) Blink the leds [Click me]() <! https://wiki.sipeed.com/hardware/en/tang/tang nano 20k/example/led.html > More example codes [Github](https://github.com/sipeed/TangNano 20K example) ### Studying resource Verilog tutorial:[Verilog](https://www.asic world.com/verilog/index.html) Verilog Practice：[HDLBits](https://hdlbits.01xz.net/wiki/Main_Page) ## Contact **Reddit** : [reddit.com/r/GowinFPGA/](reddit.com/r/GowinFPGA/) **Telegram** : [t.me/sipeed](t.me/sipeed) Leave message in the end of this page Business email : [support@sipeed.com](support@sipeed.com) ## Questions ### How to store bitstream Tang Nano 20K uses the external Flash to save the firmware, we need to download the bitstream to store the firmware. ### Visit [Tang Questions](http://127.0.0.1:2333/hardware/en/tang/Tang Nano Doc/questions.html) to find more solutions"},"/hardware/en/tang/tang-nano-20k/example/unbox.html":{"title":"Tang Nano 20K Unbox","content":" title: Tang Nano 20K Unbox keywords: FPGA, Tang, Nano, 20K update: date: 2023 05 23 version: v0.1 author: wonder content: Release docs Tang Nano 20K is mainly available as two purchase options: `Retro Game kits` and `development board kits` ## Primary power on The default firmware in Tang Nano 20K is [litex](https://github.com/litex hub), and it can be download from [github](https://github.com/sipeed/TangNano 20K example/tree/main/litex). Power on Tang Nano 20K, leds flow. ![unbox_nano_20k_led_water_flow](./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_nano_20k_led_water_flow.gif) Windows 10 and Windows 11 can install the driver automatically, and there is at least one USB Serial Port in the device manager. We can open this serial port via the serial port available application like [Mobaxterm](https://mobaxterm.mobatek.net/). ![unbox_device_manager_serial_port](./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_device_manager_serial_port.png) Set baudrate 115200, open the serial port, and we succeed opening the litex terminal. ![unbox_uart_litex_terminal](./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_uart_litex_terminal.png) Tap the `tab` on your serial terminal via keyboard to see all commands we can use. ![unbox_uart_litex_command_list](./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_uart_litex_command_list.png) Here we take leds as example, type `leds` command. ![unbox_uart_litex_leds_command_help](./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_uart_litex_leds_command_help.png) We can see it requires a value with `leds` command. Here we type `leds 62` via serial terminal and see the state of onboard leds. ![unbox_uart_litex_leds_command_control](./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_uart_litex_leds_command_control.png) There is only one led on. ![unbox_uart_litex_leds_command](./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_uart_litex_leds_command.jpg) If the value we type is too big, this command will set the value to `0xffffffff`. ![unbox_uart_litex_leds_max_value](./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_uart_litex_leds_max_value.png) ## Advanced usage All commands above we run are on FPGA, apart from the GW2AR 18C FPGA chip, there is an onboard BL616 chip on this board, we can open its terminal and run its built in commands. Similar to the previous steps, open the serial port via Mobaxterm, then use shortcut key combinations `Ctrl + x` and `Ctrl + c`, then tap `Enter` key to open the BL616 inside terminal. ![unbox_uart_bl616_terminal](./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_uart_bl616_terminal.png) Tap `Enter` key to test the terminal, and it supports commands auto completion. ![unbox_uart_bl616_command_list](./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_uart_bl616_command_list.png) Here we take `pll_clk` and `choose` these two commands as example. ### pll_clk There is a MS5351 configurable clock generator on Tang Nano 20K, it's configured by BL616 chip, and we set the generated clock via `pll_clk` command. ![unbox_uart_bl616_pllclk_command](./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_uart_bl616_pllclk_command.png) MS5351 can generate 3 clock output, we can see its clock output pin via the schematic. ![unbox_uart_bl616_ms351_clk_pin](./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_uart_bl616_ms351_clk_pin.png) The CLK0 clock is connected with the PIN10 of FPGA, and CLK1 clock is connected with the PIN14 of FPGA, CLK2 clock is connected with the PIN13 of FPGA. Set CLK1 output 50M clock `pll_clk O1 50M` <table> <tr> <td><img src \"./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_uart_bl616_ms351_set_o1_clk_50m.png\" alt \"unbox_uart_bl616_ms351_set_o1_clk_50m\"></td> <td> ① Type the command, we can see the log <br> ② Type `pll_clk` again, we can see the current configuration <br> ③ This means O1 output 50M clock <br> ④ [EN] means O1 enabled, [DIS] means disabled. </td> </tr> </table> Disable CLK1 `pll_clk O1` <table> <tr> <td><img src \"./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_uart_bl616_ms351_disable_o1_clk.png\" alt \"unbox_uart_bl616_ms351_disable_o1_clk\"></td> <td> ① View the current configuration <br> ② CLK1 enabled <br> ③ Run command to disable CLK1 <br> ④ CLK1 disabled </td> </tr> </table> Save configuration `pll_clk s` ![unbox_uart_bl616_ms351_save](./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_uart_bl616_ms351_save.png) Set CLK2 output 100M clock and save configuration `pll_clk O2 100M s` ![unbox_uart_bl616_ms351_clk2_100m](./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_uart_bl616_ms351_clk2_100m.jpg) ### choose `choose` command is used to choose the communication methods between FPGA and BL616 Chip. ![unbox_uart_bl616_choose_list](./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_uart_bl616_choose_list.png) The default communication method between FPGA and BL616 Chip is `uart` mode. Use shortcut key combinations `Ctrl + x` and `Ctrl + c`, then tap Enter to quit serial communication mode, and get into BL616 terminal. `uart` mode test Run `choose uart` in BL616 terminal, the BL616 communicates with FPGA via serial pins. ![unbox_uart_bl616_choose_uart](./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_uart_bl616_choose_uart.png) Type Enter to test the FPGA default litex terminal if you did not flash any firmware for FPGA. To quit serial communication mode, use command `Ctrl + x` and `Ctrl + c`, then tap Enter to open the BL616 terminal. ![unbox_uart_bl616_quit_uart_mode](./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_uart_bl616_quit_uart_mode.png) `spi` Mode When in SPI mode, BL616 is the SPI slave device, and receives the SPI data from FPGA. However, the default FPGA firmware does not contain the test. ## Retro Game kits Tang Nano 20K can act as NES [NESTang](https://github.com/nand2mario/nestang), here we tell how to build your Tang Nano 20K a Retro Game. Visit [Tang Nano 20K nestang github example](https://github.com/sipeed/TangNano 20K example/tree/main/nestang) or [NESTang](https://github.com/nand2mario/nestang) if you want to know more. ### Hardware Preparation One Tang Nano 20K One or two Joystick and Joystick convertor board One TF card and a card reader One breadboard (To tie the FPGA board and Joystick) HDMI monitor ### Software Preparation Windows：[Gowin Programmer](http://www.gowinsemi.com.cn/faq.aspx) , [balenaEtcher](https://etcher.balena.io/) and `python` Linux: [Openfpgaloader](https://github.com/trabucayre/openFPGALoader) and `python` Linux users can visit [Tang Nano 20K nestang github example](https://github.com/sipeed/TangNano 20K example/tree/main/nestang) to see how to build this game kit, here we use Windows as the example to tell the steps of building the game kit. ### Flash FPGA firmware Run [Gowin Programmer](http://www.gowinsemi.com.cn/faq.aspx) to flash [this firmware](https://dl.sipeed.com/shareURL/TANG/Nano_20K/7_Nestang/firmware) into FPGA external Flash. ![unbox_burn_nestang_firmware_into_flash](./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_burn_nestang_firmware_into_flash.png) ### Make games image Use these [scripts](https://dl.sipeed.com/shareURL/TANG/Nano_20K/7_Nestang/script)(All scripts need downloading), to generate your NES games into the file image which can be loaded by FPGA NES Emulator. The following command converts `1.nes` `2.nes` `3.nes` these three NES games into the game image file(games.img). ```bash python nes2img.py o games.img 1.nes 2.nes 3.nes ``` > If it tells PIL not found. Install PIL via pip manually. Then the game image file(games.img) is generated. ### Burn game image file We need a TF card to store the game, with this we can load the game on Tang Nano 20K. Here we use [balenaEtcher](https://etcher.balena.io/) to flash the game image file. Open this program, choose `Flash from file`, select the generated game image file `games.img` <img src \"./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_burn_nestang_game_image_select_file.png\" alt \"unbox_burn_nestang_game_image_select_file\" width \"48%\"> <img src \"./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_burn_nestang_game_image_choose_game_image.png\" alt \"unbox_burn_nestang_game_image_choose_game_image\" width \"48%\"> A warning comes out, but we click Continue. <img src \"./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_burn_nestang_game_warn_no_partition_table.png\" alt \"unbox_burn_nestang_game_warn_no_partition_table\" width \"48%\"> Tick your TF card, make sure you choose the right TF card, not the other disk. Click Select. <img src \"./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_burn_nestang_game_change_tfcard_select.png\" alt \"unbox_burn_nestang_game_change_tfcard_select\" width \"48%\"> <img src \"./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_burn_nestang_game_select_tf_card.png\" alt \"unbox_burn_nestang_game_select_tf_card\" width \"48%\"> Click Flash. <img src \"./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_burn_nestang_game_burn_game_image.png\" alt \"unbox_burn_nestang_game_burn_game_image\" width \"48%\"> <img src \"./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_burn_nestang_game_finish_burn_game_image.png\" alt \"unbox_burn_nestang_game_finish_burn_game_image\" width \"48%\"> ### Assemble board Insert TF card into board. ![unbox_burn_nestang_game_tf_card_onsert](./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_burn_nestang_game_tf_card_onsert.jpg) Tie joystick convertor board and FPGA board on breadboard. ![unbox_burn_nestang_game_breadboard_connecting](./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_burn_nestang_game_breadboard_connecting.jpg) Note the read line in the picture above, it shows the relative position of FPGA pin and convertor board. Connect the joystick and HDMI cable ![unbox_burn_nestang_game_connect_hdmi_cable](./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_burn_nestang_game_connect_hdmi_cable.jpg) > When connected 2 joysticks, player ① is the right one in the picture above. ### Start game Power on Tang Nano 20K, we can see the game menu. The number of games and the name of games depends on your NES game name and quantity when generating the game image file. ![unbox_burn_nestang_power_game](./../../../../zh/tang/tang nano 20k/assets/unbox/unbox_burn_nestang_power_game.jpg) Press `②` or `O` to start the game Press `S1` on the FPGA board to go back to the game menu ## FPGA Development guide [Blink the LED](https://wiki.sipeed.com/hardware/en/tang/tang nano 20k/example/led.html)"},"/hardware/en/tang/tang-nano-20k/example/led.html":{"title":"Tang Nano 20K 点灯","content":" title: Tang Nano 20K 点灯 keywords: FPGA, Tang, Nano, 20K update: date: 2023 03 24 version: v0.1 author: wonder content: 新建文档 这里我们用点亮板子上的LED来作为例程来快速熟悉一下高云半导体 IDE 的使用流程 对于软件开发来说，输出 `hello world` 就是入门了。对于硬件相关的开发而言，点灯就是同款入门。 ## 安装 IDE 参考 [安装IDE](https://wiki.sipeed.com/hardware/zh/tang/Tang Nano Doc/get_started/install the ide.html) 来完成我们需要准备的软件环境。 对于 Linux 用户的话建议使用 [openfpgaLoader](https://wiki.sipeed.com/hardware/zh/tang/Tang Nano Doc/get_started/flash_in_linux.html) 这软件来烧录这款设备。 ## 新建工程 文件 > 新建 > FPGA Design > Project <div> <img src \"./../../tang primer 20k/examples/assets/led_assets/new_project.png\" width 58% alt \"new_project\"> <img src \"./../../tang primer 20k/examples/assets/led_assets/fpga_project.png\" width 35% alt \"fpga_project\"> </div> 设置工程名称，要求只用英文的下划线命名，存放路径中不要有中文字符或者空格等特殊符号。 ![project_path](./../../tang primer 20k/examples/assets/led_assets/project_path.png) 然后在下面的芯片型号中选择 GW2AR LV18QN88C8/I7，使用上面的筛选能够更快地选择到正确的型号。注意 Device 那一栏为 GW2A 18C ![device_choose](./../assets/led/nano_20k_device_device_choose.png) 然后点击确定后就可以进行最终项目预览了。确认无误后就完成工程创建了。 ## 编写代码 ### 新建文件 高云半导体 IDE 提供了三种新建文件的方法。在此我们直接使用快捷键 `Ctrl + N` 来新建文件，其他两种不在此讲述。 在弹出的窗口中选择 `Verilog File`，会 VHDL 的也可以选择下面的 `VHDL File`，这篇文章只用 Verilog 来做点灯示例。 <img src \"./../../tang primer 20k/examples/assets/led_assets/new_verilog_file.png\" width 50% alt \"new_verilog_file\"> 点击 OK 之后会提示让我们输入文件名称，此处以 `led` 为文件名做示范。 <img src \"./../../tang primer 20k/examples/assets/led_assets/file_name.png\" width 75% alt \"file_name\"> 到这里我们就完成文件的创建了，可以直接编写代码了。 ![nano_20k_created_file.png](./../assets/led/nano_20k_created_file.png.png) ### Verilog 简单说明 Verilog 是一种硬件描述语言，用来对数字电路进行抽象化描述。 Verilog 的基本设计单元是“模块”(module)。 一个模块是由两部分组成的：一部分描述接口，另一部分描述内部逻辑功能，即定义输入是如何影响输出的。 一个模块长成这样： ```v module module_name #(parameter) (port) ; function endmodule ``` 模块整体结构由 module 和 endmodule 组成，module 后面跟着的是模块的名称(module_name)，可传递变量参数(parameter)，端口及其方向的申明(port)，紧接着就是内部逻辑功能描述(function) ,最后用 endmodule 来表示这一个模块，描述完毕。 内部逻辑功能通常由 assign 和 always 块完成；其中 assign 语句描述逻辑功能，always 块常用于描述时序功能。 ### 阻塞赋值与非阻塞赋值 在时序逻辑描述中，赋值符号有 ` ` 和 `< ` 两种。注意 `< ` 在 if 判断语句中为小于或等于，不是赋值符号。 详细解释查看底部的 [阻塞赋值与非阻塞赋值区别](#阻塞赋值与非阻塞赋值区别) ### 代码思路 写代码前我们需要先想清楚代码目的：每隔 0.5S 灯闪一次。 对此所画的需求框图如下： ![block_method](./../../tang primer 20k/examples/assets/led_assets/block_method.png) 然后对于 0.5S 我们需要一个计数器来计时，LED 灯闪就是 IO 翻转 ![count_block](./../../tang primer 20k/examples/assets/led_assets/time_count.png) 把上面的思维框图具体到实际使用的话，就变成下面的样式了: ![clock_time_count](./../../tang primer 20k/examples/assets/led_assets/clock_time_count.png) 其中 Clock 为时钟源，用来给计时器提供准确的时间。 ### 代码描述 根据上文 Verilog 简单说明和所描述的框图，可以所要编写 Verilog 模块有 Clock 和 IO电平 两个端口； ```v module led( input Clock, output IO_voltage ); endmodule ``` 对于内部的计时模块，Primer 20K 核心板上的晶振为 27MHZ，因此我们每秒钟会有 27000000 个时钟上升沿，想要 0.5S 计数的话那么只需要计数 13500000 次上升沿就好。计数是从 0 开始的，数 13500000 的话就是从 0 数到 13499999。计数完后我们需要设置一个标志位，来通知 LED 的 IO 翻转一下电平。整体计数代码如下： ```v //parameter Clock_frequency 27_000_000; // 时钟频率为27Mhz parameter count_value 13_499_999; // 计时 0.5S 所需要的计数次数 reg [23:0] count_value_reg ; // 计数器 reg count_value_flag; // IO 电平翻转标志 always @(posedge Clock) begin if ( count_value_reg < count_value ) begin //没有计数到 0.5S count_value_reg < count_value_reg + 1'b1; // 继续计数 count_value_flag < 1'b0 ; // 不产生翻转标志 end else begin //计数到 0.5S 了 count_value_reg < 23'b0; // 清零计数器，为重新计数最准备 count_value_flag < 1'b1 ; // 产生翻转标志 end end ``` 对于 LED IO 电平翻转代码如下： ```v reg IO_voltage_reg 1'b0; // 声明 IO 电平状态用于达到计时时间后的翻转，并赋予一个低电平初始态 always @(posedge Clock) begin if ( count_value_flag ) // 电平翻转标志有效 IO_voltage_reg < ~IO_voltage_reg; // IO 电平翻转 else // 电平翻转标志无效 IO_voltage_reg < IO_voltage_reg; // IO 电平不变 end ``` 将上面的代码整合后就变成了下面的内容: ```v module led( input Clock, output IO_voltage ); /**********计时部分**********/ //parameter Clock_frequency 27_000_000; // 时钟频率为27Mhz parameter count_value 13_499_999; // 计时 0.5S 所需要的计数次数 reg [23:0] count_value_reg ; // 计数器 reg count_value_flag; // IO 电平翻转标志 always @(posedge Clock) begin if ( count_value_reg < count_value ) begin //没有计数到 0.5S count_value_reg < count_value_reg + 1'b1; // 继续计数 count_value_flag < 1'b0 ; // 不产生翻转标志 end else begin //计数到 0.5S 了 count_value_reg < 23'b0; // 清零计数器，为重新计数最准备 count_value_flag < 1'b1 ; // 产生翻转标志 end end reg IO_voltage_reg 1'b0; // 声明 IO 电平状态用于达到计时时间后的翻转，并赋予一个低电平初始态 /**********电平翻转部分**********/ always @(posedge Clock) begin if ( count_value_flag ) // 电平翻转标志有效 IO_voltage_reg < ~IO_voltage_reg; // IO 电平翻转 else // 电平翻转标志无效 IO_voltage_reg < IO_voltage_reg; // IO 电平不变 end /**********补充一行代码**********/ assign IO_voltage IO_voltage_reg; endmodule ``` 上面代码最后面补充了一行代码，是因为 IO_voltage 声明在了 port 位置，默认为 wire 型，想要将它与 reg 变量 IO_voltage_reg 连接起来，需要用到 assign 语句。 ## 综合，约束，布局布线 ### 综合 代码保存后，可以双击 IDE 内部的 Process > Synthesize 来进行代码综合，将 verilog 代码内容转换为综合网表。 ![synthesize](./../../tang primer 20k/examples/assets/led_assets/synthesize.png) 关于网表有兴趣的可以自己去查阅相关资料，此处不再额外说明。 ### 约束 综合完之后我们需要进行管脚约束，才能将所编写的模块端口与 FPGA 引脚相对应，并且实现模块的功能。 点击上图 Synthesize 上面的 FloorPlanner 来进行管脚约束。 ![floorplanner](./../../tang primer 20k/examples/assets/led_assets/floorplanner.png) 由于是首次创建，所以会弹出下面的对话框，点击 OK 后就弹出了图形化约束交互界面。 ![create_constrain_file](./../../tang primer 20k/examples/assets/led_assets/create_constrain_file.png) ![nano_20k_floorplanner_interface](./../assets/led/nano_20k_floorplanner_interface.png) 关于约束的方法可以查看 [SUG935 1.3_Gowin设计物理约束用户指南.pdf](http://cdn.gowinsemi.com.cn/SUG935 1.3_Gowin%E8%AE%BE%E8%AE%A1%E7%89%A9%E7%90%86%E7%BA%A6%E6%9D%9F%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf) 此处因个人喜所以仅使用下图中 IO Constranins 方法来约束引脚： ![floor_planner_ioconstrain](./../../tang primer 20k/examples/assets/led_assets/floor_planner_ioconstrain.png) 根据[核心板原理图](https://dl.sipeed.com/fileList/TANG/Primer_20K/02_Schematic/)，我们可以知道晶振所输入的引脚为 PIN04。 <img src \"./../assets/led/nano_20k_crystal_port.png\" alt \"nano_20k_crystal_port\" width 45%> 结合原理图上 LED 所连接的引脚，这里只对 LED0 进行操作 ![nano_20k_led_port](./../assets/led/nano_20k_led_port.png) 因此对于在 FloorPlanner 交互窗口下面的 IO Constranins 中将 PORT（端口）与 Location（引脚） 分别填入下面的值： ![nano_20k_io_constrain_value](./../assets/led/nano_20k_io_constrain_value.png) 输入完毕后快捷键 Ctrl + S 来保存一下引脚约束，然后接可以关闭 FloorPlanner 的交互图形界面了。 接着发现在工程项目里面多出来刚刚创建的 cst 文件了，里面的内容也比较好理解。 ![nano_20k_cst_content](./../assets/led/nano_20k_cst_content.png) ### 布局布线 完成约束后就要开始运行布局布线了，目的是为了把综合所生成的网表与我们自己定义的约束来通过 IDE 算出最优解然后将资源合理地分配在 FPGA 芯片上。 双击下图红框处的 Place&Route 就开始运行了。 ![nano_20k_place_route](./../assets/led/nano_20k_place_route.png)。 紧接着没有报错，全部通过。就可以开始进行烧录了。 ## 烧录固件 Tang Nano 20K 板卡上搭载了 BL616 芯片，用来烧录 FPGA 固件到板卡中。 在 [安装IDE](https://wiki.sipeed.com/hardware/zh/tang/Tang Nano Doc/get_started/install the ide.html) 的时候已经安装了驱动。因此我们将板子与电脑连接起来就行。 ![nano_20k_led_connect_debug](./../assets/led/nano_20k_led_connect_debug.png) ### 扫描设备 双击下图中的下载程序(Program Device) 来运行 Programmer 软件 ![open_programmer](./../../tang primer 20k/examples/assets/led_assets/open_programmer.png) 然后在打开的页面中点击一下 scan_device 来扫描到我们的设备。 ![nano_20k_scan_device](./../assets/led/nano_20k_scan_device.png) 点击 OK 后就可以接下来对 FPGA 进行操作了。 烧录相关的文档可以参考 [SUG502 1.3_Gowin_Programmer用户指南.pdf](http://cdn.gowinsemi.com.cn/SUG502 1.3_Gowin_Programmer%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf) ### 下载到 SRAM 一般来说这个模式是以用来快速验证所生成的固件是否满足自己目的的。 因为其烧录快的特性所以使用的较多，然是当然断电会丢失数据，所以如果想上电运行程序的话是不能选这个的。 点击 Operation 下面的功能框来打开设备设置界面，接着在 Operation 框中选择 SRAM Program 选项来设置为下载到 SRAM ，最后点击下面的那三个点点框来选择我们所生成的 .fs 下载固件。通常来说下载固件生成与工程文件目录下的 impl > pnr 目录下。 ![sram_mode](./../assets/led/nano_20K_sram_mode.png) 接着来点击红框处开始进行烧录 ![nano_20k_sram_download](./../assets/led/nano_20k_sram_download.png) 有问题的话可以前往 [常见问题](https://wiki.sipeed.com/hardware/zh/tang/Tang Nano Doc/questions.html) 自行排查。 到这里就下载完成了。 ### 下载到 Flash 上面说过下载到 SRAM 是为了快速验证，但是不能上电运行程序。 所以想要上电运行的话我们需要设置下载到 Flash。 和上面下载到 SRAM 的步骤几乎类似，先点开 Operation 下面的功能框来打开设备设置界面，接着在 Operation 框中选择 External Flash Mode 选项来设置为下载到外部 Flash ，最后点击下面的那三个点点框来选择我们所生成的 .fs 下载固件，通常来说下载固件生成与工程文件目录下的 impl > pnr 目录下。最后在下面的外部 Flash 选项中选择设备为 Generic Flash 。 ![nano_20k_flash_mode](./../assets/led/nano_20k_flash_mode.png) 接着来点击红框处开始进行烧录 ![nano_20k_flash_download](./../assets/led/nano_20k_flash_download.png) 然后我们的程序重新上电也能照样运行了。 ## 代码结果 如图所示，只有一个灯在闪。 ![nano_20k_led_blink](./../assets/led/nano_20k_led_blink.gif) ## 结语 到这里我们就已经完成了 FPGA 的 “Hello world” 了。以后的示例工程不会再叙述新建文件等操作了。 ## 阻塞赋值与非阻塞赋值区别 以下内容搬运自 `大猪蹄子` （有改动）： 编写一段简单的代码，对它进行简单的仿真： ```v module test( input CLK, input [3:0] A, output reg [3:0] B,C,D,E ); always@(posedge CLK) begin B < A; C < B; D A; E D; end endmodule ``` ![simulation_result](./../../tang primer 20k/examples/assets/led_assets/simulation_result.png) 根据仿真结果我们可以看出阻塞和非阻塞赋值的差别。这里对比 `B` `C` `D` `E` 四种结果。`< ` 叫做非阻塞赋值，同一个 `always` 中的 `< ` 会同时执行。这就造成了绿框内的情况：`B` 直接被赋予 `A` 的值同时 `C` 被赋予 `B` 的值。由于这两步是同时进行的，就导致 `C` 被赋予的值是 `B` 的旧值，也就造成了图中所示，`C` 的数据变化时钟要慢 `B` 一个时钟周期。再说阻塞赋值 ` `，也就是说同一个 `always` 中上一个 ` ` 语句执行完才会执行下一个 ` ` 语句。在这个代码中，上一个语句 `D` 已经被赋予了 `A` 的值，才执行把 `D` 的值赋给 `E`，所以 `D` 、`E` 的值在仿真中始终保持一致。 > 不过一般来说，不建议在时序逻辑中使用阻塞赋值 ` `。 也得出了额外两个结论： 第一，输入的数据不是完全有效，以时钟边沿时刻的输入数据为准。`posedge` 就是以上升沿执行，`negedge` 就是以下降沿执行。如果数据维持的时间小于一个时钟周期，就很有可能采集不到（如红框所示）。 第二、每次触发特定时钟边沿，对应的 `always` 块就会从头到尾执行一次代码（如绿框所示），而不是从中间某处执行。 ## 常见问题 前往 [Gowin 板卡常见问题查看](./../../Tang Nano Doc/questions.html)"},"/hardware/en/tang/Tang-primer/Tang-primer.html":{"title":"Tang Primer board","content":" title: Tang Primer board date: 2022 05 17 draft: false > Sold out ## The Tang Primer at a Glance ![Tang Primer at a Glance](./../../../zh/tang/assets/material.png \"Tang Primer at a Glance\") Tang Primer uses Anlogic's EG4S20 as the core unit, **20K logic unit (LUT4/LUT5 hybrid architecture), approximately 130KB SRAM, built in 32bit bit width 64MBit SDRAM, rich LVDS pin, built in 12 bit 1MSPS ADC** This provides unlimited possibilities for Tang Primer: ## Tang Primer features + FPC40P socket, can be connected to RGB LCD, VGA adapter board, high speed DAC module. + FPC24P socket, can be connected to DVP camera, high speed ADC module. + Resistive touch screen controller for I2C interface, used with RGB LCD. + 3 channel DCDC power supply chip, stable and efficient power supply, independent adjustment of Bank0 IO level. + FPGA configuration Flash, 8Mbit User Flash, nor/nand optional. + Onboard FPGA JTAG Download Debugger. + Onboard RGB LED + The adjacent pins LVDS are drawn in the same length, and 8 GCLKs are taken out, and 8 ADCs are all taken out. + The double row pin spacing is 900 mils and is compatible with breadboard development. + The half hole leads to an additional 40 IO and the entire board leads to 130+ IO. ## Pinouts Pinout for **New** Tang Primer Board. ![Tang Primer at a Glance](./../../../zh/tang/assets/Lichee tang_NewIoMap.png \"Tang Primer at a Glance\") Pinout for **Old** Tang Primer Board. ![Tang Primer at a Glance](./../../../zh/tang/assets/E203_pin.png \"Tang Primer at a Glance\") ## Resources #### Attachments: + [EG4S20_DataSheet_V1.5_english.pdf](https://github.com/kprasadvnsi/tang doc/releases/download/1.0.0/EG4S20_DataSheet_V1.5_english.pdf) + [Eagle_DataSheet_V2.8_english.pdf](https://github.com/kprasadvnsi/tang doc/releases/download/1.0.0/Eagle_DataSheet_V2.8_english.pdf) + [LicheeTang RV.pdf](https://github.com/kprasadvnsi/tang doc/releases/download/1.0.0/LicheeTang+RV.pdf) + [sipeed tang primer pins.pdf](https://github.com/kprasadvnsi/tang doc/releases/download/1.0.0/sipeed tang primer pins.pdf) + Schematic of Lichee Tang [Click me](https://dl.sipeed.com/shareURL/TANG/Primer/HDK) and choose `LicheeTang_RV(Schematic).pdf` Besides, its development enviroument IDE TD(Tang Dynasty) can be downloaded from following sites [Click me](https://eyun.baidu.com/enterprise/home#share/path %2F%E6%B7%B1%E5%9C%B3%E7%9F%BD%E9%80%9F%E7%A7%91%E6%8A%80%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8%2F%E4%B8%8B%E8%BD%BD%E7%AB%99%E6%96%87%E4%BB%B6%2FTANG%2FPrimer%2FIDE&owner_uk 1227825567&oper 2&share 1&info 1) [https://dl.sipeed.com/shareURL/TANG/Primer/IDE](https://dl.sipeed.com/shareURL/TANG/Primer/IDE)"},"/hardware/en/tang/Tang-primer/Tang-primer-summary.html":{"title":"Tang Primer","content":"# Tang Primer Tang Primer series FPGA is a larger capacity board designed by Sipeed. <table> <thead> <tr> <th>Tang primer 20K</th> <th>Tang primer （Sold Out）</th> </tr> </thead> <tr> <td><a href \"./../tang primer 20k/primer 20k.html\"><img src \"./../tang primer 20k/assets/primer_20k.png\" width 320></a></td> <td><a href \"./Tang primer.html\"><img src \"./../../../assets/Tang/permier/Tang_permier.jpg\" width 320></a></td> </tr> </table>"},"/hardware/en/tang/Tang-primer/fpga/led.html":{"title":"Light LED","content":"# Light LED Get source code: https://github.com/Lichee Pi/Tang_FPGA_Examples/tree/master/0.LED Verilog code: ```verilog module led ( input wire CLK_IN, //时钟输入，24MHz input wire RST_N, //复位按键输入，低有效 output wire [2:0]RGB_LED //RGB led输出 ); parameter time1 24’d24_000_000;//晶振为24Mhz，这里表示计数一秒 reg [2:0]rledout; reg [23:0] count; reg [1:0]shift_cnt; initial begin count 24’b0; rledout 3’b1; shift_cnt 2’b0; end always @(posedge CLK_IN)begin if(RST_N 0)begin //复位按键按下就清空计数并清空输出 count < 24’b0; rledout < 3’b1; shift_cnt < 2’b0; end if(count time1) //计数时间到 begin count< 24’d0; //清空计数值 if(shift_cnt 2’b10)begin //移位3次 rledout < 3’b1; shift_cnt < 2’b0; end else begin rledout < {rledout[1:0],1’b0}; //led输出移位 shift_cnt < shift_cnt + 1’b1; end end else count < count + 1’b1; //计数累加 end assign RGB_LED rledout; endmodule ``` Saving this into project and run place&route to generate bit file to download into board. Then you will see the flow light."},"/hardware/en/tang/Tang-primer/get_started/install_TD_win.html":{"title":"Install on Windows","content":"# Install on Windows > Edit on 2022.05.17 ## Install TD We can download TD install package and get its license from [Download station](https://dl.sipeed.com/shareURL/TANG). This may take a really long time to download. But we need it to development tang primer Install package ：`TD_5.0.4_27252_Win7_64bit_NL.msi` License file：`Anlogic_20230606.lic` Double click the Install package to install this software, and rename the license file Anlogic_20230606.lic as Anlogic.lic, then move the license file to the TD5.0.27252\\license folder in the installed path. Then we can run TD ## Install the USB serial port Connect Tang Primer with computer and open device manager to see device information. It may be named WinUsb Device or USB JTAG Cable duo to different Windows verison. Make sure USB VID:PID is 0547:1002 Windows7 without installing driver ![no_driver](./../../../../zh/tang/assets/get_started/no_driver.png) Windows10 without installing driver ![no_driver_win10](./../../../../zh/tang/assets/get_started/no_driver_win10.png) ### Install driver on windows7 Double WinUsb Device and choose 更新驱动程序(P) ![update_drive1](./../../../../zh/tang/assets/get_started/update_driver1.png) ![update_drive2](./../../../../zh/tang/assets/get_started/update_driver2.png) Select the driver directory where the TD installed. Click 确定 to install the driver. ![choosefolder](./../../../../zh/tang/assets/get_started/choosefolder.png) After succeed installing,we can see this in device manager ![installsuccess](./../../../../zh/tang/assets/get_started/installsuccess.png) ### Install driver on windows10 > Before installing the driver itself, make sure you disable driver signature enforcement first, otherwise Windows 10 won’t allow you to install the unsigned driver from Anlogic. Double click on USB JTAG Cable to select update driver ![update_drive1](./../../../../zh/tang/assets/get_started/update_driver1_win10.png) ![update_drive2](./../../../../zh/tang/assets/get_started/update_driver2_win10.png) Browse the folder and select the driver\\win8_10_64 directory under the TD installation directory. Click OK. Then click on Let me pick from a list of available drivers on my computer. ![choosefolder](./../../../../zh/tang/assets/get_started/choosefolder_win10.png) Click on Have Disk..., then select the directory you selected in the last step, then click OK. ![install_from_disk_win10](./../../../../zh/tang/assets/get_started/install_from_disk_win10.png) The installation is successful and can be seen in the device manager. ![installsuccess](./../../../../zh/tang/assets/get_started/installsuccess.png) ## Check if device detected by Tang Dynasty IDE Click on Download button as shown in following image. ![](./../../../../zh/tang/assets/get_started/87078310026779781.jpg) Plugin Tang Primer into your computer and click Refresh buttion on Download Dialog box. ![](./../../../../zh/tang/assets/get_started/1823555291194601.jpg) Congratulations, you have setup the TD driver on Windows."},"/hardware/en/tang/Tang-primer/get_started/install_linux.html":{"title":"INSTALL TD on Linux","content":"# INSTALL TD on Linux ## Install TD We can download TD install package and get its license from [Download station](https://dl.sipeed.com/shareURL/TANG). This may take a really long time to download. But we need it to development tang primer IDE File name : `TD_5.0.3_28716_NL_Linux.zip` License file：`Anlogic_20230606.lic` After finising downloading, new a terminal and cd into where we extract `TD_5.0.3_28716_NL_Linux.zip ` and rename the license file Anlogic_20230606.lic to Anlogic.lic, then move the license file to the TD5.0.28716\\license folder in the extract path. ```bash cd <Application path > ``` The /opt directory is reserved for all software and add on packages that are not installed by default in Linux system, so we new a dirctionary for TD. ```bash sudo mkdir /opt/TD_DECEMBER2018 ``` Extract TD into /opt/TD_DECEMBER2018 dirctionary ```bash sudo tar xvf TD_5.0.3_28716_NL_Linux.zip d /opt/TD_DECEMBER2018/ ``` ## Check for default linux driver Plug in Tang Primer into your computer and execute lsusb to see the information. Make sure USB VID:PID is 0547:1002 as shown in image below ![](./../../../../zh/tang/Tang primer/get_started/assets/USB_VID.jpg) ## Create a new udev rule file Set udev rules to enable Tang Primer to be accessed by the plugdev group Execute the following command in terminal to create a new udev rules file. ```bash sudo nano /etc/udev/rules.d/91 anlogic jtag.rules ``` Copy the following code into text editor and save it, as shown in following image. ``` SUBSYSTEMS \"usb\", ATTRS{idVendor} \"0547\", ATTRS{idProduct} \"1002\", \\ GROUP \"plugdev\", \\ MODE \"0660\" ``` Execute the following command in terminal to restart the udev service. ```bash sudo service udev restart ``` ## Check if device detected by Tang Dynasty IDE Go to <TD installation directory>/bin/ and execute the following command to open TD IDE in GUI mode. ```bash ./td gui ``` Plugin Tang Primer into your computer and hit Refresh buttion on Download Dialog box. ![](./../../../../zh/tang/Tang primer/get_started/assets/td_linux_gui.jpg) Plugin Tang Primer into your computer and hit Refresh buttion on Download Dialog box. ![](./../../../../zh/tang/Tang primer/get_started/assets/refresh.jpg) > Due to some unknown bug, JTAG only works with 400kbps or lower speed."},"/hardware/en/tang/Tang-primer/get_started/E203.html":{"title":"","content":"# Updating"},"/hardware/en/tang/Tang-primer/get_started/fpga_download.html":{"title":"","content":"# Updating"},"/hardware/en/tang/tang-primer-20k/examples/led.html":{"title":"Tang Primer 20K Dock Blink Led","content":" title: Tang Primer 20K Dock Blink Led tags: Tang Primer 20K Dock，start keywords: Primer, Tang, Dock， start，20K desc: Tang Primer 20K Dock start update: date: 2022 12 28 version: v0.1 author: wonder content: Init file To know a programming language, we start with `hello world`. But in hardware development, we start by blinking a led. ## Install IDE Visit [install IDE](https://wiki.sipeed.com/hardware/en/tang/Tang Nano Doc/install the ide.html) to prepare the development environment. For linux user we suggest using [openfpgaLoader](https://wiki.sipeed.com/hardware/zh/tang/Tang Nano Doc/get_started/flash_in_linux.html) to burn the firmware into fpga. ## New Project New Project：File >NEW >FPGA Dsign Project >OK <img src \"./../../Tang Nano 1K/assets/LED 1.png\" width 58% alt \"new_project\"> Set Project Name and path, Project Name and project path should be English. ![project_path](./../../../../zh/tang/tang primer 20k/examples/assets/led_assets/project_path.png) Select Device we choose GW2A LV18PG256C8/I7, use filter like below to help us choose device more easy. Note that the Device is GW2A 18C. ![device_choose](./../../../../zh/tang/tang primer 20k/examples/assets/led_assets/device_choose.png) Then click OK to preview the project. After confirming no error, the project is created. ## New file Gowin IDE contains 3 ways to create file. Here we use shortcut keys `Ctrl + N` to new a file. The other 2 ways to new file are not mentioned here, In the pop up windows, we choose `Verilog File`, you can also choose `VHDL File` if you are good at it. Here we just use Verilog as example. <img src \"./../../../../zh/tang/tang primer 20k/examples/assets/led_assets/new_verilog_file.png\" width 50% alt \"new_verilog_file\"> Then click OK to set the file name, here we take `led` as the verilog file name as example. <img src \"./../../../../zh/tang/tang primer 20k/examples/assets/led_assets/file_name.png\" width 75% alt \"file_name\"> Up to now we have finished creating file, then we need to prepare our code. ![created_file](./../../../../zh/tang/tang primer 20k/examples/assets/led_assets/created_file.png) ### Verilog introduction Verilog is a kind of Hardware Description Language(HDL), it's used to describe digital circuits. The basic unit in Verilog is module. A module is composed of two parts: one describes the interface, and the other describes the internal logic function, that is, defines how the input affects the output. A module is like this: ```v module module_name #(parameter) (port) ; function endmodule ``` The module starts from module and ends by endmodule. The module is followed by the module name (module_name), transitable variable parameters (parameter), port and direction declaration (port), followed by internal logic function description (function), and finally, endmodule is used to represent this module. The internal logic function is usually composed by the assign and always blocks; The assign statement describes logical circuit, and the always block is used to describe timing circuit. ### Blocking and Non blocking assignments In timing logic, there are two assignment symbols: ` ` and `< `. Note that `< ` means less than or equal to in the if statement, and is not an assignment symbol in the if statement. Visit the [difference between Blocking and Non blocking assignments](#difference between blocking and non blocking assignments) ### Think storm Before coding, we need to think our purpose: The led flashes every 0.5S. Then we draw a demand block diagram as follows: ![block_method](./lite/assets/block_method.png) Then we need a counter to time of every 0.5S, LED flashes means IO flip. ![count_block](./lite/assets/time_count.png) Put the thought diagram into practical use, then it will look like this: ![clock_time_count](./lite/assets/clock_time_count.png) The Clock is the clock source, providing the accurate time for the time counter. ### Code description From the verilog introduction and think storm diagram above, we can see the module we will create contains 2 ports: ```v module led( input Clock, output IO_voltage ); endmodule ``` For time counter inside module, crystal oscillator on the Primer 20K core board is 27MHZ, so we have 27 million times rising edges per second, and we just need to count 13500000 times rising edges to get 0.5 seconds. The counter starts from `0`, and to count 13500000 times rising edges, we count to 13499999. When counted to 0.5S, we set a flag to inform LED IO to flip its voltage. The overall count code is as follows: ```v //parameter Clock_frequency 27_000_000; // Crystal oscillator frequency is 27Mhz parameter count_value 13_499_999; // The number of times needed to time 0.5S reg [23:0] count_value_reg ; // counter_value reg count_value_flag; // IO chaneg flag always @(posedge Clock) begin if ( count_value_reg < count_value ) begin //not count to 0.5S count_value_reg < count_value_reg + 1'b1; // Continue counting count_value_flag < 1'b0 ; // No flip flag end else begin //Count to 0.5S count_value_reg < 23'b0; // Clear counter,prepare for next time counting. count_value_flag < 1'b1 ; // Flip flag end end ``` The code to change IO voltage are as follows: ```v reg IO_voltage_reg 1'b0; // Initial state always @(posedge Clock) begin if ( count_value_flag ) // Flip flag IO_voltage_reg < ~IO_voltage_reg; // IO voltage filp else // No flip flag IO_voltage_reg < IO_voltage_reg; // IO voltage constant end ``` Combined with the codes above, it goes like this: ```v module led( input Clock, output IO_voltage ); /********** Counter **********/ //parameter Clock_frequency 27_000_000; // Crystal oscillator frequency is 27Mhz parameter count_value 13_499_999; // The number of times needed to time 0.5S reg [23:0] count_value_reg ; // counter_value reg count_value_flag; // IO chaneg flag always @(posedge Clock) begin if ( count_value_reg < count_value ) begin //not count to 0.5S count_value_reg < count_value_reg + 1'b1; // Continue counting count_value_flag < 1'b0 ; // No flip flag end else begin //Count to 0.5S count_value_reg < 23'b0; // Clear counter,prepare for next time counting. count_value_flag < 1'b1 ; // Flip flag end end /********** IO voltage flip **********/ reg IO_voltage_reg 1'b0; // Initial state always @(posedge Clock) begin if ( count_value_flag ) // Flip flag IO_voltage_reg < ~IO_voltage_reg; // IO voltage filp else // No flip flag IO_voltage_reg < IO_voltage_reg; // IO voltage constant end /***** Add an extra line of code *****/ assign IO_voltage IO_voltage_reg; endmodule ``` Because the `IO_voltage` is declared in the port position, which is wire type by default. To connect it to the reg variable `IO_voltage_reg`, we need to use assign. ## Synthesize, constrain, place&route ### Synthesize After finishing the code, go to the \"Process\" interface and double click \"Synthesize\" to synthesize our code to convert the verilog code content to netlist. ![Synthesize](./../../../../../../news/others/20k_lite_start/assets/synthesize.png) ### Constraint After Synthesizing our code, we need to set constrains to bind the ports defined in our code to fpga pins, by which we can realize our module function on fpga. Click the FloorPlanner in the top of Synthesize to set constrains. ![floorplanner](./../../../../zh/tang/tang primer 20k/examples/assets/led_assets/floorplanner.png) Since this is the first time we create it, the following dialog box will pop up. Click OK and the graphical constraint interface will pop up. ![create_constrain_file](./../../../../zh/tang/tang primer 20k/examples/assets/led_assets/create_constrain_file.png) ![floorplanner_intreface](./../../../../zh/tang/tang primer 20k/examples/assets/led_assets/floorplanner_interface.png) The ways to constraint the file can be get from this docs: [SUG935 1.3E_Gowin Design Physical Constraints User Guide.pdf](https://dl.sipeed.com/fileList/TANG/Nano%209K/6_Chip_Manual/EN/General%20Guide/SUG935 1.3E_Gowin%20Design%20Physical%20Constraints%20User%20Guide.pdf) Here we only use the IO Constranins method shown below to constrain the pins: ![floor_planner_ioconstrain](./../../../../zh/tang/tang primer 20k/examples/assets/led_assets/floor_planner_ioconstrain.png) According to [Schematic of core board](https://dl.sipeed.com/shareURL/TANG/Primer_20K/02_Schematic), we can know the input pin of crystal oscillator is H11。 <img src \"./../../../../zh/tang/tang primer 20k/examples/assets/led_assets/crystal_port.png\" alt \"crystal_port\" width 45%> Taking into consideration the IO screen printing on the ext_board, we decide to use the L14 pin on the ext_board for flashing. ![led_port](./../../../../zh/tang/tang primer 20k/examples/assets/led_assets/led_port.png) So for the IO Constranins under the FloorPlanner interactive window, we fill in the following values for PORT and Location: ![io_constrain_value](./../../../../zh/tang/tang primer 20k/examples/assets/led_assets/io_constrain_value.png) Finishing filling, use `Ctrl + S` to save constraints file, then close FloorPlanner interactive graphical interface. Then we see there is a .cst file in our project, and its content are easy to understand. ![cst_content](./../../../../zh/tang/tang primer 20k/examples/assets/led_assets/cst_content.png) ### Place & Route After finishing constrainting, we run Place & Route. The purpose is to synthesize the generated netlist and our defined constraints to calculate the optimal solution through IDE, then allocate resources reasonably on the FPGA chip. Couble click Place&Route marked with red box to run. ![place_route](./../../../../zh/tang/tang primer 20k/examples/assets/led_assets/place_route.png)。 Then there is no error, everything works well, we can burn our fpga. ## Burn bitstream There is onboard programmer for downloading bitstream, and drivers have been installed when [install IDE](https://wiki.sipeed.com/hardware/en/tang/Tang Nano Doc/install the ide.html), we connect dock ext board with computer. ![connected](./../../../../zh/tang/tang primer 20k/examples/assets/led_assets/connected.png) ### Scan device Make sure you have enabled the core board first, put the 1 switch on the dip switch down. ![Enable_core_board](./../../../../zh/tang/tang primer 20k/examples/assets/start/switch_1_on.png) Double click `Program Device` to run Programmer application ![open_programmer](./../../../../zh/tang/tang primer 20k/examples/assets/led_assets/open_programmer.png) Click scan_device to scan device ![scan_device](./../../../../zh/tang/tang primer 20k/examples/assets/led_assets/scan_device.png) Click OK to burn device. ### Burn to SRAM Normally this mode is used to verify biststream. Because of its fast burning characteristics so the use of more, but of course the power will lose data, so if you want to power on the running program you can't choose this mode. Click the function box below Operation to open the device configuration interface, then select the SRAM Mode option in Access Mode to set to download to SRAM, and finally click the three dots box below to select our generated `.fs` bitstream file . Generally speaking, bitstream firmware file is in the impl > pnr directory. ![sram_mode](./../../../../zh/tang/tang primer 20k/examples/assets/led_assets/sram_mode.png) Click where the red box is to burn firmware. ![sram_download](./../../../../zh/tang/tang primer 20k/examples/assets/led_assets/sram_download.png) Go to [Questions](https://wiki.sipeed.com/hardware/en/tang/Tang Nano Doc/questions.html) if you have any trouble。 Here we finished downloading into SRAM。 ### Burn into Flash Burnning into sram is used for verifying biststream, but can't store program. If we want to run application at startup, we need to burn into flash. This steps are similar to the steps above of burnning to SRAM. Click the function box below Operation to open the device configuration interface, then select the External Flash Mode in the Access Mode to burn into external Flash. Finally click the three dots below to select the.fs we generated to download the firmware. Choose the three dots box below to select our generated `.fs` bitstream file. Generally speaking, bitstream firmware file is in the impl > pnr directory. Finally, select the Generic Flash device from the following external Flash options. ![flash_mode](./../../../../../../../news/others/20k_lite_start/assets/flash_mode.png) Click where the red box is to burn firmware. ![flash_download](./../../../../../../../news/others/20k_lite_start/assets/flash_download.png) Then we can run our program when power on. ### Result One led flashes like below. ![led_blink](./../../../../zh/tang/tang primer 20k/examples/assets/led_assets/led_blink.gif) ## End Up to now we have finished blinking led on fpga, and know how to use GOWIN IDE with fpga.。 ## Difference between Blocking and Non blocking assignments Write a simple codes and simulate it: ```v module test( input CLK, input [3:0] A, output reg [3:0] B,C,D,E ); always@(posedge CLK) begin B < A; C < B; D A; E D; end endmodule ``` ![simulation_result](./../../../../zh/tang/tang primer 20k/examples/assets/led_assets/simulation_result.png) According to the simulation results, we can see the difference between blocking and non blocking assignments by comparing the `B` `C` `D` `E` four results. `< ` is non blocking assignments, and all `< ` in a `always` run at the same time, this lead the result in green box, `B` is assigned the value of `A` while `C` is assigned the value of `B`, this happens at the same time, so `C` is assigned the old value of `B`, the value of `C` is one clock delay of `B`. ` ` is blocking assignments, all ` ` in a `always` runs sequentially. In this code, `D` is assigned the value of `A`, then `D` is assigned the value of `E`, so `D` and `E` are the same value. > In general, however, blocking assignment is not recommended in timing logic. And we get two results: Input data is not always valid, it depends on the clock edge. If the data is maintained for less than one clock cycle, it may regard useless data. Everytime Triggerring the edge clock, the `always` block runs from begin to the end, not runs from the middle. ## Questions ### No Cable found Check if there are two converters in device manager, reinstall programmer driver if there are no two converters in device manager. ![converter](./../../Tang Nano Doc/assets/questions/usb_converter.png) ### No gowin device found Make sure you have enabled the core board. ### Other questions Visit [Gowin errors to solve this problem](./../../Tang Nano Doc/questions.html)"},"/hardware/en/tang/tang-primer-20k/examples/lite/blink.html":{"title":"Primer 20K Lite blink led","content":" title: Primer 20K Lite blink led keywords: Primer 20K, Lite, FPGA desc: Primer 20K start tags: FPGA, Primer 20K update: date: 2022 10 18 version: v0.1 author: wonder content: First time edit Let's blink a led after getting the Tang Primer 20K Lite suits. ## Preread This document is writen for guiding user start preparing GOWIN development enviroment and use the Tang Primer 20K. The default firmware function in the Core board is as followings: All IO port routed to pin 2.54mm pad toggles regularly, including spi_lcd connector ports and sd_card connector ports on Core Board DDR test; Test result print_out by serial port connector on Core Board and we can use serial tool in computer to see Because of the DDR test function, Core Board will be very hot. you can erase the firmware in the Core Board if you mind this. And default firmware project can be found here: [github](https://github.com/sipeed/TangPrimer 20K example/tree/main/Lite bottom%20test%20project/test_board) ## Install IDE Visit [Install IDE](./../../../Tang Nano Doc/install the ide.html) to prepare the enviroment for this FPGA. For Linux users, if it's difficult to run Programmer application to burn firmware into fpga, please visit [OpenFpgaloader](https://wiki.sipeed.com/hardware/en/tang/Tang Nano Doc/flash in linux.html) to see how to use it. ## New Project New Project：File >NEW >FPGA Dsign Project >OK <img src \"./../../../Tang Nano 1K/assets/LED 1.png\" width 35% alt \"new_project\"> Set Project Name and path, Project Name and project path should be English. ![project_path](./../../../../../../../news/others/20k_lite_start/assets/project_path.png) Select Device we choose GW2A LV18PG256C8/I7, use filter like below to help us choose device more easily. Note that the Device is GW2A 18C. ![device_choose](./../../../../../../../news/others/20k_lite_start/assets/device_choose.png) Then click OK to preview the project. After confirming no error, the project is created. ## New file Gowin IDE contains 3 ways to create file. Here we use shortcut keys `Ctrl + N` to new a file. The other 2 ways to new file are not mentioned here, In the pop up windows, we choose `Verilog File`, you can also choose `VHDL File` if you are good at it. Here we just use Verilog as an example. <img src \"./../../../../../../../news/others/20k_lite_start/assets/new_verilog_file.png\" width 50% alt \"new_verilog_file\"> Then click OK to set the file name, here we take `led` as the verilog file name as example. <img src \"./../../../../../../../news/others/20k_lite_start/assets/file_name.png\" width 75% alt \"file_name\"> Up to now we have finished creating file, then we need to prepare our code. ![created_file](./../../../../../../../news/others/20k_lite_start/assets/created_file.png) ### Verilog introduction Verilog is a kind of Hardware Description Language(HDL), it's used to describe digital circuits. The basic unit in Verilog is module. A module is composed of two parts: one describes the interface, and the other describes the internal logic function, that is, defines how the input affects the output. A module is like this: ```v module module_name #(parameter) (port) ; function endmodule ``` The module starts from module and ends by endmodule. The module is followed by the module name (module_name), transitable variable parameters (parameter), port and direction declaration (port), followed by internal logic function description (function), and finally, endmodule is used to represent this module. The internal logic function is usually composed by the assign and always blocks; The assign statement describes logical circuit, and the always block is used to describe timing circuit. ### Think storm Before coding, we need to think our purpose: The led flashes every 0.5S. Then we draw a demand block diagram as follows: ![block_method](./assets/block_method.png) Then we need a counter to time of every 0.5S, LED flashes means IO flip. ![count_block](./assets/time_count.png) Put the thought diagram into practical use, then it will look like this: ![clock_time_count](./assets/clock_time_count.png) The Clock is the clock source, providing the accurate time for the time counter. ### Code description From the verilog introduction and think storm diagram above, we can see the module we will create contains 2 ports: ```v module led( input Clock, output IO_voltage ); endmodule ``` For time counter inside module, crystal oscillator on the Primer 20K core board is 27MHZ, so we have 27 million times rising edges per second, and we just need to count 13500000 times rising edges to get 0.5 seconds. The counter starts from `0`, and to count 13500000 times rising edges, we count to 13499999. When counted to 0.5S, we set a flag to inform LED IO to flip its voltage. The overall count code is as follows: ```v //parameter Clock_frequency 27_000_000; // Crystal oscillator frequency is 27Mhz parameter count_value 13_499_999; // The number of times needed to time 0.5S reg [23:0] count_value_reg ; // counter_value reg count_value_flag; // IO chaneg flag always @(posedge Clock) begin if ( count_value_reg < count_value ) begin //not count to 0.5S count_value_reg < count_value_reg + 1'b1; // Continue counting count_value_flag < 1'b0 ; // No flip flag end else begin //Count to 0.5S count_value_reg < 23'b0; // Clear counter,prepare for next time counting. count_value_flag < 1'b1 ; // Flip flag end end ``` The code to change IO voltage are as follows: ```v reg IO_voltage_reg 1'b0; // Initial state always @(posedge Clock) begin if ( count_value_flag ) // Flip flag IO_voltage_reg < ~IO_voltage_reg; // IO voltage filp else // No flip flag IO_voltage_reg < IO_voltage_reg; // IO voltage constant end ``` Combined with the codes above, it goes like this: ```v module led( input Clock, output IO_voltage ); /********** Counter **********/ //parameter Clock_frequency 27_000_000; // Crystal oscillator frequency is 27Mhz parameter count_value 13_499_999; // The number of times needed to time 0.5S reg [23:0] count_value_reg ; // counter_value reg count_value_flag; // IO chaneg flag always @(posedge Clock) begin if ( count_value_reg < count_value ) begin //not count to 0.5S count_value_reg < count_value_reg + 1'b1; // Continue counting count_value_flag < 1'b0 ; // No flip flag end else begin //Count to 0.5S count_value_reg < 23'b0; // Clear counter,prepare for next time counting. count_value_flag < 1'b1 ; // Flip flag end end /********** IO voltage flip **********/ reg IO_voltage_reg 1'b0; // Initial state always @(posedge Clock) begin if ( count_value_flag ) // Flip flag IO_voltage_reg < ~IO_voltage_reg; // IO voltage filp else // No flip flag IO_voltage_reg < IO_voltage_reg; // IO voltage constant end /***** Add an extra line of code *****/ assign IO_voltage IO_voltage_reg; endmodule ``` Because the `IO_voltage` is declared in the port position, which is wire type by default. To connect it to the reg variable `IO_voltage_reg`, we need to use assign. ## Synthesize, constrain, place&route ### Synthesize After finishing the code, go to the \"Process\" interface and double click \"Synthesize\" to synthesize our code to convert the verilog code content to netlist. ![Synthesize](./../../../../../../../news/others/20k_lite_start/assets/synthesize.png) ### Constraint After Synthesizing our code, we need to set constrains to bind the ports defined in our code to fpga pins, by which we can realize our module function on fpga. Click the FloorPlanner in the top of Synthesize to set constrains. ![FloorPlanner](./../../../../../../../news/others/20k_lite_start/assets/floorplanner.png) Since this is the first time we create it, the following dialog box will pop up. Click OK and the graphical constraint interface will pop up. ![create_constrain_file](./../../../../../../../news/others/20k_lite_start/assets/create_constrain_file.png) ![floorplanner_intreface](./../../../../../../../news/others/20k_lite_start/assets/floorplanner_interface.png) The ways to constraint the file can be get from this docs: [SUG935 1.3E_Gowin Design Physical Constraints User Guide.pdf](https://dl.sipeed.com/fileList/TANG/Nano%209K/6_Chip_Manual/EN/General%20Guide/SUG935 1.3E_Gowin%20Design%20Physical%20Constraints%20User%20Guide.pdf) Here we only use the IO Constranins method shown below to constrain the pins: ![floor_planner_ioconstrain](./../../../../../../../news/others/20k_lite_start/assets/floor_planner_ioconstrain.png) According to [Schematic of core board](https://dl.sipeed.com/shareURL/TANG/Primer_20K/02_Schematic), we can know the input pin of crystal oscillator is H11。 <img src \"./../../../../../../../news/others/20k_lite_start/assets/crystal_port.png\" alt \"crystal_port\" width 45%> Taking into consideration the IO screen printing on the ext_board, we decide to use the L14 pin on the ext_board for flashing. ![l14_port](./../../../../../../../news/others/20k_lite_start/assets/l14_port.png) So for the IO Constranins under the FloorPlanner interactive window, we fill in the following values for PORT and Location: ![io_constrain_value](./../../../../../../../news/others/20k_lite_start/assets/io_constrain_value.png) Finishing filling, use `Ctrl + S` to save constraints file, then close FloorPlanner interactive graphical interface. Then we see there is a .cst file in our project, and its content are easy to understand. ![cst_content](./../../../../../../../news/others/20k_lite_start/assets/cst_content.png) ### Place & Route After finishing constrainting, we run Place & Route. The purpose is to synthesize the generated netlist and our defined constraints to calculate the optimal solution through IDE, then allocate resources reasonably on the FPGA chip. Couble click Place&Route marked with red box to run. ![place_route](./../../../../../../../news/others/20k_lite_start/assets/place_route.png)。 Then there is no error, everything works well, we can burn our fpga. ## Burn bitstream It's suggested use this programmer application [Click me](https://dl.sipeed.com/shareURL/TANG/programmer) ro burn fpga. ### Connection comment The JTAG pin orders can be found in the back of 20K core board. <table> <tr> <td>Core Board</td> <td>5V0</td> <td>TMS</td> <td>TDO</td> <td>TCK</td> <td>TDI</td> <td>RX</td> <td>TX</td> <td>GND</td> </tr> <tr> <td>Debugger</td> <td>5V0</td> <td>TMS</td> <td>TDO</td> <td>TCK</td> <td>TDI</td> <td>TX</td> <td>RX</td> <td>GND</td> </tr> </table> ![cable_connect](./../../../../../../../news/others/20k_lite_start/assets/cable_connect.png) ### Scan Device Click `Program Device` twice to run Programmer application. ![open_programmer](./../../../../../../../news/others/20k_lite_start/assets/open_programmer.png) Click scan_device marked by red box to scan our device. ![scan_device](./../../../../../../../news/others/20k_lite_start/assets/scan_device.png) Click OK to burn fpga. ### Burn to SRAM Normally this mode is used to verify biststream. Because of its fast burning characteristics so the use of more, but of course the power will lose data, so if you want to power on the running program you can't choose this mode. Click the function box below Operation to open the device configuration interface, then select the SRAM Mode option in Access Mode to set to download to SRAM, and finally click the three dots box below to select our generated `.fs` bitstream file . Generally speaking, bitstream firmware file is in the impl > pnr directory. ![sram_mode](./../../../../../../../news/others/20k_lite_start/assets/sram_mode.png) Click where the red box is to burn firmware. ![sram_download](./../../../../../../../news/others/20k_lite_start/assets/sram_download.png) Go to [Questions](https://wiki.sipeed.com/hardware/en/tang/Tang Nano Doc/questions.html) if you have any trouble。 Here we finished downloading into SRAM。 ### Burn into Flash Burnning into sram is used for verifying biststream, but can't store program. If we want to run application at startup, we need to burn into flash. This steps are similar to the steps above of burnning to SRAM. Click the function box below Operation to open the device configuration interface, then select the External Flash Mode in the Access Mode to burn into external Flash. Finally click the three dots below to select the.fs we generated to download the firmware. Choose the three dots box below to select our generated `.fs` bitstream file. Generally speaking, bitstream firmware file is in the impl > pnr directory. Finally, select the Generic Flash device from the following external Flash options. ![flash_mode](./../../../../../../../news/others/20k_lite_start/assets/flash_mode.png) Click where the red box is to burn firmware. ![flash_download](./../../../../../../../news/others/20k_lite_start/assets/flash_download.png) Then we can run our program when power on. ### Result After using PMOD designed by Sipeed，one led flashes like below. ![result](./../../../../../../../news/others/20k_lite_start/assets/result.gif) ## Question Go to [Questions](https://wiki.sipeed.com/hardware/en/tang/Tang Nano Doc/questions.html) if you have any trouble。"},"/hardware/en/tang/tang-primer-20k/start.html":{"title":"Tang Primer 20K","content":" title: Tang Primer 20K keywords: FPGA, Primer, Tang, 20K update: date: 2022 11 08 version: v0.1 author: wonder content: Init docs Ongoing editing. We have 2 ext board for Tang Primer 20K, the Dock and the Lite. Here I will tell the start of them ## Dock ext board ### Matters need attention Here are matters need attention, to avoid spending much time dealing with trouble and fail at last. #### Enable Core Board For 20K Dock kits, it's necessary to enable the core board before using debugger debug the chip, just put the 1 switch on the dip switch down, otherwise LED0 and LED1 are on and core board dose not work. Enable Core Board Disable state Additional comments <img src \"./../../../zh/tang/tang primer 20k/assets/start/switch_1_on.png\" alt \"switch_1_on\" width 100%><img src \"./../../../zh/tang/tang primer 20k/assets/start/reset_led_on.png\" alt \"reset_led_on\" width 100%> When disabled, the LDE0 and LED1 is on, and core board doesn't work. #### Device not work We have inserted the Core Board into Dock ext board before delivery, but sometimes we need remove the Core board for some reasons, and after reinserting the Core Board into Dock ext board, they don't work. The correct connection steps is to insert the Core board into the ext board at an Angle roughly as shown in the left figure below. Make sure that the Core board inserted diagonally from above is in uniform contact with the ext board, which can be judged by the degree of uniformity of the exposed gold finger. <img src \"./../../../zh/tang/tang primer 20k/assets/start/edge_view.png\" alt \"edge_view\" width 45%> <img src \"./../../../zh/tang/tang primer 20k/assets/start/top_view.png\" alt \"top_view\" width 35%> Then gently press the tilted end, you can hear a sound of the Core board being fixed by the ext board slot. If you find it difficult to press the tilted end, you can try to polish both sides of the Core board slightly to eliminate the size error caused by the production process. <img src \"./../../../zh/tang/tang primer 20k/assets/start/clean_core_board.png\" alt \"clean_core_board\" width 20%> Just polish the two sides of the red box in the figure above to reduce the difficulty of inserting. #### Hardware version introduction For Dock ext board, we can know the version of our board from the mark in the following picture. ![version](./../../../zh/tang/tang primer 20k/assets/start/dock version.png) From the figure we can know the version of this board is V3708. Here are their errors. ##### V3708 LED2 and LED3 are marked wrong, thay should be： Name Correct mask Wrong mask LED2 N16 B14 LED3 N14 N16 ### Start to use For Dock ext board, the following things can be done with default firmware. Press key S0, reset the RGB screen, camera, HDMI signal. And LED3, LED4, LED5 are on. Press key S0 to key S5, the state of LED0, lED1, LED2 changes. Connect OV5640 camera and 4.3 inch RGB screen with Dock ext board (Make sure power is off while connecting), the screen display the picture captured by camera. If the screen displays not well, try to press key S0, this will synchronize the camera picture and screen content. ### Start coding [Blink a led](./examples/led.html) ### Questions Visit [Questions](./../Tang Nano Doc/questions.html) for more solvements ## Lite ext board ### Hardware version introduction For Lite ext board，we can know the version of our board from the mark in the following picture. ![lite version](./../../../zh/tang/tang primer 20k/assets/start/lite version.png) From the figure we can know the version of this board is 3710. Here are their errors. #### 3710 The mask between R8 and P9 is P8. Refer to the left top of the right picture. <div> <img src \"./../../../zh/tang/tang primer 20k/assets/lite up.png\" alt \"lite up\" width 45%> <img src \"./../../../zh/tang/tang primer 20k/assets/lite back.png\" alt \"lite back\" width 45%> </div> ### Start coding [点一个灯](https://wiki.sipeed.com/news/others/20k_lite_start/20k_lite_start.html) ### Questions Visit [Questions](./../Tang Nano Doc/questions.html) for more solvements"},"/hardware/en/tang/tang-primer-20k/primer-20k.html":{"title":"Tang Primer 20K","content":" title: Tang Primer 20K keywords: FPGA, Primer, Tang, 20K update: date: 2022 08 25 version: v0.1 author: wonder content: Init docs ## Introduction Tang Primer 20K is a core board with DDR3 sodimm shape based on [GW2A LV18PG256C8/I7](https://www.gowinsemi.com/en/product/detail/38/) as the main chip, with 2 ext boards are prepared, the Dock and the Lite. <div> <img src \"./assets/20k_front.png\" width 45%> <img src \"./assets/20k_back.png\" width 45%> </div> Buy it: [Aliexpress](https://www.aliexpress.com/item/1005004653308809.html) ## Parameters <table> \t<thead> \t\t<tr> \t\t\t<th style \"text align:center\">Item</th> \t\t\t<th style \"text align:center\">Parameter</th> \t\t\t<th style \"text align:center\">Addition</th> \t\t</tr> \t</thead> \t<tbody> \t\t<tr> \t\t\t<td style \"text align:left\">FPGA Chip</td> \t\t\t<td style \"text align:left\"><a href \"https://www.gowinsemi.com/en/product/detail/38/\">GW2A LV18PG256C8/I7</a> \t\t\t</td> \t\t\t<td style \"text align:left\"> \t\t\t\t<table> \t\t\t\t\t<tr> \t\t\t\t\t\t<td>Logic units(LUT4)</td> \t\t\t\t\t\t<td>20736</td> \t\t\t\t\t</tr> \t\t\t\t\t<tr> \t\t\t\t\t\t<td>Flip Flop(FF)</td> \t\t\t\t\t\t<td>15552</td> \t\t\t\t\t</tr> \t\t\t\t\t<tr> \t\t\t\t\t\t<td>Shadow SRAM S SRAM(bits)</td> \t\t\t\t\t\t<td>41472</td> \t\t\t\t\t</tr> \t\t\t\t\t<tr> \t\t\t\t\t\t<td>Block SRAM B SRAM(bits)</td> \t\t\t\t\t\t<td>828K</td> \t\t\t\t\t</tr> \t\t\t\t\t<tr> \t\t\t\t\t\t<td>Number of B SRAM</td> \t\t\t\t\t\t<td>46</td> \t\t\t\t\t</tr> \t\t\t\t\t<tr> \t\t\t\t\t\t<td>18x18 Multiplier</td> \t\t\t\t\t\t<td>48</td> \t\t\t\t\t</tr> \t\t\t\t\t<tr> \t\t\t\t\t\t<td>PLLs</td> \t\t\t\t\t\t<td>4</td> \t\t\t\t\t</tr> \t\t\t\t\t<tr> \t\t\t\t\t\t<td>I/O Bank</td> \t\t\t\t\t\t<td>8</td> \t\t\t\t\t</tr> \t\t\t\t</table> \t\t\t</td> \t\t</tr> \t\t<tr> \t\t\t<td style \"text align:left\">Memory</td> \t\t\t<td style \"text align:left\">128M DDR3</td> \t\t\t<td style \"text align:left\">13Row x 10Col x 8banks x 16bits</td> \t\t</tr> \t\t<tr> \t\t\t<td style \"text align:left\">Flash</td> \t\t\t<td style \"text align:left\">32Mbits NOR Flash</td> \t\t\t<td style \"text align:left\">W25Q32JVS</td> \t\t</tr> \t\t<tr> \t\t\t<td style \"text align:left\">Debugger</td> \t\t\t<td style \"text align:left\">Jtag + Uart</td> \t\t\t<td style \"text align:left\">JST SH1.0 8Pins connector</td> \t\t</tr> \t\t<tr> \t\t\t<td style \"text align:left\">SD card slot</td> \t\t\t<td style \"text align:left\">1</td> \t\t\t<td style \"text align:left\">Push pull type</td> \t\t</tr> \t\t<tr> \t\t\t<td style \"text align:left\">Display</td> \t\t\t<td style \"text align:left\">8Pins spi lcd connector</td> \t\t\t<td style \"text align:left\"></td> \t\t</tr> \t\t<tr> \t\t\t<td style \"text align:left\">Package</td> \t\t\t<td style \"text align:left\">204P DDR3</td> \t\t\t<td style \"text align:left\"></td> \t\t</tr> \t\t<tr> \t\t\t<td style \"text align:left\">Avaliable IO</td> \t\t\t<td style \"text align:left\">117</td> \t\t\t<td style \"text align:left\"></td> \t\t</tr> \t</tbody> </table> ## Comparison between ext board ### Dock ext board appearance The corresponding pins numbering of LED2 and LED3 is N16 and N14. See the mark on left of the right picture. <div> <img src \"./../../../zh/tang/tang primer 20k/assets/dock up.png\" alt \"dock up\" width 45%> <img src \"./../../../zh/tang/tang primer 20k/assets/dock back.png\" alt \"dock back\" width 45%> </div> ### Lite ext board appearance The corresponding pin numbering between R8 and P9 is P8. See the mark on the top left of the right picture. <div> <img src \"./../../../zh/tang/tang primer 20k/assets/lite up.png\" alt \"lite up\" width 45%> <img src \"./../../../zh/tang/tang primer 20k/assets/lite back.png\" alt \"lite back\" width 45%> </div> ### Comparison between peripherals of ext board <table> \t<thead> \t\t<tr> \t\t\t<th rowspan \"2\" colspan \"2\">Item</th> \t\t\t<th colspan \"2\">Dock</th> \t\t\t<th colspan \"1\">Lite</th> \t\t</tr> \t\t<tr> \t\t\t<th>Number</th> \t\t\t<th>Addition</th> \t\t\t<th>Number</th> \t\t</tr> \t</thead> \t<body> \t\t<tr> \t\t\t<td colspan \"2\">RGB Interface</td> \t\t\t<td>1</td> \t\t\t<td>RGB565 40P FPC Connector</td> \t\t\t<td></td> \t\t</tr> \t\t<tr> \t\t\t<td colspan \"2\">DVP Interface</td> \t\t\t<td>1</td> \t\t\t<td>24P FPC Connector</td> \t\t\t<td></td> \t\t</tr> \t\t<tr> \t\t\t<td colspan \"2\">Mic array Interface</td> \t\t\t<td>1</td> \t\t\t<td>10P FPC Connector</td> \t\t\t<td></td> \t\t</tr> \t\t<tr> \t\t\t<td colspan \"2\">Touch Interface</td> \t\t\t<td>1</td> \t\t\t<td>4P FPC Connector</td> \t\t\t<td></td> \t\t</tr> \t\t<tr> \t\t\t<td colspan \"2\">PMOD Interface</td> \t\t\t<td>4</td> \t\t\t<td></td> \t\t\t<td>4</td> \t\t</tr> \t\t<tr> \t\t\t<td colspan \"2\">3.5mm headphone Jack</td> \t\t\t<td>1</td> \t\t\t<td>LPA4809MSF driver</td> \t\t\t<td></td> \t\t</tr> \t\t<tr> \t\t\t<td colspan \"2\">DIP switch</td> \t\t\t<td>1</td> \t\t\t<td>5P DIP switch</td> \t\t\t<td></td> \t\t</tr> \t\t<tr> \t\t\t<td colspan \"2\">Slide switch</td> \t\t\t<td>1</td> \t\t\t<td>Switch USB function</td> \t\t\t<td>2</td> \t\t</tr> \t\t<tr> \t\t\t<td style \"white space:nowrap\" rowspan \"2\">Type C</td> \t\t\t<td style \"white space:nowrap\">USB JTAG&UART</td> \t\t\t<td>1</td> \t\t\t<td>Onboard BL702 used to download bitstream file and provide serial communication</td> \t\t\t<td></td> \t\t</tr> \t\t<tr> \t\t\t<td style \"white space:nowrap\">User defined USB</td> \t\t\t<td>1</td> \t\t\t<td>USB3317 with Slide switch to change USB Interface function</td> \t\t\t<td></td> \t\t</tr> \t\t<tr> \t\t\t<td colspan \"2\">Wireless antenna</td> \t\t\t<td>1</td> \t\t\t<td>BL702 wireless function</td> \t\t\t<td></td> \t\t</tr> \t\t<tr> \t\t\t<td colspan \"2\">Key</td> \t\t\t<td>6</td> \t\t\t<td>One used for burning BL702,<br>five for Users</td> \t\t\t<td>2</td> \t\t</tr> \t\t<tr> \t\t\t<td colspan \"2\">LED</td> \t\t\t<td>6</td> \t\t\t<td></td> \t\t\t<td></td> \t\t</tr> \t\t<tr> \t\t\t<td colspan \"2\">HDMI Interface</td> \t\t\t<td>1</td> \t\t\t<td></td> \t\t\t<td></td> \t\t</tr> \t\t<tr> \t\t\t<td colspan \"2\">Ethernet Interface</td> \t\t\t<td>1</td> \t\t\t<td>TL8201F</td> \t\t\t<td></td> \t\t</tr> \t\t<tr> \t\t\t<td colspan \"2\">RGB LED</td> \t\t\t<td>1</td> \t\t\t<td>WS2812</td> \t\t\t<td></td> \t\t</tr> \t</body> </table> ## Hardware information [Datasheet](https://dl.sipeed.com/shareURL/TANG/Primer_20K/01_Specification) [Schematic](https://dl.sipeed.com/shareURL/TANG/Primer_20K/02_Schematic) [Bit map](https://dl.sipeed.com/shareURL/TANG/Primer_20K/03_Bit_number_map) [Net Length](https://dl.sipeed.com/shareURL/TANG/Primer_20K/04_Net_Length) [Dimension](https://dl.sipeed.com/shareURL/TANG/Primer_20K/05_Dimensional_drawing) [Core board package](https://dl.sipeed.com/shareURL/TANG/Primer_20K/06_Footprint) (KICAD) [Chip manual](https://dl.sipeed.com/shareURL/TANG/Primer_20K/07_Chip_manual) [3D model](https://dl.sipeed.com/shareURL/TANG/Primer_20K/08_Dimensions) ## User guide `Install IDE` > `Learn coding programmer` > `Read Tutorial` > `Program by yourself` > `Read more official documents` 1. Install IDE: [Click me](./../Tang Nano Doc/install the ide.html). 2. Visit [Start to use](https://wiki.sipeed.com/hardware/en/tang/tang primer 20k/start.html) to avoid some problems, and we can start coding for FPGA there. 3. After coding for FPGA, if you think it difficult, here we collect some useful learning resource. + Online FPGA tutorial: [Verilog](https://www.asic world.com/verilog/index.html) + Online Verilog exercise：[HDLBits](https://hdlbits.01xz.net/wiki/Main_Page) \tIf you have trouble using IDE, we have packed all documents about IDE, visit [Download station](https://dl.sipeed.com/shareURL/TANG/Primer_20K/07_Chip_manual/EN/General%20Guide) and download what you need. ## Reference examples summary ### Examples github ：https://github.com/sipeed/TangPrimer 20K example ### Tutorial Lite ext board blink ：[Click me](./examples/lite/blink.html) <! Dock ext board examples summary : [Click me](./example.html) > Dock ext board blink : [Click me](./examples/led.html) ## Communication **Reddit** : [reddit.com/r/GowinFPGA/](reddit.com/r/GowinFPGA/) **Telegram** : [t.me/sipeed](t.me/sipeed) Leave message in the end of this page Business email : [support@sipeed.com](support@sipeed.com) ## Additional message The default bank voltage of bank 0、bank 1、bank 7 on the core board is 3.3V, so their bank IO voltage is 3.3V output. If you want to custom the input IO bank voltage, please remove R5 and R9, see Assembly [Click me](https://dl.sipeed.com/shareURL/TANG/Primer_20K/03_Bit_number_map) to see where is R5 and R9. ![io_vltage](./../../../zh/tang/tang primer 20k/assets/io_vltage.png) And the corresponding golden finger on core board are as following: ![sodimm_voltage](./../../../zh/tang/tang primer 20k/assets/sodimm_voltage.png) ## Questions ### Dock ext board not work For 20K Dock kits, it's necessary to enable the core board before using debugger debug the chip, just put the 1 switch on the dip switch down, otherwise LED0 and LED1 are on and core board dose not work. Enable Core Board Disable state Additional comments <img src \"./../../../zh/tang/tang primer 20k/assets/start/switch_1_on.png\" alt \"switch_1_on\" width 100%><img src \"./../../../zh/tang/tang primer 20k/assets/start/reset_led_on.png\" alt \"reset_led_on\" width 100%> When disabled, the LDE0 and LED1 is on, and core board doesn't work. ### How to burn into flash Do following configurations: <img src \"./../../../zh/tang/tang primer 20k/assets/flash_mode.png\" alt \"flash_mode\" width 75%> ### No reaction after burning or phenomenon is wrong Make sure you hace selected right device, and all parameters are the same as following. <img src \"./../../../zh/tang/tang primer 20k/assets/device_choose.png\" alt \"device_choose\" width 75%> Then make sure your code logic is right and your ### Successfully burned once, but can't burn after that Note that the description is there was a successful Flash burnt one time. In this case, the default reason is that the wrong Dual Purpose pin is enabled and the debugger can no longer scan the FPGA's JTAG. You can short pin 1 and pin 4 of Flash, by which the chip cannot read FLASH normally when it is powered on. ![flash_cs](./../../../zh/tang/tang primer 20k/assets/flash_cs.png) Besides, if you have dock ext board, this can be solved by the enable pin of dip switch. Here art the steps Firstlt, enable the core board, put the 1 switch on the dip switch down, then do something (like burnning fpga or erasing FPGA) in Programmer application, when the progress bar shows, switch the 1 switch on the dip switch up and down, after which you will find the progress bar works and finish your operations on fpga. <table> \t<tr> \t\t<td><img src \"./assets/start/switch_1_on.png\" alt \"switch_1_on\"></td> \t\t<td> Enable the core board first </td> \t</tr> \t<tr> \t\t<td><img src \"./assets/start/progress_bar.jpg\" alt \"progress_bar\"></td> \t\t<td> Do operation on board, when progress bar shows, switch the 1 switch on the dip switch up and down</td> \t</tr> \t<tr> \t\t<td> \t\t<img src \"./assets/start/switch_1_off.jpg\" alt \"switch_1_off\" witdh \"25%\"> \t\t<img src \"./assets/start/switch_1_on.png\" alt \"switch_1_on\" witdh \"25%\"> \t\t</td> \t\t<td> put the 1 switch on the dip switch up and down </td> \t</tr> \t<tr> \t\t<td><img src \"./assets/start/progress_bar_running.jpg\" alt \"progress_bar_running\"><img src \"./assets/start/progress_bar_finishing.jpg\" alt \"progress_bar_finishing\"></td> \t\t<td> Progress bar works and finish your operations on fpga </td> \t</tr> </table> ### Visit [Questions](./../Tang Nano Doc/questions.html) for more"},"/hardware/en/tang/tang-primer-20k/example.html":{"title":"Tang Primer 20K examples tutorial","content":" title: Tang Primer 20K examples tutorial keywords: Tang Primer 20K ,example, guide update: date: 2022 10 17 version: v0.1 author: wonder content: Determine directory > All examples articles and github are continuing building, thanks for your unserstanding. ## LED Dock ext board contains 6 LEDs, we can do many things by them. Combined logic operation: [Assign led on] <! (./examples/assign_led.md)（The guide of IDE，necessary read） > [Key_led_on] <! (./examples/key_led_on.md) (The guide of following documents，necessary read) > [Xor_logic_led_on] <! (./examples/xor_led_on.md) > [Decode_led_on] <! (./examples/decode_led_on.md) > Timing logic operation: [Counter blink led](./examples/led.html) [Flow led] <! (./examples/water_led.md) > Breath_led ## RGB LCD ## SPI LCD ## CAM LCD ## Others HDMI USB example Ethernet"},"/hardware/en/tang/Tang-Nano/examples/led/github_led.html":{"title":"Blink by github project","content":"# Blink by github project First get sourcecode from github https://github.com/sipeed/Tang Nano examples Open led_prj.gprj file in Tang Nano examples\\example_led\\led_prj path Right click clean&Rerun all in process interface ![](./../../../../../zh/tang/Tang Nano/examples/led/assets/github_place&route.png) Then there is an error(This is a historical question, you can search it by yourself if you wonder it) Change configuration which can be found in Project > Configuration > Syntheize of top menu bar and choose GowinSyntheize. Then right click Place&Route and clean&Rerun all ![](./../../../../../zh/tang/Tang Nano/examples/led/assets/Change_Synthesis.png) Connet the board and download firmware. Double click `Program Device` in Process interface to open programmer tool. ![](./../../../../../zh/tang/Tang Nano/examples/led/assets/Open_Programmer.png) Choose download to SRAM to verify codes quickly ![](./../../../../../zh/tang/Tang Nano/examples/led/assets/Success_led.png) <p id \"back\"> <a href \"#\" onClick \"javascript :history.back( 1);\">返回上一页(Back)</a> </p>"},"/hardware/en/tang/Tang-Nano/examples/led/create_led.html":{"title":"Blink led","content":"# Blink led > Edit on 2022.04.18 From this essay we can learn the basic usage of Gowin IDE ## Create project Create Project：File >NEW >FPGA Dsign Project >OK ![](./../../../../../zh/tang/Tang Nano/assets/LED 1.png) Set project name and project path (File name and project path shoule be English) ![](./../../../../../zh/tang/Tang Nano/assets/LED 2.png) Choose correct device: ![Tang_nano_device_choose](./../../../../../zh/tang/Tang Nano/examples/led/assets/Nano_device_choose.png) ## Prepare codes After creating project, we can start editing codes. To creat a new file, we can click where the arrow points to in the picture or use shortcut key Ctrl+N. Then choose Verilog File in the pop up window. ![](./../../../../../zh/tang/Tang Nano/assets/LED 5.png) Name for file (Suggested using English) ![](./../../../../../zh/tang/Tang Nano/assets/LED 6.png) Double click the created file, then edit in right window ![](./../../../../../zh/tang/Tang Nano/assets/LED 7.png) We use light led as an example, copy the following \"LED example codes\" into the created file or edit the created file by yourself. ### Verilog description Here I just introduction some basic grammer which we will use in our code about verilog, for more knowledge please refer to the official verilog grammer. The basic Verilog design unit is module, a module is build from 2 parts, one part describes the ports, another part describes the logic functions which show the relations between ports. Module is like a black box we normally said, we don't care what's inside the module, we only need to instantiate the module according to the input and output format defined by the module, provide input to the module, and let the module work on its own. A module is normally like following: ```v module module_name #(parameter) (port) ; Function description; endmodule ``` The module start with `module` and ends with `endmodule`. After declaring `module` we will declare the `module name`, then we can set `parameter` to make our module change automaticly to meet out depmands. Then `Port` is the singal dealing with this module.`Function description` is a kind of description how we will realize our depmands. There are 2 signal types in a module, wire type and reg type. `Function description` contains `always` and `assign` 2 functions. `assign` function is used for describing combinatorial logic. `alyays` function can be used for describing combinatorial logic, as well as timing logic. ### Example codes ~~~v module led ( input sys_clk, input sys_rst_n, output reg [2:0] led // 110 B, 101 R, 011 G ); reg [23:0] counter; always @(posedge sys_clk or negedge sys_rst_n) begin if (!sys_rst_n) counter < 24'd0; else if (counter < 24'd1199_9999) // 0.5s delay counter < counter + 1'b1; else counter < 24'd0; end always @(posedge sys_clk or negedge sys_rst_n) begin if (!sys_rst_n) led < 3'b110; else if (counter 24'd1199_9999) // 0.5s delay led[2:0] < {led[1:0],led[2]}; else led < led; end endmodule ~~~ ## Synthesize, constrain, place&route ### Synthesize After finishing steps above, go to the \"Process\" interface, synthesize the edited file, which means running \"Synthesize\". ![](./../../../../../zh/tang/Tang Nano 9K/nano_9k/nano_9k_synthsize.png) If the result is the same as shown below ![](./../../../../../zh/tang/Tang Nano/assets/LED.png) It means that there is no bug in our code, we can continue the next steps. If there is some thing wrong, please fix by yourself. ### Constrain Clock constraint is not involved here To realize function of the code on FPGA, we must bind the ports we define with the chip pins. Double click the FloorPlanner in the Process interface to set pin constrain(This can be continued if failing Synthesize). ![](./../../../../../zh/tang/assets/examples/led_pjt_2.png) First time open FloorPlanner it will prompt lack of \".cst\" file, we just choose ok. ![](./../../../../../zh/tang/Tang Nano/assets/LED 9.png) The led schematic of nano is as shown below: ![](./../../../../../zh/tang/Tang Nano/examples/led/assets/nano_led_pins.png) In this GUI interface we have two ways to constrain pins: Drag the corresponding port to the pin of chip Type the pin number corresponding to the port in IO constraint(This is shown as below) So we can do the ordered operations in the opened window as what the following picture shows:(Just choose one way) ![](./../../../../../zh/tang/Tang Nano/examples/led/assets/pin_constrain_1.png) ![](./../../../../../zh/tang/Tang Nano/examples/led/assets/pin_constrain_2.png) ### Place&Route After finishing Running \"Place&Route\" in the Process interface window, the result will be as same as below ![](./../../../../../zh/tang/Tang Nano/examples/led/assets/RGB_LED_Place&Route.png) ## Program Then connect the board with computer, download firmware. Double click `Program Device` in Process interface to open programmer application ![](./../../../../../zh/tang/Tang Nano/examples/led/assets//Open_Programmer.png) You can config download mode according to the following picture. We use download to SRAM as an example. ![](./../../../../../zh/tang/Tang Nano/examples/led/assets/tang nano programmer config.png) If you need to store firmware with no power, just choose download to flash mode. ## End Now the tutorial ends, if you have any suggestions, just leave a message."},"/hardware/en/tang/Tang-Nano/examples/led/led.html":{"title":"blink","content":"# blink Edit on 2022.04.18 ## Preface Here we provide two ways to blink led [Blink by yourself](./create_led.html) [Using github project](./github_led.html) <p id \"back\"> <a href \"#\" onClick \"javascript :history.back( 1);\">Previous page(Back)</a> </p>"},"/hardware/en/tang/Tang-Nano/examples/lcd.html":{"title":"Drive RGB screen","content":" title: Drive RGB screen > Edit on 2022.04.18 ## Introduce timing RGB LCD display protocol is similar to VGA protocol, both have horizon synchronization signal line and vertical synchronization signal line. The main difference is that RGB LCD display protocol transfers by digital signal while VGA protocol transfers by analog signal. Here we introduce VGA timing. ![](./../../../../zh/tang/assets/examples/lcd_pjt_1.png) There shows horizon synchronization timing and vertical synchronization timing in the picture above. From the timing picture, we know both display a horizon of data or display a vertical of data, data transfers during the two synchronization signal pulses. Each horizon of data contains back porch, visible data **(this is normally thought as active data)** and front porch. The visible data is resolution we normally think, while the parameter of back porch and front porch depends on the resolution and frame rate. Its typical parameters can be found in this web. http://www.tinyvga.com/vga timing The timing of this 5 inch screen we sell is a bit different, its parameters can be downloaded here. [Detail book](https://dl.sipeed.com/fileList/TANG/Nano%209K/6_Chip_Manual/EN/LCD_Datasheet/5.0inch_LCD_Datashet%20_RGB_.pdf) For other size screen parameters, they can be downloaded here. [Click me](https://dl.sipeed.com/TANG/Nano%209K/6_Chip_Manual/EN/LCD_Datasheet/) The following picture shows the screenshot about this LCD timing. ![](./../../../../zh/tang/assets/examples/lcd_pjt_2.png) ![](./../../../../zh/tang/assets/examples/lcd_pjt_3.png) The first picture form shows parameters of the screen and the the following picture is its timing. From its timing picture, we can know we don't need to set front porch time and back proch time, we just need to set blanking time. ## Create project Please refer to this [article](./led/led.html) to see how to create project. ## Generate screen clock Here we use gowin official IP The crystal oscillator onboard is 24MHz, but our screen needs 33.3MHZ clock, so we need to use the corresponding ip core to generate the corresponding clock. Here we use `IP Core Generate` which can be find in Tools > IP Core Generate ![](./../../../../zh/tang/Tang Nano 1K/assets/Gowin_IP_rpll.png) Double click `rPLL` and select Verilog in the pop up window language, set CLKIN 24MHz, CLKOUTD is 33.00MHz. Also config the tolerance. ![](./../../../../zh/tang/assets/examples/lcd_pjt_5.png) After click OK it asks whether add it to current project, here we choose yes. ![](./../../../../zh/tang/Tang Nano 1K/examples/led/assets/add_ip_file_in_project.png) Then a tmp file will appear, we can use it to generate the ip, like what is shown below. ![](./../../../../zh/tang/Tang Nano/examples/led/assets/ip_examples.png) ## Screen driver **To start this we should create a verilog file first** ### Port definition First define ports which are needed to drive screen ```verilog module VGAMod ( input CLK, input nRST, input PixelClk, output LCD_DE, output LCD_HSYNC, output LCD_VSYNC, \toutput [4:0] LCD_B, \toutput [5:0] LCD_G, \toutput [4:0] LCD_R ); ``` We use RGB565 driver mode. ### Timing constants Then we define the constants according to the timing form picture ```verilog localparam V_BackPorch 16'd6; //0 or 45 localparam V_Pluse \t 16'd5; localparam HightPixel 16'd480; localparam V_FrontPorch 16'd62; //45 or 0 localparam H_BackPorch 16'd182; \t localparam H_Pluse \t 16'd1; localparam WidthPixel 16'd800; localparam H_FrontPorch 16'd210; localparam PixelForHS WidthPixel + H_BackPorch + H_FrontPorch; \t localparam LineForVS HightPixel + V_BackPorch + V_FrontPorch; ``` First we define front porch, back porch and valid pixel data. As for the front porch timing and back porch timing which have been mentioned earlier, it can be combined into an erasing time, that is, one can be set to 0, and the other can be set to the erasing time. Anyway, the front porch timing and back porch timing can be added up to meet the timing requirements in the table is ok. ### Define variables Define some variables helps us to meet timing requirment ```verilog reg [15:0] LineCount; reg [15:0] PixelCount; reg\t[9:0] Data_R; reg\t[9:0] Data_G; reg\t[9:0] Data_B; ``` ### Synchronization signals This code generates synchronization signals. It should be noted that the synchronization signals of this screen enabled by negative polarity ```verilog always @( posedge PixelClk or negedge nRST )begin if( !nRST ) begin LineCount < 16'b0; PixelCount < 16'b0; end else if( PixelCount PixelForHS ) begin PixelCount < 16'b0; LineCount < LineCount + 1'b1; end else if( LineCount LineForVS ) begin LineCount < 16'b0; PixelCount < 16'b0; end else PixelCount < PixelCount + 1'b1; end always @( posedge PixelClk or negedge nRST )begin if( !nRST ) begin \t\t\tData_R < 9'b0; \t\t\tData_G < 9'b0; \t\t\tData_B < 9'b0; end else begin \t\t\tend \tend //Here note the negative polarity of HSYNC and VSYNC assign LCD_HSYNC (( PixelCount > H_Pluse)&&( PixelCount < (PixelForHS H_FrontPorch))) ? 1'b0 : 1'b1; assign LCD_VSYNC ((( LineCount > V_Pluse )&&( LineCount < (LineForVS 0) )) ) ? 1'b0 : 1'b1; ``` ### Enable signal This code decides whether display image. This driver needs a port which is set to 1 when the 800*480 data of the image is valid to enable display. ```verilog assign LCD_DE ( ( PixelCount > H_BackPorch )&& ( PixelCount < PixelForHS H_FrontPorch ) && ( LineCount > V_BackPorch ) && ( LineCount < LineForVS V_FrontPorch 1 )) ? 1'b1 : 1'b0; //It will shake if there not minus one ``` ### Test color bars This code generates color bars to test LCD ```verilog localparam Colorbar_width WidthPixel / 16; assign LCD_R ( PixelCount < ( H_BackPorch + Colorbar_width * 0 )) ? 5'b00000 : ( PixelCount < ( H_BackPorch + Colorbar_width * 1 )) ? 5'b00001 : ( PixelCount < ( H_BackPorch + Colorbar_width * 2 )) ? 5'b00010 : ( PixelCount < ( H_BackPorch + Colorbar_width * 3 )) ? 5'b00100 : ( PixelCount < ( H_BackPorch + Colorbar_width * 4 )) ? 5'b01000 : ( PixelCount < ( H_BackPorch + Colorbar_width * 5 )) ? 5'b10000 : 5'b00000; assign LCD_G ( PixelCount < ( H_BackPorch + Colorbar_width * 6 )) ? 6'b000001: ( PixelCount < ( H_BackPorch + Colorbar_width * 7 )) ? 6'b000010: ( PixelCount < ( H_BackPorch + Colorbar_width * 8 )) ? 6'b000100: ( PixelCount < ( H_BackPorch + Colorbar_width * 9 )) ? 6'b001000: ( PixelCount < ( H_BackPorch + Colorbar_width * 10 )) ? 6'b010000: ( PixelCount < ( H_BackPorch + Colorbar_width * 11 )) ? 6'b100000: 6'b000000; assign LCD_B ( PixelCount < ( H_BackPorch + Colorbar_width * 12 )) ? 5'b00001 : ( PixelCount < ( H_BackPorch + Colorbar_width * 13 )) ? 5'b00010 : ( PixelCount < ( H_BackPorch + Colorbar_width * 14 )) ? 5'b00100 : ( PixelCount < ( H_BackPorch + Colorbar_width * 15 )) ? 5'b01000 : ( PixelCount < ( H_BackPorch + Colorbar_width * 16 )) ? 5'b10000 : 5'b00000; ``` **Do not forget to add endmodule in the end of the driver file** Up to now we have finished the driver module. ## Instantiated in the top **New a verilog file** Just copy the content below and save it is ok ```verilog module TOP //Name TOP module ( \tinput\t\t\tnRST, input XTAL_IN, \toutput\t\t\tLCD_CLK, \toutput\t\t\tLCD_HYNC, \toutput\t\t\tLCD_SYNC, \toutput\t\t\tLCD_DEN, \toutput\t[4:0]\tLCD_R, \toutput\t[5:0]\tLCD_G, \toutput\t[4:0]\tLCD_B ); // list ports \twire\t\tCLK_SYS;\t \twire\t\tCLK_PIX; //instantiate pll Gowin_rPLL chip_pll( .clkout(CLK_SYS), //output clkout //200M .clkoutd(CLK_PIX), //output clkoutd //33.00M .clkin(XTAL_IN) //input clkin );\t \tVGAMod\tVGAMod_inst //instantiate vga driver \t( \t\t.CLK\t\t(\tCLK_SYS ), \t\t.nRST\t\t(\tnRST\t\t), \t\t.PixelClk\t(\tCLK_PIX\t\t), \t\t.LCD_DE\t\t(\tLCD_DEN\t \t), \t\t.LCD_HSYNC\t(\tLCD_HYNC \t), \t.LCD_VSYNC\t(\tLCD_SYNC \t), \t\t.LCD_B\t\t(\tLCD_B\t\t), \t\t.LCD_G\t\t(\tLCD_G\t\t), \t\t.LCD_R\t\t(\tLCD_R\t\t) \t); \tassign\t\tLCD_CLK\t\t \tCLK_PIX; endmodule ``` ## Synthesize, constrain, Place&Route ### Synthesize After finishing steps above, go to the \"Process\" interface, synthesize the edited file, which means running \"Synthesize\". ![](./../../../../zh/tang/Tang Nano 9K/nano_9k/nano_9k_synthsize.png) If the result is the same as shown below ![](./../../../../zh/tang/Tang Nano/assets/LED.png) It means that there is no bug in our code, we can continue the next steps. If there is some thing wrong, please fix by yourself. ### Constrain Here we only constraint pins The corresponding pins and ports are as follows form shows The way to constain pins can refer to the [Light led](./led/create_led.html), it contains two ways to constain pins. If you feel troublesome about the method above, you can copy the content in this [page](./../../../../zh/tang/Tang Nano/examples/lcd_constrains.html)， and paste it in \".cst\" file in this project (If there is no \".cst\" file, just create a \"physicsl constrains file\"). PORT I/O PIN PORT I/O PIN LCD_B[4] output 41 LCD_B[3] output 42 LCD_B[2] output 51 LCD_B[1] output 53 LCD_B[0] output 54 LCD_G[5] output 55 LCD_G[4] output 56 LCD_G[3] output 57 LCD_G[2] output 68 LCD_G[1] output 69 LCD_G[0] output 70 LCD_R[4] output 71 LCD_R[3] output 72 LCD_R[2] output 73 LCD_R[1] output 74 LCD_R[0] output 75 LCD_DEN output 33 LCD_SYNC output 34 LCD_HYNC output 40 LCD_CLK output 35 XTAL_IN input 52 nRST input 4 ### Place&Route After constraining, we need to open IO mux to complete Place&Route. Tick Project > Configuration > Place&Route > Dual Purpose Pin which is in the Menu Bar. ![](./../../../../zh/tang/Tang Nano/examples/led/assets/enable_io_mux.png) Then we can run Place&Route. ## Program Finishing Place&Route, we can download the generated .fs file to the development board to see color bar. ## End Now the tutorial ends, if you have any suggestions, just leave a message. <p id \"back\"> <a href \"#\" onClick \"javascript :history.back( 1);\">Back to the previous page(Back)</a> </p>"},"/hardware/en/tang/Tang-Nano/Nano.html":{"title":"Tang Nano","content":"# Tang Nano > Edit on 2022.03.23 ## Introduction Tang Nano is a core board designed based on [Gowin](https://www.gowinsemi.com/en/) GW1N 1 FPGA chip.The board is equipped with PSRAM, RGB LCD interface and onboard USG JTAG debugger, which make it convinent for users to use. ![](./../../../assets/Tang/Nano/Tang_Nano.jpg) ## Parameters ![Nano](./../../../assets/Tang/Nano/Tang Nano 4.png) **Note** : The Numeric number matches PIN number Numeric number with dot matches gclk pins Items Specs Core GW1N 1 FPGA Logic units(LUT4) 1152 Registers(FF) 864 Block SRAM(bits) 72K B SRAM block 4 User flash(bits) 96K PLL 1 I/O Bank 4 I/O numbers 41 Core quantity 1.2V Usb Jtag ch552 Onboard PSRAM 64Mbits ![Nano Pin](./../../../assets/Tang/Nano/Tang Nano Pin.png) ## Support Email to support@sipeed.com for technical support and Business cooperation. ## Resources [Schematic](https://dl.sipeed.com/shareURL/TANG/Nano/HDK) [Download center](https://dl.sipeed.com/shareURL/TANG/Nano) [Examples](./../Tang Nano Doc/examples.html)"},"/hardware/en/tang/Tang-Nano/Tang-Nano.html":{"title":"Tang Nano examples","content":" title: Tang Nano examples ## Note Before reading, we suggest using this [Programmer](https://dl.sipeed.com/shareURL/TANG/Nano/IDE) named `programmer2.7z` not that installed with IDE ## Examples [Blink](./../Tang Nano Doc/examples/1_led.html)(Preparing, please wait) [LCD screen](./../Tang Nano Doc/examples/2_lcd.html)(Preparing, please wait)"},"/hardware/en/tang/index.html":{"title":"Tang Series Development Board","content":"# Tang Series Development Board Tang Series development boards are devided into Tang Nano series development boardand Tang Primer series development board. ## Product on sale <table> <thead> <tr> <th style \"text align:center\">Tang Primer 20K（Core board）</th> <th style \"text align:center\">Tang Nano 1K</th> </tr> </thead> <tbody> <tr> <td style \"text align:center\"><a href \"./tang primer 20k/primer 20k.html\"><img src \"./../../assets/Tang/primer_20k/primer_20k.png\" alt \"Tang Primer 20K（核心板）\"></a></td> <td style \"text align:center\"><a href \"./Tang Nano 1K/Nano 1K.html\"><img src \"./../../assets/Tang/Nano 1K/1K.png\" alt \"Tang Nano 1K\"></a></td> </tr> </tbody> <thead> <tr> <th style \"text align:center\">Tang Nano 4K</th> <th style \"text align:center\">Tang Nano 9K</th> </tr> </thead> <tbody> <tr> <td style \"text align:center\"><a href \"./Tang Nano 4K/Nano 4K.html\"><img src \"./../../assets/Tang/Nano_4K/Nano_4K.png\" alt \"Tang Nano 4K\"></a></td> <td style \"text align:center\"><a href \"./Tang Nano 9K/Nano 9K.html\"><img src \"./../../assets/Tang/Nano 9K/9K.png\" alt \"Tang Nano 9K\"></a></td> </tr> </tbody> </table> ## Product comparison Item <p style \"white space:nowrap\">Tang Primer 20K</p> <p style \"white space:nowrap\">Tang Nano 9K</p><p style \"white space:nowrap\">Tang Nano 4K</p><p style \"white space:nowrap\">Tang Nano 1K</p> : : : : Logic units(LUT4) 20736 8640 4608 1152 Flip Flop（FF） 15552 6480 3456 864 S SRAM (bits) 41472 17280 B SRAM (bits) 828K x 46 468K x 26 180K x 10 72K x 4 User Flash (bits) 608K 256K 96K PLL) 4 2 2 1 Onboard Flash 32Mbits NOR Flash 32Mbits NOR Flash 32Mbits NOR Flash Pad reserved Hardcore Cortex M3 ## Old product Tang Nano Tang Primer : : : : [![Tang Nano](./../../assets/Tang/Nano/Tang_Nano.jpg)](./Tang Nano/Nano.html) [![Tang Primer](./../../assets/Tang/permier/Tang_permier.jpg)](./Tang primer/Tang primer.html) "},"/hardware/en/tang/Tang-Nano-9K/examples/picorv.html":{"title":"PicoRV on nano 9K","content":"# PicoRV on nano 9K > Edit on 2022.07.13 ## Preface There ia an example about picoRV : [Tang Nano 9K github repository](https://github.com/sipeed/TangNano 9K example/tree/main/picotiny). In this tutorial we just describe how to run the example simply . ## Environment Python [Gowin IDE](./../../Tang Nano Doc/install the ide.html) ## Steps ### Program FPGA Open picotiny project by `picotiny.gprj` file in TangNano 9K example\\picotiny\\project directory Tick `Use MSPI as regular IO` in Project >Configuration >Place&Route >Dual Purpose Pin which can be found in the top menu bar Right click Place&Route which is in Process interface and choose Clean&Rerun All Download the generated .fs file to the Embedded Flash of Nano 9K Then we can use the FPGA like a mcu. ### Download firmware Execute the following command in TangNano 9K example\\picotiny directory ```python python .\\sw\\pico programmer.py .\\example fw flash.v COM13 ``` The COM13 at the end of command line refers to the serial port number of the development board in the system. For example, if it is allocated COM14 in your system, you need change it into COM14. There is a countdown shows ` Waiting for reset ` when you succeed excute the command, in which time it's required to press the S1 button of the development board to complete the programming. The succeed done log is as below: ```powershell \\TangNano 9K example\\picotiny> python .\\sw\\pico programmer.py .\\example fw flash.v COM13 Read program with 11760 bytes Waiting for reset ... Total sectors 3 Total pages 46 Flashing 1 / 3 Flashing 2 / 3 Flashing 3 / 3 Flashing completed ``` Then we can use serial port tools to execute command and use HDMI to display the code interface. ![](./../../../../../zh/tang/Tang Nano 9K/nano_9k/picorv.jpg) ## End Other knowledge like cross compile is not mentioned here, so you should learn to use it by yourself."},"/hardware/en/tang/Tang-Nano-9K/examples/led.html":{"title":"Light LED","content":" title: Light LED > Edit on 2022.07.13 This tutorial will walk you through the basics of the Gowin IDE, which we'll use to create a simple program to flash the onboard LEDs. ## Create Project Create Project：File >NEW >FPGA Dsign Project >OK ![Create Project](./../../../../zh/tang/Tang Nano/assets/LED 1.png) Set project name and project path (File name and project path should be English) ![Set project name](./../../../../zh/tang/Tang Nano/assets/LED 2.png) Choose the correct device: ![Tang_nano_9k_device_choose](./../../../../zh/tang/Tang Nano 9K/nano_9k/Tang_nano_9k_Device_choose.png) ## Prepare the code After creating the project, we can start editing the code. To create a new file, we can either click the marked icon (top left of the window) or use Ctrl+N. Choose Verilog File in the pop up window. ![Create file](./../../../../zh/tang/Tang Nano/assets/LED 5.png) Name the file (it's best to use English for this) ![Name the file](./../../../../zh/tang/Tang Nano/assets/LED 6.png) Double click the created file to open it, then edit it in right window. ![OPen file](./../../../../zh/tang/Tang Nano/assets/LED 7.png) Here's all the code we're using for this example, either copy/paste it into your file or enter it manually. ~~~v module led ( input sys_clk, // clk input input sys_rst_n, // reset input output reg [5:0] led // 6 LEDS pin ); reg [23:0] counter; always @(posedge sys_clk or negedge sys_rst_n) begin if (!sys_rst_n) counter < 24'd0; else if (counter < 24'd1349_9999) // 0.5s delay counter < counter + 1'b1; else counter < 24'd0; end always @(posedge sys_clk or negedge sys_rst_n) begin if (!sys_rst_n) led < 6'b111110; else if (counter 24'd1349_9999) // 0.5s delay led[5:0] < {led[4:0],led[5]}; else led < led; end endmodule ~~~ Once we're done with the code, we need to tick `Use DONE as regular IO` in Project >Configuration >Place&Route >Dual Purpose Pin which can be found in the top menu bar to avoid an error. ![img_configuration](./../../../../zh/tang/Tang Nano 9K/nano_9k/LED_Configuration.png) ## Synthesize, constrain, place&route ### Synthesize After finishing the steps above, go to the \"Process\" interface and double click \"Synthesize\" to synthesize our code. You can also right click \"Synthesize\" to see its other function ![Synthesize](./../../../../zh/tang/Tang Nano 9K/nano_9k/nano_9k_synthsize.png) If the result is the same as shown below, then we can move on to setting our constraints. ![Finish_Synthesize](./../../../../zh/tang/Tang Nano/assets/LED.png) If your synthesis fails, then check the console it should tell you where the error is. ### Constrain > Clock constraint is not involved here For our code to actually do anything, we must bind the ports we defined to the actual pins of the FPGA chip. Double click the FloorPlanner in the Process interface to set pin constraints (If synthesis fails we can't do this step). ![FloorPlanner](./../../../../zh/tang/assets/examples/led_pjt_2.png) The first time we open FloorPlanner it will prompt lack of a \".cst\" file, we'll just click ok. ![cst_file](./../../../../zh/tang/Tang Nano/assets/LED 9.png) You can download the full schematic [here](https://dl.sipeed.com/shareURL/TANG/Nano%209K/2_Schematic). Here is the part of schematic about LEDs on the nano 9k: ![LED_schematic](./../../../../zh/tang/Tang Nano 9K/nano_9k/LED_Pins.png \"nano 9k led pins\") In this GUI interface we have two ways to constrain pins: Drag the corresponding port to the pin of the chip Enter the pin number corresponding to the port in IO constraints Refer to this guide for more information about FloorPlanner : [SUG935 1.3E_Gowin Design Physical Constraints User Guide.pdf](https://dl.sipeed.com/fileList/TANG/Nano%209K/6_Chip_Manual/EN/General%20Guide/SUG935 1.3E_Gowin%20Design%20Physical%20Constraints%20User%20Guide.pdf) Don't forget bind the clock port and reset port to their pins marked in the [schematic](https://dl.sipeed.com/shareURL/TANG/Nano%209K/2_Schematic) The following figure shows the example pin constraint of this project ![constraints](./../../../../zh/tang/Tang Nano 9K/nano_9k/LED_FloorPlanner.png) ### Place&Route > If it shows error2017, make sure you have enabled `Use DONE as regular IO` (see [prepare the code](#Prepare the code)) Double click Place&Route to run it, it will shows as following: ![Finish_place&route](./../../../../zh/tang/Tang Nano 9K/nano_9k/LED_Place&Route.png) ## Download to device Visit [here](https://dl.sipeed.com/shareURL/TANG/programmer/docs) to see docs about programmer if you need. ### Start to download Connect your board to your PC, and select the device as shown in the picture: ![Choose_device](./../../../../zh/tang/Tang Nano 9K/nano_9k/nano_9k_device_scan.png) We'll use download to SRAM as an example. Follow the steps in the figure below to select that operation: ![SRAM_download](./../../../../zh/tang/Tang Nano 9K/nano_9k/nano_9k_sram_program.png \"configure sram download mode\") Click the button shown in the figure to start the firmware download process: ![Verify](./../../../../zh/tang/Tang Nano 9K/nano_9k/nano_9k_sram_download.png \"start sram download\") ### Result Once that's complete, the LEDs start flashing like this： ![Finish](./../../../../zh/tang/Tang Nano 9K/nano_9k/blink.gif) ## Other If you need to store firmware with no power, just change Accsess mode and choose your target .fs file . ![Access_mode](./../../../../zh/tang/Tang Nano 9K/nano_9k/access_mode.png) Visit [Qustions&Answers](./../../Tang Nano Doc/questions.html) if you have trouble ## End You've reached the end of the tutorial. If you have any suggestion, just leave your message."},"/hardware/en/tang/Tang-Nano-9K/examples/rgb_screen.html":{"title":"Drive RGB screen","content":" title: Drive RGB screen > Edit on 2022.04.12 ## Introduce timing RGB LCD display protocol is similar to VGA protocol, both have horizon synchronization signal line and vertical synchronization signal line. The main difference is that RGB LCD display protocol transfers by digital signal while VGA protocol transfers by analog signal. Here we introduce VGA timing. ![](./../../../../zh/tang/assets/examples/lcd_pjt_1.png) There shows horizon synchronization timing and vertical synchronization timing in the picture above. From the timing picture, we know both display a horizon of data or display a vertical of data, data transfers during the two synchronization signal pulses. Each horizon of data contains back porch, visible data **(this is normally thought as active data)** and front porch. The visible data is resolution we normally think, while the parameter of back porch and front porch depends on the resolution and frame rate. Its typical parameters can be found in this web. http://www.tinyvga.com/vga timing The timing of this 5 inch screen we sell is a bit different, its parameters can be downloaded here. [Detail book](https://dl.sipeed.com/fileList/TANG/Nano%209K/6_Chip_Manual/EN/LCD_Datasheet/5.0inch_LCD_Datashet%20_RGB_.pdf) For other size screen parameters, they can be downloaded here. [Click me](https://dl.sipeed.com/TANG/Nano%209K/6_Chip_Manual/EN/LCD_Datasheet/) The following picture shows the screenshot about this LCD timing. ![](./../../../../zh/tang/assets/examples/lcd_pjt_2.png) ![](./../../../../zh/tang/assets/examples/lcd_pjt_3.png) The first picture form shows parameters of the screen and the the following picture is its timing. From its timing picture, we can know we don't need to set front porch time and back proch time, we just need to set blanking time. ## Create project Please refer to this [article](./../led/led.html) to see how to create project. ## Generate screen clock Here we use gowin official IP The crystal oscillator onboard is 27MHz, but our screen needs 33.3MHZ clock, so we need to use the corresponding ip core to generate the corresponding clock. Here we use `IP Core Generate` which can be find in Tools > IP Core Generate ![](./../../../../zh/tang/Tang Nano 1K/assets/Gowin_IP_rpll.png) Double click `rPLL` and select Verilog in the pop up window language, set CLKIN 27MHz, CLKOUT is 33.00MHz. Also config the tolerance. ![](./../../../../zh/tang/Tang Nano 1K/assets/lcd_rpll.png) After click OK it asks whether add it to current project, here we choose yes. ![](./../../../../zh/tang/Tang Nano 1K/examples/led/assets/add_ip_file_in_project.png) Then a tmp file will appear, we can use it to generate the ip, like what is shown below. ![](./../../../../zh/tang/Tang Nano/examples/led/assets/ip_examples.png) ## Screen driver **To start this we should create a verilog file first** ### Port definition First define ports which are needed to drive screen ```verilog module VGAMod ( input CLK, input nRST, input PixelClk, output LCD_DE, output LCD_HSYNC, output LCD_VSYNC, \toutput [4:0] LCD_B, \toutput [5:0] LCD_G, \toutput [4:0] LCD_R ); ``` We use RGB565 driver mode. ### Timing constants Then we define the constants according to the timing form picture ```verilog localparam V_BackPorch 16'd6; //0 or 45 localparam V_Pluse \t 16'd5; localparam HightPixel 16'd480; localparam V_FrontPorch 16'd62; //45 or 0 localparam H_BackPorch 16'd182; \t localparam H_Pluse \t 16'd1; localparam WidthPixel 16'd800; localparam H_FrontPorch 16'd210; localparam PixelForHS WidthPixel + H_BackPorch + H_FrontPorch; \t localparam LineForVS HightPixel + V_BackPorch + V_FrontPorch; ``` First we define front porch, back porch and valid pixel data. As for the front porch timing and back porch timing which have been mentioned earlier, it can be combined into an erasing time, that is, one can be set to 0, and the other can be set to the erasing time. Anyway, the front porch timing and back porch timing can be added up to meet the timing requirements in the table is ok. ### Define variables Define some variables helps us to meet timing requirment ```verilog reg [15:0] LineCount; reg [15:0] PixelCount; reg\t[9:0] Data_R; reg\t[9:0] Data_G; reg\t[9:0] Data_B; ``` ### Synchronization signals This code generates synchronization signals. It should be noted that the synchronization signals of this screen enabled by negative polarity ```verilog always @( posedge PixelClk or negedge nRST )begin if( !nRST ) begin LineCount < 16'b0; PixelCount < 16'b0; end else if( PixelCount PixelForHS ) begin PixelCount < 16'b0; LineCount < LineCount + 1'b1; end else if( LineCount LineForVS ) begin LineCount < 16'b0; PixelCount < 16'b0; end else PixelCount < PixelCount + 1'b1; end always @( posedge PixelClk or negedge nRST )begin if( !nRST ) begin \t\t\tData_R < 9'b0; \t\t\tData_G < 9'b0; \t\t\tData_B < 9'b0; end else begin \t\t\tend \tend //Here note the negative polarity of HSYNC and VSYNC assign LCD_HSYNC (( PixelCount > H_Pluse)&&( PixelCount < (PixelForHS H_FrontPorch))) ? 1'b0 : 1'b1; assign LCD_VSYNC ((( LineCount > V_Pluse )&&( LineCount < (LineForVS 0) )) ) ? 1'b0 : 1'b1; ``` ### Enable signal This code decides whether display image. This driver needs a port which is set to 1 when the 800*480 data of the image is valid to enable display. ```verilog assign LCD_DE ( ( PixelCount > H_BackPorch )&& ( PixelCount < PixelForHS H_FrontPorch ) && ( LineCount > V_BackPorch ) && ( LineCount < LineForVS V_FrontPorch 1 )) ? 1'b1 : 1'b0; //It will shake if there not minus one ``` ### Test color bars This code generate color bars to test LCD ```verilog localparam Colorbar_width WidthPixel / 16; assign LCD_R ( PixelCount < ( H_BackPorch + Colorbar_width * 0 )) ? 5'b00000 : ( PixelCount < ( H_BackPorch + Colorbar_width * 1 )) ? 5'b00001 : ( PixelCount < ( H_BackPorch + Colorbar_width * 2 )) ? 5'b00010 : ( PixelCount < ( H_BackPorch + Colorbar_width * 3 )) ? 5'b00100 : ( PixelCount < ( H_BackPorch + Colorbar_width * 4 )) ? 5'b01000 : ( PixelCount < ( H_BackPorch + Colorbar_width * 5 )) ? 5'b10000 : 5'b00000; assign LCD_G ( PixelCount < ( H_BackPorch + Colorbar_width * 6 )) ? 6'b000001: ( PixelCount < ( H_BackPorch + Colorbar_width * 7 )) ? 6'b000010: ( PixelCount < ( H_BackPorch + Colorbar_width * 8 )) ? 6'b000100: ( PixelCount < ( H_BackPorch + Colorbar_width * 9 )) ? 6'b001000: ( PixelCount < ( H_BackPorch + Colorbar_width * 10 )) ? 6'b010000: ( PixelCount < ( H_BackPorch + Colorbar_width * 11 )) ? 6'b100000: 6'b000000; assign LCD_B ( PixelCount < ( H_BackPorch + Colorbar_width * 12 )) ? 5'b00001 : ( PixelCount < ( H_BackPorch + Colorbar_width * 13 )) ? 5'b00010 : ( PixelCount < ( H_BackPorch + Colorbar_width * 14 )) ? 5'b00100 : ( PixelCount < ( H_BackPorch + Colorbar_width * 15 )) ? 5'b01000 : ( PixelCount < ( H_BackPorch + Colorbar_width * 16 )) ? 5'b10000 : 5'b00000; ``` **Do not forget to add endmodule in the end of the driver file** Up to now we have finished the driver module. ## Instantiated in the top **New a verilog file** Just copy the content below and save it is ok ```verilog module TOP //Name TOP module ( \tinput\t\t\tnRST, input XTAL_IN, \toutput\t\t\tLCD_CLK, \toutput\t\t\tLCD_HYNC, \toutput\t\t\tLCD_SYNC, \toutput\t\t\tLCD_DEN, \toutput\t[4:0]\tLCD_R, \toutput\t[5:0]\tLCD_G, \toutput\t[4:0]\tLCD_B ); // list ports \twire\t\tCLK_SYS;\t \twire\t\tCLK_PIX; //instantiate pll Gowin_rPLL chip_pll( .clkout(CLK_SYS), //output clkout //200M .clkoutd(CLK_PIX), //output clkoutd //33.00M .clkin(XTAL_IN) //input clkin );\t \tVGAMod\tVGAMod_inst //instantiate vga driver \t( \t\t.CLK\t\t(\tCLK_SYS ), \t\t.nRST\t\t(\tnRST\t\t), \t\t.PixelClk\t(\tCLK_PIX\t\t), \t\t.LCD_DE\t\t(\tLCD_DEN\t \t), \t\t.LCD_HSYNC\t(\tLCD_HYNC \t), \t.LCD_VSYNC\t(\tLCD_SYNC \t), \t\t.LCD_B\t\t(\tLCD_B\t\t), \t\t.LCD_G\t\t(\tLCD_G\t\t), \t\t.LCD_R\t\t(\tLCD_R\t\t) \t); \tassign\t\tLCD_CLK\t\t \tCLK_PIX; endmodule ``` ## Synthesize, constrain, Place&Route ### Synthesize After finishing steps above, go to the \"Process\" interface, synthesize the edited file, which means running \"Synthesize\". ![](./../../../../zh/tang/Tang Nano 9K/nano_9k/nano_9k_synthsize.png) If the result is the same as shown below ![](./../../../../zh/tang/Tang Nano/assets/LED.png) It means that there is no bug in our code, we can continue the next steps. If there is some thing wrong, please fix by yourself. ### Constrain Here we only constraint pins The corresponding pins and ports are as follows form shows The way to constain pins can refer to the [Light led](./../led/led.html), it contains a way to constain pins. If you feel troublesome about the method above, you can copy the content in this [page](./../../../../zh/tang/Tang Nano 9K/examples/lcd_constrains.html)， and paste it in \".cst\" file in this project (If there is no \".cst\" file, just create a \"physicsl constrains file\"). PORT I/O PIN PORT I/O PIN LCD_B[4] output 41 LCD_B[3] output 42 LCD_B[2] output 51 LCD_B[1] output 53 LCD_B[0] output 54 LCD_G[5] output 55 LCD_G[4] output 56 LCD_G[3] output 57 LCD_G[2] output 68 LCD_G[1] output 69 LCD_G[0] output 70 LCD_R[4] output 71 LCD_R[3] output 72 LCD_R[2] output 73 LCD_R[1] output 74 LCD_R[0] output 75 LCD_DEN output 33 LCD_SYNC output 34 LCD_HYNC output 40 LCD_CLK output 35 XTAL_IN input 52 nRST input 4 ### Place&Route After constraining, we need to open IO mux to complete Place&Route. Tick Project > Configuration > Place&Route > Dual Purpose Pin which is in the Menu Bar. ![](./../../../../zh/tang/Tang Nano/examples/led/assets/enable_io_mux.png) Then we can run Place&Route. ## Program Finishing Place&Route, we can download the generated .fs file to the development board to see color bar. ## End Now the tutorial ends, if you have any suggestions, just leave a message. <p id \"back\"> <a href \"#\" onClick \"javascript :history.back( 1);\">Back to the previous page</a> </p>"},"/hardware/en/tang/Tang-Nano-9K/examples/spi_lcd.html":{"title":"Spi_lcd","content":"# Spi_lcd Visit https://github.com/sipeed/TangNano 9K example/tree/main/spi_lcd to see this project. The relevant instructions will be shown after well edited. ![spi_lcd](./../../../../zh/tang/Tang Nano 9K/nano_9k/spi_lcd.jpg)"},"/hardware/en/tang/Tang-Nano-9K/Tang-nano-9k.html":{"title":"Tang Nano 9k examples","content":" title: Tang Nano 9k examples Before reading, we suggest using this [Programmer](https://dl.sipeed.com/shareURL/TANG/programmer) not that installed with IDE [Blink](./examples/led.html) [LCD screen](./examples/rgb_screen.html) [Run examples of PicoRV](./examples/picorv.html) litex running on 9K(Preparing, please wait) FPGA drives SPI screen(Preparing, please wait) PicoRV running on 9K(Preparing, please wait) HDMI display(Preparing, please wait) Drive screen by mipi interface(Preparing, please wait) others(Any ideas could be come up, and will be accepted if feasible)"},"/hardware/en/tang/Tang-Nano-9K/Nano-9K.html":{"title":"Tang Nano 9K","content":"# Tang Nano 9K > Edit on 2022.05.13 ## Introduction Tang nano 9K is a development board based on [Gowin](https://www.gowinsemi.com/en/) GW1NR 9 FPGA chip.It equips with HDMI connector, RGB screen interface connector, SPI screen connector, 32Mbit SPI flash and 6 LEDs, so users can use it for FPGA verification, risc v soft core verification and basic function verification easily and quickly. Its 8640 LUT4 logic units can not only be used for various complex logic circuits designing, but also used for running a complete PicoRV soft core. It also meets various needs of users, such as learning FPGA, verifying soft core and further design. ![](./../../../assets/Tang/Nano 9K/9K.png) ## Comparison Tang Nano 9K is the 5th product of Sipeed Tang series. Before purchasing, you can compare and choose from the following table according to your demands: Model Tang Nano 1K Tang Nano 4K Tang Nano 9K : : : : Appearance <img src \"./../../../zh/tang/Tang Nano/assets/clip_image002.gif\" width \"180\" > <img src \"./../../../zh/tang/Tang Nano/assets/clip_image004.gif\" width \"180\" > <img src \"./../../../zh/tang/Tang Nano/assets/clip_image006.gif\" width \"180\" > Logic Units (LUT4) 1152 4608 8640 Hard core processor / Cortex m3 / Crystal oscillator 27MHZ 27MHZ 27MHZ Display interface RGB screen interface HDMI HDMI, <br>RGB screen interface,<br>SPI screen interface Camera / Support OV2640 / External SPI FLASH Reserved pads only 32Mbits SPI flash 32Mbits SPI flash TF card slot / / Yes Debugger Onboard USB JTAG Onboard USB JTAG Onboard USB JTAG & USB UART ## Characteristic This form shows detail specs of Tang Nano 9K Item value Logic units(LUT4) 8640 Registers(FF) 6480 ShadowSRAM SSRAM(bits) 17280 Block SRAM BSRAM(bits) 468K Number of B SRAM 26 User flash(bits) 608K SDR SDRAM(bits) 64M 18 x 18 Multiplier 20 SPI FLASH 32M bit Number of PLL 2 Display interface HDMI interface, SPI screen interface and RGB screen interface Debugger Onboard BL702 chip provides USB JTAG and USB UART functions for GW1NR 9 IO • support 4mA、8mA、16mA、24mA other driving capabilities <br>• Provides independent Bus Keeper, pull up/pull down resistors, and Open Drain output options for each I/O Connector TF card slot, 2x24P 2.54mm Header pads Button 2 programmable buttons for users LED Onboard 6 programmable LEDs ### On board Function block ![Generated](./../../../zh/tang/Tang Nano 9K/assets/clip_image008.jpg) ### Pinmap ![Generated](./../../../zh/tang/Tang Nano 9K/assets/clip_image010.gif) Usage FPGA MCU FPGA+MCU : : : : Language Verilog HDL/Verilog C/C++ Verilog HDL/Verilog ， C/C++ Introduction verify HDL design After flashing the softcore bitstream, <br>this board can be used as a normal microcontroller unit After flashing the softcore bitstream,<br>it can be used as two chips User Beginner，FPGA developer RISC V developers，Cortex M developers Senior engineer ## User guide 1. Download our packaged user guide document : [Click me](https://dl.sipeed.com/shareURL/TANG/Nano%209K/6_Chip_Manual/EN/General%20Guide) (All PDFs mentioned below are here) 2. Install IDE and configure license : [Click me](./../Tang Nano Doc/install the ide.html) 3. Read this file (in the file downloaded in step 1) : [SUG100 2.6E_Gowin Software User Guide.pdf](https://dl.sipeed.com/fileList/TANG/Nano%209K/6_Chip_Manual/EN/General%20Guide/SUG100 2.6E_Gowin%20Software%20User%20Guide.pdf) 4. Read this [tutorial](./examples/led.html) (LEDs lighting experiment). We suggest you recreate a project ang light the led by yourself, this can help you know more about the steps about fpga. We recommended you read the following tips during this process: Verilog code specifications (please search by yourself. It is very necessary to obey good code specifications from beginning) \tThe following documents are very useful for learning FPGA, so we should read them. \t SUG949 1.1E_Gowin HDL Coding User Guide.pdf \t UG286 1.9.1E_Gowin Clock User Guide.pdf \tThe documents mentioned above can be downloaded from our [Download station](https://dl.sipeed.com/shareURL/TANG/Nano%209K/6_Chip_Manual/EN/General%20Guide) \tAnd there has been a compressed package contains all documents Online tutorial: We suggest two excellent learning sites about verilog : [HDLBITs](https://hdlbits.01xz.net/wiki/Main_Page) and [Verilog Page](https://www.asic world.com/verilog/index.html) 5. Read this [tutorial](./examples/rgb_screen.html) (5 inch RGB screen Display tutorial). If you can't complete this experiment, you can download our [9K examples](https://github.com/sipeed/TangNano 9K example) (adapted to 9K + 5 inch screen) to see which step goes wrong. **Note: for screen wiring, pay attention to the 1 pin silk screen next to the connector corresponding to 1 pin of the cable** Documents to read: rPLL IP core reference: Click the menubar Tools>IP Core Generator>Hard Module>CLOCK>rPLL <details> <summary><font color \"#4F84FF\">Click to see reference</font></summary> <img src \"./../../../zh/tang/assets/ip reference.png\"> </details> [SUG284 2.1E_Gowin IP Core Generator User Guide.pdf](https://dl.sipeed.com/fileList/TANG/Nano%209K/6_Chip_Manual/EN/General%20Guide/SUG284 2.1E_Gowin%20IP%20Core%20Generator%20User%20Guide.pdf) (Page 28) [Datasheet of 5inch screen](https://dl.sipeed.com/fileList/TANG/Nano%209K/6_Chip_Manual/EN/LCD_Datasheet/5.0inch_LCD_Datashet%20_RGB_.pdf) 6. Explanation of HDMI display (to be updated) 7. PicoRV soft core test ([Source code](https://github.com/sipeed/TangNano 9K example)) ## Reference examples summary Visit [examples](./../Tang Nano Doc/examples.html) ## Hardware files [All files](https://dl.sipeed.com/shareURL/TANG/Nano%209K/) [Datasheet](https://dl.sipeed.com/shareURL/TANG/Nano%209K/6_Chip_Manual/EN) [Schematic](https://dl.sipeed.com/shareURL/TANG/Nano%209K/2_Schematic) [Bit map](https://dl.sipeed.com/shareURL/TANG/Nano%209K/3_Bit_number_map) [Size](https://dl.sipeed.com/shareURL/TANG/Nano%209K/4_Dimensional_drawing) [3D file](https://dl.sipeed.com/shareURL/TANG/Nano%209K/5_3D_file) [Some manuals](https://dl.sipeed.com/shareURL/TANG/Nano%209K/6_Chip_Manual) ## Attention 1. If you have trouble with this board, you can join our telegram (t.me/sipeed) or contact us on twitter (https://twitter.com/SipeedIO). Leaving message below is also OK. 2. Visit [Tang questions](https://wiki.sipeed.com/hardware/en/tang/Tang Nano Doc/questions.html) first if you have any trouble. 3. DO NOT USE JTAG, MODE0/1 and DONE pins. If you really need to use these pins, please refer to [SUG100 2.6E_Gowin Software User Guide.pdf](https://dl.sipeed.com/fileList/TANG/Nano%209K/6_Chip_Manual/EN/General%20Guide/SUG100 2.6E_Gowin%20Software%20User%20Guide.pdf). 4. Please avoid static electricity hitting PCBA; Please release the static electricity from the hand before contacting PCBA. 5. The working voltage of each GPIO has been marked in the schematic . Please do not let the actual working voltage of GPIO exceed the rated value, because it will cause permanent damage to PCBA. 6. When connecting FPC flexible cable, make sure the cable is completely inserted into the base with on offset. 7. Avoid any liquid or metal touching the pads of components on PCBA during working, because this will cause short circuit and damage PCBA. 8. Pay attention to the multiplexed IO. The HDMI io ports are pulled up, when using these ios which are routed to pin headers, then may not meets your command. ![nano_9k_hdmi_io](./../../../zh/tang/Tang Nano 9K/assets/nano_9k_hdmi_io.png)"},"/hardware/en/tang/Tang-Nano-4K/examples/hdmi.html":{"title":"","content":""},"/hardware/en/tang/Tang-Nano-4K/examples/led.html":{"title":"Blink LED","content":" title: Blink LED > Edit on 2022.04.15 From this essay we can learn the basic usage of Gowin IDE ## Create Project Create Project：File >NEW >FPGA Dsign Project >OK ![](./../../../../zh/tang/Tang Nano/assets/LED 1.png) Set project name and project path (File name and project path shoule be English) ![](./../../../../zh/tang/Tang Nano/assets/LED 2.png) Choose correct device: ![Tang_nano_4k_device_choose](./../../../../zh/tang/Tang Nano 4K/assets/Nano_4K_device_choose.png) The main chip model on some boards is C7/I6, please pay attention to this and choose correct model. ## Prepare codes After creating project, we can start editing codes. To creat a new file, we can click where the arrow points to in the picture or use shortcut key Ctrl+N. Then choose Verilog File in the pop up window. ![](./../../../../zh/tang/Tang Nano/assets/LED 5.png) Name for file (Suggested using English) ![](./../../../../zh/tang/Tang Nano/assets/LED 6.png) Double click the created file, then edit in right window ![](./../../../../zh/tang/Tang Nano/assets/LED 7.png) We use light led as an example, copy the following \"LED example codes\" into the created file or edit the created file by yourself. ```verilog module led ( input sys_clk, input sys_rst_n, // reset input output reg led // LED ); reg [23:0] counter; //定义一个变量来计数 always @(posedge sys_clk or negedge sys_rst_n) begin // Counter block if (!sys_rst_n) counter < 24'd0; else if (counter < 24'd1349_9999) // 0.5s delay counter < counter + 1'b1; else counter < 24'd0; end always @(posedge sys_clk or negedge sys_rst_n) begin // Toggle LED if (!sys_rst_n) led < 1'b1; else if (counter 24'd1349_9999) // 0.5s delay led < ~led; // ToggleLED end endmodule ``` After finishing edit the file, it's necessary to tick the `Use DONE as regular IO` in Project >Configuration >Place&Route >Dual Purpose Pin to avoid error. ![img_configuration](./../../../../zh/tang/Tang Nano 9K/nano_9k/LED_Configuration.png) ## Synthesize, constrain, place&route ### Synthesize After finishing steps above, go to the \"Process\" interface, Synthesize the edited file, which means running \"Synthesize\". ![](./../../../../zh/tang/Tang Nano 9K/nano_9k/nano_9k_synthsize.png) If the result is the same as shown below ![](./../../../../zh/tang/Tang Nano/assets/LED.png) It means that there is no bug in our code, we can continue the next steps. If there is some thing wrong, please fix by yourself. ### Constrain Clock constraint is not involved here To realize function of the code on FPGA, we must bind the ports we define with the chip pins. Double click the FloorPlanner in the Process interface to set pin constraints(This can be continued if failing Synthesize). ![](./../../../../zh/tang/assets/examples/led_pjt_2.png) First time open FloorPlanner it will prompt lack of \".cst\" file, we just choose ok. ![](./../../../../zh/tang/Tang Nano/assets/LED 9.png) The leds schematic of nano 9k is as shown below: ![](./../../../../zh/tang/Tang Nano 4K/assets/LED_Pin.png \"nano 4k led pin\") port I/O pin desc sys_clk input 45 Clock input sys_rst_n input 15 System_reset led output 10 LED In this GUI interface we have two ways to constrain pins: Drag the corresponding port to the pin of chip Type the pin number corresponding to the port in IO constraint So we can choose one way in the opened window as what the following picture shows to finish constraints: ![Led floorplanner](./../../../../zh/tang/Tang Nano 4K/assets/LED_FloorPlanner.png) ### Place&Route > If it shows error 2017, the solve way can be found ahead(Tips: Enable Dual Purpose Pin) After finishing Running \"Place&Route\" in the Process interface window, the result will be as same as below ![](./../../../../zh/tang/Tang Nano 4K/assets/Place&Route.png) ## Program Then connect the board with computer, download firmware. You can scan the device according to the following picture. ![](./../../../../zh/tang/Tang Nano 4K/assets/nano 4k device scan.png) We use download to SRAM as an example. Configure download mode ![](./../../../../zh/tang/Tang Nano 4K/assets/nano 4k sram choose.png) Then we just click download to start program device. The led on the board will blink If you need to store firmware with no power, just choose download to flash mode. ## End Now the tutorial ends, if you have any suggestions, just leave a message."},"/hardware/en/tang/Tang-Nano-4K/Nano-4K.html":{"title":"Tang Nano 4K ","content":"# Tang Nano 4K > Edit on 2022.08.16 ## Introduction Tang Nano 4K is a development board designed based on [Gowin](https://www.gowinsemi.com/en/) little bee GW1NSR LV4C FPGA chip. The board is equipped with camera interface and HDMI interface. There is also an onboard USG JTAG debugger, which make it convinent for users to use. Its Cortex M3 hardcore can help users study mcu. ![Tang Nano 4K](./assets/4k 1.jpg) ![Tang Nano 4K](./assets/4k 2.jpg) ## Specs The sheet below shows difference with previous product model Tang Nano Tang Nano 4K FPGA chip GW1N 1 LV GW1NSR LV4C logic units 1152 4608 Register 864 3456 Hard core none Coetex m3 Block SRAM(bits) 72K 180K User flash(bits) 96K 256K Number of PLL 1 2 Number of I/O Bank 4 4 Number of users I/O 41 44 Screen interface 40P RGB LCD interface HDMI interface camera interface None DVP interface Size 58.4mm\\*21.3mm 60mm\\*22.86mm ### Pinmap ![Pinmap](./../../../zh/tang/Tang Nano/assets/Tang_nano_4K_0813.png) ## Development software Visit [install ide](https://wiki.sipeed.com/hardware/en/tang/Tang Nano Doc/install the ide.html) to setup your programming environment. ## Burn firmware Tang Nano 4K uses the onboard BL702 for jtag, with which to burn bitstream. Run the Programmer in Gowin IDE to download firmware into FPGA. ## Informations [Datasheet](https://dl.sipeed.com/shareURL/TANG/Nano%204K/HDK/01_Specification) [Schematic](https://dl.sipeed.com/shareURL/TANG/Nano%204K/HDK/02_Schematic) [Bit number map](https://dl.sipeed.com/shareURL/TANG/Nano%204K/HDK/03_Bit%20number%20map) [Dimensional drawing](https://dl.sipeed.com/shareURL/TANG/Nano%204K/HDK/04_Dimensional%20drawing) [3D File](https://dl.sipeed.com/shareURL/TANG/Nano%204K/HDK/05_3D%20file) [hip Manual](https://dl.sipeed.com/shareURL/TANG/Nano%204K/HDK/06_Chip%20Manual) [Examples](https://wiki.sipeed.com/hardware/en/tang/Tang Nano Doc/examples.html) ## Addition 1. If you have trouble with this board, you can join our telegram (t.me/sipeed) or contact us on twitter (https://twitter.com/SipeedIO). Leaving message below is also OK. 2. Visit [Tang questions](https://wiki.sipeed.com/hardware/en/tang/Tang Nano Doc/questions.html) first if you have any trouble. 3. Debugging Cortex M3, we suggest to use serial port debug way. If you are excellent enough you can try other ways to debug it. 4. THe HDMI ports are multiplexed as IO and routed to the pin headers. The actual results of the IO which are multiplexed with HDMI pins on the pin headers may not be consistent with what you want because of the external pull up. ![nano_4k_hdmi_io](./../../../zh/tang/Tang Nano 4K/assets/nano_4k_hdmi_io.png)"},"/hardware/en/tang/Tang-Nano-4K/start.html":{"title":"摄像头和HDIM屏幕显示","content":"# 摄像头和HDIM屏幕显示 具体工程[文件](https://github.com/sipeed/TangNano 4K example) 接好摄像头和HDMI显示器之后，将这个工程烧录到开发板上即可使用了。"},"/hardware/en/tang/Tang-Nano-4K/Tang-nano-4k.html":{"title":"Tang Nano 4k examples","content":" title: Tang Nano 4k examples Before reading, we suggest using this [Programmer](https://dl.sipeed.com/shareURL/TANG/programmer) not that installed with IDE Detail [Files](https://github.com/sipeed/TangNano 4K example) After connecting the camera and HDMI display, flash the project to the development board to see the corresponding results. [Blink](./examples/led.html) HDMI display(Preparing, please wait) Display camera content by HDMI(Preparing, please wait) Cortex m3 blink(Preparing, please wait) others(Any ideas could be come up, and will be accepted if feasible)"},"/hardware/en/longan/index.html":{"title":"","content":"# Updating"},"/hardware/en/longan/Zero/index.html":{"title":"","content":"敬请期待"},"/hardware/en/longan/One/index.html":{"title":"","content":"敬请期待"},"/hardware/en/longan/Nano/Longan_nano.html":{"title":"Longan nano ","content":"# Longan nano ## Introduction Longan Nano is a minimalist RISC V development board based on GigaDevice GD32VF103CBT6. The development board draws out all the IOs of the chip, with a small and exquisite design, and has on board USB C, LCD, SD card, JTAG and other interfaces, which is convenient for students, engineers, and enthusiasts to learn the latest generation of RISC V processors. ![Longan_nano_pin](./../../../assets/Longan/nano/Longan_nano.124.jpg) ## Specification Feature Description CPU GD32VF103CBT6 based on RISC V 32 bit core Core power consumption 1/3 of a traditional Cortex M3 Storage 128KB Flash, 32KB SRAM Peripherals 4 x general purpose 16 bit timer, 2 x basic 16 bit timer, 1 x advanced 16 bit timer,<br>Watchdog, RTC, Systick<br>3 x USART, 2 x I2C, 3 x SPI, 2 x I2S, 2 x CAN, 1 x USBFS (OTG), 2 x ADC (10 channel), 2 x DAC Buttons 1x Reset button, 1x BOOT button (connected to GPIO） Display Interface SPI interface (standard 0.96 inch 160x80 RGB IPS LCD） Storage Interface Onboard TF card slot Debug Interface 2x 4 pin headers connected to JTAG debug interface and serial port Crystal Oscillator 8MHz passive crystal + 32.768KHz RTC passive crystal LED 1x RGB LED Number of GPIOs 2 Lead out 28 GPIOs to pin headers ### New Photo ![](./../../../assets/Longan/nano/Longan nano_PINOUT.svg) ![](./../../../assets/Longan/nano/longan nano 1.png) ### Old Photo ![](./../../../assets/Longan/nano/longan_nano_pinout_old.png) ![](./../../../assets/Longan/nano/longan nano old.png) ## User Guide [Longan User Guide](/soft/longan/en/README.md) ## Product technical support The Longan Nano development board can meet the needs of customers in various scenarios. It has been widely used in AIoT, and its quality and performance have a very good reputation in the industry. The professional technical team solves hardware design and software functions for our customers. For professional technical support and more detailed product information, please contact us via e mail <support@sipeed.com>。"},"/hardware/en/longan/Nano/pio.html":{"title":"PIO 配置","content":"PIO 配置 ## 安装 VS CODE VS CODE 是一款比较常用的开发工具。前往[VScode官网](https://code.visualstudio.com/ \"VScode官网\")，下载安装对应操作系统版本的安装包即可。 ## 安装 PIO 插件 打开 VSCode > 点击左侧扩展 > 搜索 PlatformIO > 点击安装插件 > 等待安装完成 > 重启 VSCODE ![](http://blog.sipeed.com/wp content/uploads/2019/04/0d501a8515a735fba54e2f5de908cd1e.png) ## 安装 GD32V 平台定义 PIO 目前提供**命令行**与**图形界面**两种方式来安装。下面将分别介绍： （PS : 推荐命令行，因为能看到下载进度条。） ### 命令行 点击左侧PIO标志 > 点击左下方的新建终端 > 在终端窗口中执行下面的安装指令 * 发布版 （稳定版本） ``` platformio platform install gd32v ``` * 开发版（与Github同步） ``` platformio platform install https://github.com/sipeed/platform gd32v ``` ![](../../assets/pio_install_gd32v.png) 注：受国内网络环境影响，安装过程需要较长时间，请耐心等待。 ### 图形界面 打开VS CODE > 点击左侧 PIO 图标 > 点击左下方的 Open 选项 > 点击 Platforms 页面 > 点击 Advanced Installation 打开添加窗口 ![](../../assets/pio_install_add_gd32v_step1.png) 在打开的窗口中输入下面的网址 ``` https://github.com/sipeed/platform gd32v.git ``` 点击 Install 即可添加完成。 ![](../../assets/pio_install_add_gd32v_step2.png) 耐心等待即可安装成功。 （安装失败多为网络原因， 请更换网络环境后再次尝试） ![](../../assets/pio_install_add_gd32v_step3.png)"},"/hardware/en/longan/Nano/blink.html":{"title":"Blink 闪灯程序","content":"Blink 闪灯程序 ## 创建 Blink 工程 * 打开 PIO 主页 选择 `Project Examples` ![](http://blog.sipeed.com/wp content/uploads/2019/04/d977e844490e6ccc4625f701883a29f5.png) * 选择 `arduino blink` 点击 `Import` 导入示例程序 （初次导入需要下载架构文件及工具，需要等待较长时间） ![](http://blog.sipeed.com/wp content/uploads/2019/04/82943a6b74077e6210e2d9421cb5438f.png) * 导入成功后即可见到示例工程 ![](http://blog.sipeed.com/wp content/uploads/2019/04/1262373ca7b0b483e30dac1124adaabf.png) ## 工程配置文件 * 我们首先需要编辑工程配置文件 `platformio.ini` 根据自己的开发板型号，删掉其他开发板环境。 ![](./../../assets/pio_ini_cfg.png) 配置示例 ```ini [env:sipeed longan nano] platform gd32v ;平台，选择gd32v framework arduino ;可选 gd32vf103 sdk 或 arduino board sipeed longan nano ; 开发板 monitor_speed 115200 ; 串口监视器波特率 upload_protocol serial ; 下载工具 默认串口， 可选 dfu、jlink、gd link 等 debug_tool jlink ; 调试工具 默认jlink ，可选 sipeed rv debugger 等 ``` PIO 可以在配置文件中实现设置宏定义， 控制编译流程等自定义功能，高级用法请参阅 [PIO 官方文档](https://docs.platformio.org/en/latest/projectconf.html). ## 一键编译 点击左下角的 `Build` 即可构建项目 ![](../../assets/pio_complie.png) ## 连接开发板 ### 串口 ISP 下载 * 准备 USB 转 串口下载器 * 连接开发板与下载器 * 修改 `platformio.ini` 文件， 添加下面一行内容： ```ini upload_protocol serial ``` * 开发板按住 `BOOT` 键，再按 `RESET` 键重启开发板后再松开 `BOOT` 键，进入下载模式。 ### JTAG 下载 * 准备J link 或 Sipeed RV 调试器 * 连接开发板 * 修改 `platformio.ini` 文件， 添加下面一行内容： ```ini upload_protocol jlink ``` 或者 ```ini upload_protocol sipeed rv debugger ``` ### USB DFU 下载 * **首次** 使用需要安装 libusb 驱动程序， 请参考此步骤 [使用 Zaidig 安装驱动](#使用zadig安装驱动). * 准备 USB Type c 数据线 * 使用数据线连接电脑与开发板 * 修改 `platformio.ini` 文件， 添加下面一行内容： ```ini upload_protocol dfu ``` * 开发板按住 `BOOT` 键，再按 `RESET` 键重启开发板后再松开 `BOOT` 键，进入 DFU 模式。 ## 一键下载 按照上面步骤选择好下载方式后，即可使用 PIO 内置工具一键下载。 点击左下角的 `Upload` 即可向开发板上传程序。 ![](../../assets/pio_upload.png) ## 使用Zadig安装驱动 PIO 内置 dfu util 下载工具，使用此工具需要为开发板安装 libusb 驱动。（注意： 与 GD 官方驱动不同） 建议通过 Zadig 安装 winusb 驱动。[下载地址](https://github.com/pbatard/libwdi/releases/download/b721/zadig 2.4.exe) 下载成功后打开 Zadig 在下拉栏中选择 GD32V， 替换驱动选择 WinUSB, 点击替换按钮，即可替换成功。 ![](../../assets/dfu_zadig.png) ## DFU 图形界面下载 下载DFU工具：http://dl.sipeed.com/LONGAN/Nano/Tools/GD32_MCU_Dfu_Tool_V3.8.1.5784_1.rar 解压出两个文件夹： GD32 MCU Dfu Drivers_v1.0.1.2316 和 GD32 MCU Dfu Tool_v3.8.1.5784 先进入driver文件夹，安装对应的驱动文件，注意使用管理员权限运行 ![](../../assets/examples/how_to_install_dfu.png) 运行 GD32 MCU Dfu Tool.exe 将 Longan Nano 插到电脑，按住 Boot0 键，短按 Reset 键，再松开 Boot0 键， 可以看到 DFU 工具中识别到了 GD32VF 芯片 选择对应的固件文件，并勾选烧录后校验，点击OK，即可进行烧录 烧录完成之后不会自动复位，需要自己手工按下复位按键，查看运行效果 ![](../../assets/examples/how_to_use_dfu.png)"},"/hardware/en/modules/Gamepad.html":{"title":"Sipeed Gamepad","content":"# Sipeed Gamepad ## 概述 ![](./../../assets/spmod/spmod_amigo_hendle/Gamepad141.jpg) 采用主控芯片： GD32F150G 通信接口：IIC（8P座子或者Grove 4P 2.0mm座子） 板载10个按键（每个按键都连接到独立的GPIO） 板载指示灯 ## 硬件参数 项目 参数 MCU GD32F150G（Arm Cortex M3） 主频 72Mhz 存储 64KB Flash, 8KB SRAM 按键 10个按键（每个按键都连接到独立的GPIO） 下载接口 SWD下载 晶振 24MHz无源晶振 LED 板载1个电源指示灯和2个LED USB接口 板载1个USB TYPE C 母座（连接到MCU的USB） ![](./../../assets/spmod/spmod_amigo_hendle/amigo_handle_5.png) ## 手柄接口 ![](./../../assets/spmod/spmod_amigo_hendle/amigo_handle_3.jpg) ![](./../../assets/spmod/spmod_amigo_hendle/amigo_handle_4.jpg) 引脚序号 引脚名称 类型 引脚说明 1 GND G 模块电源地 2 NC NC 悬空引脚，无功能 3 NC NC 悬空引脚，无功能 4 SDA I/O 模块I2C串行数据引脚 5 3V3 V 模块电源输入正 6 NC NC 悬空引脚，无功能 7 NC NC 悬空引脚，无功能 8 SCL I 模块I2C串行时钟引脚 链接方式 单手柄： ![](./../../assets/spmod/spmod_amigo_hendle/Gamepad.143.jpg) 双手柄： ![等待完善](./../../assets/spmod/spmod_amigo_hendle/amigo_handle_6.png) ## 软件描述 项目 参数 开发环境 Maixpy IDE、 PlatformIO IDE 开发语言 C语言、 python 通讯协议 IIC > GD32F150G源码和例程 [https://github.com/sipeed/GD32F150 I2C Handle](https://github.com/sipeed/GD32F150 I2C Handle) ### 手柄测试 单手手柄输入测试 ```python from machine import I2C import nes, lcd from sound import CubeAudio import sys, time from fpioa_manager import fm from Maix import FPIOA, GPIO # B A SEL START UP DOWN LEFT RIGHT X Y # 1 2 4 8 16 32 64 128 254 253 i2c I2C(I2C.I2C2, freq 400*1000, sda 27, scl 24) lcd.init(freq 15000000) lcd.register(0x36, 0x20 state 0 import time i 0 while True: dev i2c1.scan() print(dev) dev i2c2.scan() print(dev) time.sleep(0.5) try: #i2c.writeto(0x4A, b'0') tmp (i2c1.readfrom(0x4A, 2)) print('{} {}'.format(int(tmp[0]), int(tmp[1]))) except Exception as e: print(e) ``` 双手柄输入测试 ```python from machine import I2C import nes, lcd from sound import CubeAudio import sys, time from fpioa_manager import fm from Maix import FPIOA, GPIO # B A SEL START UP DOWN LEFT RIGHT X Y # 1 2 4 8 16 32 64 128 254 253 i2c I2C(I2C.I2C2, freq 400*1000, sda 27, scl 24) lcd.init(freq 15000000) lcd.register(0x36, 0x20 state 0 import time i 0 while True: dev i2c1.scan() print(dev) dev i2c2.scan() print(dev) time.sleep(0.5) try: #i2c.writeto(0x4A, b'0') tmp (i2c1.readfrom(0x4A, 2)) print('{} {}'.format(int(tmp[0]), int(tmp[1]))) except Exception as e: print(e) try: #i2c.writeto(0x42, b'0') tmp (i2c2.readfrom(0x42, 2)) print('{} {}'.format(int(tmp[0]), int(tmp[1]))) except Exception as e: print(e) ``` 测试代码输出 ```python 0 252 #没有输出 1 252 #按下 B 键 2 252 #按下 A 键 4 252 #按下 SEL 键 8 252 #按下 START 键 16 252 #按下 UP 键 32 252 #按下 DOWN 键 64 252 #按下 LEFT 键 128 252 #按下 RIGHT 键 0 254 #按下 X 键 0 253 #按下 Y 键 ``` ### 游戏测试 [MaixPy NES](/soft/maixpy/zh/api_reference/media/nes.md) ## 资料下载 [Gamepad](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed Gamepad)"},"/hardware/en/modules/micarray.html":{"title":"MicArray 麦克风阵列","content":"# MicArray 麦克风阵列 ## Summary Sipeed microphone array consists of six microphones along the board and a center microphone. The 12 leds on the array board can be used to visualize and identify the location of the sound source, which can be used to do the sound source localization experiment. Get it: [Aliexpress](https://www.aliexpress.com/item/1005002687541143.html) [TaoBao](https://item.taobao.com/item.htm?id 591820993474) ## Product figure <img src \"./../../assets/spmod/spmod_micarray/spmod_micarray.png\" width 55%> [Click me to download datasheet](https://dl.sipeed.com/fileList/MAIX/HDK/Sipeed R6+1_MicArray/Specifications/Sipeed%20R6+1%20%E9%BA%A6%E5%85%8B%E9%A3%8E%E9%98%B5%E5%88%97%20%E8%A7%84%E6%A0%BC%E4%B9%A6%20V1.0.pdf) [Click me to download schematic](https://dl.sipeed.com/fileList/MAIX/HDK/Sipeed R6+1_MicArray/Sipeed R6+1_MicArray_11.16/Sipeed R6+1_MicArray_11.16(Schematic).pdf) [Click me to download Assembly_drawing](https://dl.sipeed.com/fileList/MAIX/HDK/Sipeed R6+1_MicArray/Sipeed R6+1_MicArray_11.16/Sipeed R6+1_MicArray_11.16(Assembly%20drawing).pdf) ## Introduction MEMS microphone :7 MSM261S4030H0 make up the array [Click me to download datasheet of MSM261S4030H0](https://dl.sipeed.com/fileList/MAIX/HDK/Chip_DS/%E9%BA%A6%E5%85%8B_MSM261S4030H0(%E4%BD%BF%E7%94%A8%E7%9A%84).pdf) Sensitivity : 26(dB,dBFS @1kHz 1Pa) Signal noise ratio : 57dB(20kHz bandwidth, A weighted) Size :78.1*88.8mm LED :12 SK9822 LED make up the round led array [Click me to download datasheet of SK9822](https://dl.sipeed.com/fileList/MAIX/HDK/Chip_DS/sk9822_micarray_led.PDF) Multiple leds are cascaded through dual signal lines 8 Bit(256 levels) for color adjustment,5 Bit(32 levels) for brightness adjustment Connector: Supports 2 x 5P 2.54mm terminals and a 10P 0.5mm FPC connector ## Parameters Item Parameter Sound pressure level 140 dB SPL Sensitivity 26(dB,dBFS @1kHz 1Pa) Signal noise ratio 57 dB (20kHz bandwidth,A weighted) <br>THD<1% (100dB SPL @1kHz S Nom,Rload>2k ) Clock frequenxy 1.0 4.0Mhz(Normal mode) <br>150 800khz(Low energy mode) ## Pin definition Pin number Pin name Type Pin description 1 VIN VCC Power input pin 2 GND GND Power ground pin 3 MIC_D0 I/O Serial data output from I²S interface of microphone 0 and microphone 1 4 MIC_D1 I/O Serial data output from I²S interface of microphone 2 and microphone 3 5 MIC_D2 I/O Serial data output from I²S interface of microphone 4 and microphone 5 6 MIC_D3 I/O Serial data output from I²S interface of center microphone 7 MIC_WS I/O I²S interface serial data word selection 8 MIC_CK I/O I²S interface serial clock 9 LED_CK I/O LED serial clock 10 LED_DA I/O LED serial data <img src \"./../../assets/spmod/spmod_micarray/MicArray.png\" width 55%> ## Example code ### Connection Jumper Wire connection Microphone array Pins on development board Parameter in code VIN 3.3v/5v —— GND GND —— LED_CK I/O Port sk9822_clk LED_DA I/O Port sk9822_dat MIC_D0 I/O Port i2s_d0 MIC_D1 I/O Port i2s_d1 MIC_D2 I/O Port i2s_d2 MIC_D3 I/O Port i2s_d3 MIC_WS I/O Port i2s_ws MIC_CK I/O Port i2s_sclk Because of the FPIOA feature of K210, each peripheral can be mapped to any pin. Therefore, connect the `I/O port` in the above table with the pins with digital identification on your board. Those with special identification such as GND are not the so called digital identification pins. After connecting the pins, you can see the description of the pins in the code below. ### Burn firmware Go to [Download station](https://dl.sipeed.com/shareURL/MAIX/MaixPy/release/master) to download firmware, download the defalut firmware described in [Firmware naming instructions](https://wiki.sipeed.com/soft/maixpy/en/get_started/upgrade_maixpy_firmware.html#Get the firmware) . ### Micropython Code ```python from Maix import MIC_ARRAY as mic import lcd lcd.init() mic.init() #mic.init(i2s_d0 23, i2s_d1 22, i2s_d2 21, i2s_d3 20, i2s_ws 19, i2s_sclk 18, sk9822_dat 24, sk9822_clk 25) while True: imga mic.get_map() b mic.get_dir(imga) a mic.set_led(b,(0,0,255)) imgb imga.resize(160,160) imgc imgb.to_rainbow(1) a lcd.display(imgc) mic.deinit() ``` According to the pin number of your own connection, `init(i2s_d0 23, i2s_d1 22, i2s_d2 21, i2s_d3 20, i2s_ws 19, i2s_sclk 18, sk9822_dat 24, sk9822_clk 25) `. For example, if the `MIC_D0` on the microphone array is connected to the pin labeled 25 on the K210 board, then the corresponding parameter in this code needs to be changed to `i2s_d0 25`, the other seven pins should be changed by the same way. Since configuration of everyone is different, there are no identical connection instructions for using jumper wires, modify the pin parameters individually, and don't forget to delete the commect before `mic.init(...). `(just delete `#`). > Make sure not use the pin which has been used for peripherals(Like camera pins or lcd pins should not bu used for this micarray pin), which will make amazing error. ### C code #### SK9822 driver codes For reference only, source：[github](https://github.com/sipeed/MaixPy/blob/master/components/kendryte_sdk/src/sipeed_sk9822.c); It is recommended to copy the code to the computer local editor to view if analyzing the code. <details> <summary>sipeed_sk9822.c</summary> <pre class \"language none line numbers language c\"><code class \"language c\">#include \"sipeed_sk9822.h\" #define LED_NUM 12 #define SK9822_DAT_SET() \\ { \\ gpiohs >output_val.bits.b27 1; \\ } #define SK9822_DAT_CLR() \\ { \\ gpiohs >output_val.bits.b27 0; \\ } #define SK9822_CLK_SET() \\ { \\ gpiohs >output_val.bits.b28 1; \\ } #define SK9822_CLK_CLR() \\ { \\ gpiohs >output_val.bits.b28 0; \\ } static void sk9822_init(void) { gpiohs_set_drive_mode(SK9822_DAT_GPIONUM, GPIO_DM_OUTPUT); gpiohs_set_drive_mode(SK9822_CLK_GPIONUM, GPIO_DM_OUTPUT); gpiohs_set_pin(SK9822_DAT_GPIONUM, 0); gpiohs_set_pin(SK9822_CLK_GPIONUM, 0); } void sk9822_send_data(uint32_t data) { for (uint32_t mask 0x80000000; mask > 0; mask >> 1) { SK9822_CLK_CLR(); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); // usleep(1); if (data & mask) { SK9822_DAT_SET(); } else { SK9822_DAT_CLR(); } SK9822_CLK_SET(); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); asm volatile(\"nop\"); // usleep(2); } } //32bit 0 void sk9822_start_frame(void) { sk9822_send_data(0); } //32bit 1 void sk9822_stop_frame(void) { sk9822_send_data(0xffffffff); } //1 1 1 1 gray b g r void sk9822_data_one_led(uint8_t gray, uint8_t r, uint8_t g, uint8_t b) { uint32_t tosend; gray & 0x1f; //for make sure no error data in tosend ((0xe0 gray) << 24) (b << 16) (g << 8) r; sk9822_send_data(tosend); } uint32_t sk9822_gen_data_one_led(uint8_t gray, uint8_t r, uint8_t g, uint8_t b) { uint32_t tosend; gray & 0x1f; //for make sure no error data in tosend ((0xe0 gray) << 24) (b << 16) (g << 8) r; return tosend; } //first color1, then msleep interval, then color2, last msleep interval void sk9822_flash(uint32_t color1, uint32_t color2, uint32_t interval) { uint8_t index; color1 0xe0000000; color2 0xe0000000; sk9822_start_frame(); for (index 0; index < LED_NUM; index++) { sk9822_send_data(color1); } sk9822_stop_frame(); msleep(interval); sk9822_start_frame(); for (index 0; index < LED_NUM; index++) { sk9822_send_data(color2); } sk9822_stop_frame(); msleep(interval); } static void arraymove(uint32_t array[], uint8_t len) { uint8_t index; uint32_t tmp; tmp array[0]; for (index 0; index < len 1; index++) { array[index] array[index + 1]; } array[len 1] tmp; } //呼吸 //跑马灯 //方位 void sk9822_horse_race(uint8_t r, uint8_t g, uint8_t b, uint32_t interval, uint8_t times) { uint32_t led_frame[LED_NUM] {0}; uint8_t i, index; for (index 0; index < 12; index++) { led_frame[index] 0xff000000; } for (index 0; index < 6; index++) { // led_frame[index] sk9822_gen_data_one_led((0xe0(index*4)),r 40*index,g 30*index,b 20*index); led_frame[index] sk9822_gen_data_one_led((0xe0 (32 index * 4)), r, g, b); } for (index 0; index < times; index++) { while (1) { sk9822_start_frame(); for (i 0; i < 12; i++) { sk9822_send_data(led_frame[i]); } sk9822_stop_frame(); arraymove(led_frame, LED_NUM); msleep(interval); } } } void sk9822_breath(uint8_t r, uint8_t g, uint8_t b, uint32_t interval) { uint8_t index, cnt, dir; uint32_t color sk9822_gen_data_one_led(0xff, r, g, b); cnt 0; dir 1; while (1) { if (cnt > 30) { dir !dir; cnt 0; } cnt++; color sk9822_gen_data_one_led((0xe0 (dir ? cnt : 31 cnt)), r, g, b); sk9822_start_frame(); for (index 0; index < LED_NUM; index++) { sk9822_send_data(color); } sk9822_stop_frame(); msleep(interval); } } void sipeed_init_mic_array_led(void) { sk9822_init(); //flash 3 times sk9822_flash(0xffeec900, 0xffff0000, 200); sk9822_flash(0xffeec900, 0xff00ff00, 200); sk9822_flash(0xffeec900, 0xff0000ff, 200); } // void sipeed_calc_voice_strength(uint8_t voice_data[]) // { // uint32_t tmp_sum[12] {0}; // uint32_t led_color[12]; // uint8_t i, index, tmp; // for (index 0; index < 12; index++) // { // tmp_sum[index] 0; // for (i 0; i < voice_strength_len[index]; i++) // { // tmp_sum[index] + voice_data[voice_strength[index][i]]; // } // tmp (uint8_t)tmp_sum[index] / voice_strength_len[index]; // led_brightness[index] tmp > 15 ? 15 : tmp; // } // sk9822_start_frame(); // for (index 0; index < 12; index++) // { // led_color[index] (led_brightness[index] / 2) > 1 ? (((0xe0 (led_brightness[index] * 2)) << 24) 0xcd3333) : 0xe0000000; // sk9822_send_data(led_color[index]); // } // sk9822_stop_frame(); // } </code> </pre> </details> #### Micarray code For reference only, source：[github](https://github.com/sipeed/MaixPy/blob/master/components/micropython/port/src/Maix/Maix_mic_array.c); It is recommended to copy the code to the computer local editor to view if analyzing the code. ## Other information [Hardware information](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed R6+1_MicArray) ## More Usage Go to [bbs](https://bbs.sipeed.com)(Only Chinese) for more. ## Question ### This error occurs ![error_code](./../../assets/spmod/spmod_micarray/spmod_micarray_err.png) Use other IO port."},"/hardware/en/modules_spmod/spmod_lora.html":{"title":"SPMOD - LoRa","content":"# SPMOD LoRa ## 概述 <img src \"../../assets/spmod/spmod_lora/sp_lora.png\" width \"\" height \"300\" /> SPMOD_LoRa(LoRa 模块)采用 M XL8 模块。 ## SPMOD LoRa 介绍 采用 **Sipeed SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口 利用 SP MOD SPI 和 LoRa 模块通讯 LoRa 模块：M XL8 SX1276 模块是一个 SPI 接口，内置 LoRaTM 调制解调器和可调功率放大器的 LoRa 模块，它具有高性能和可靠性 370MHz 1200MHz, 最大20dBm (100mW)持续发射功率 模块尺寸：25.0\\*10.0\\*4.3mm ### M XL8 SX1276 LoRa 模块 介绍 功能特点： 参数 工作频段 370MHz 1200Mhz 发射功率 20dBm（最大） 通信接口 SPI 工作电压 1.8V~6.3V 工作温度 40℃ 80℃ 天线 外置天线，IPEX或焊接 接收灵敏度 148dbm RSSI动态范围 127dB 最大链路预算 168dB 收发状态电流 9.9mA 睡眠状态电流 50nA 调制方式 FSK, GFSK, MSK, GMSK, LoRaTM及OOK > 内置LoRaTM调制解调器，内置CRC，继承+12dBm可调PA+LNA ### SPMOD_lora 模块引脚定义： 引脚序号 引脚名称 类型 引脚说明 1 GND G 模块电源地 2 CS I/O SPI片选引脚 3 SO I/O MISO数据引脚，主机输入从机输出 4 RST I 模块复位引脚，低有效 5 3V3 V 模块电源输入正 6 SCK I SPI串行时钟引脚 7 SI I/O MOSI数据引脚，主机输出从机输入 8 IRQ I 连接至模块DIO0，可编程决定功能 <img src \"../../assets/spmod/spmod_lora/back.png\" width \"300\" /> 接线方式: MCU:FUN(IO) SP_LCD : : : : GPIOHS7(IO_7) RST SPI:MISO(IO_15) SO SPI:SS0(IO_20) CS SPI:SCK(IO_21) SCK SPI:MOSI(IO_8) SI GPIOH(IO_6) IRQ 1.8 6.3V 3.3V GND GND <img src \"../../assets/spmod/spmod_lora//connection.png\" height \"250\"> ## 使用例程 * 流程 1. 创建 LoRa 对象并初始化 2. 发送或者接收数据 ### C 示例： ```c fpioa_set_function(SPI_LoRa_SX127X_CS_PIN_NUM, FUNC_SPI1_SS0); // CS: 20 fpioa_set_function(SPI_LoRa_SX127X_SCK_PIN_NUM, FUNC_SPI1_SCLK); // SCLK: 21 fpioa_set_function(SPI_LoRa_SX127X_MOSI_PIN_NUM, FUNC_SPI1_D0); // MOSI: 8 fpioa_set_function(SPI_LoRa_SX127X_MISO_PIN_NUM, FUNC_SPI1_D1); // MISO: 15 fpioa_set_function(SPI_LoRa_SX127X_IRQ_PIN_NUM, FUNC_GPIOHS0 + SPI_LoRa_SX127X_IQR_GPIO_NUM); // IQR: 6 fpioa_set_function(SPI_LoRa_SX127X_RST_PIN_NUM, FUNC_GPIOHS0 + SPI_LoRa_SX127X_RST_GPIO_NUM); // RST: 7 spi_init(SPI_DEVICE_1, SPI_WORK_MODE_0, SPI_FF_STANDARD, DATALENGTH, 0); sx1278_begin(&SX1278, SX1278_433MHZ, SX1278_POWER_17DBM, SX1278_LoRa_SF_8, SX1278_LoRa_BW_20_8KHZ, 10); if (master 1) { printf(\" MASTER \\r\\n\"); ret sx1278_LoRaEntryTx(&SX1278, 16, 2000); } else { printf(\" SALAVE \\r\\n\"); ret sx1278_LoRaEntryRx(&SX1278, 16, 2000); } ``` ### MaixPy 例程： ```python fm.register(20, fm.fpioa.GPIOHS20, force True) # RST fm.register(7, fm.fpioa.GPIOHS7, force True) # CS # set gpiohs work mode to output mode cs GPIO(GPIO.GPIOHS20, GPIO.OUT) rst GPIO(GPIO.GPIOHS7, GPIO.IN) # The other pins are configured at SPI initialization time spi1 SPI(SPI.SPI1, mode SPI.MODE_MASTER, baudrate 100 * 1000, polarity 0, phase 0, bits 8, firstbit SPI.MSB, sck 21, mosi 8, miso 15) lora SX127x(spi spi1, pin_ss cs) lora.init() #######receiver########### receive(lora) ########sender########### # send(lora) ``` ### 运行环境 语言 开发板 SDK/固件版本 : : : : : : C MaixCube kendryte standalone sdk v0.5.6 MaixPy MaixCube maixpy v0.5.1 *MaixPy固件建议自行从最新源码编译* ### 运行结果 * C <center class \"third\"> \t <img src \"../../assets/spmod/spmod_lora/lora_send_log_c.png\" height \"250\"/><img src \"../../assets/spmod/spmod_lora/lora_recv_log_c.png\" height \"250\"/> </center> * MaixPy <center class \"third\"> \t <img src \"../../assets/spmod/spmod_lora/lora_send_log.png\" height \"250\"/><img src \"../../assets/spmod/spmod_lora/lora_recv_log.png\" height \"250\"/> </center> ### 移植 修改以下参数即可适配其他 K210 开发板. * C ```c // board_config.h #define SPI_INDEX 1 #define SPI_SCLK_RATE 600*1000 #define SPI_CHIP_SELECT_NSS 0//SPI_CHIP_SELECT_0 #define SPI_LoRa_SX127X_CS_PIN_NUM 20 #define SPI_LoRa_SX127X_SCK_PIN_NUM 21 #define SPI_LoRa_SX127X_MOSI_PIN_NUM 8 #define SPI_LoRa_SX127X_MISO_PIN_NUM 15 #define SPI_LoRa_SX127X_IRQ_PIN_NUM 6 #define SPI_LoRa_SX127X_RST_PIN_NUM 7 #define SPI_LoRa_SX127X_IQR_GPIO_NUM 6 #define SPI_LoRa_SX127X_RST_GPIO_NUM 7 ``` * MaixPy ```python ################### config ################### LoRa_RST const(20) LoRa_CS const(7) LoRa_SPI_SCK const(21) LoRa_SPI_MOSI const(8) LoRa_SPI_MISO const(15) LoRa_SPI_NUM SPI.SPI1 LoRa_SPI_FREQ_KHZ const(100) ############################################## ``` ## 参考设计 SPMOD_LoRa 尺寸图： <img src \"../../assets/spmod/spmod_lora/sipeed_spmod_lora.png\" height \"250\" /> ## 资源链接 资源 官网 www.sipeed.com SIPEED 官方淘宝店 [sipeed.taobao.com](sipeed.taobao.com) Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) MaixPy 文档官网 [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed 模型平台 [https://maix.sipeed.com](https://maix.sipeed.com) SDK 相关信息 [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) HDK 相关信息 [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) E mail(技术支持和商业合作) [Support@sipeed.com](mailto:support@sipeed.com) telgram link https://t.me/sipeed MaixPy AI QQ 交流群（六群） 636551897 "},"/hardware/en/modules_spmod/spmod_lcd1.14.html":{"title":"SPMOD - LCD 1.14","content":"# SPMOD LCD 1.14 ## 概述 ![](../../assets/spmod/spmod_lcd1.14//sp_lcd.png) SPMOD_LCD1.14(1.14寸 LCD 屏幕模块)采用 ST7735S TFT LCD屏。 ## SPMOD LCD1.14 介绍 采用 **Sipeed SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口 采用常见 LCD 驱动 IC ST7735S(4 线 SPI 通讯) 分辨率：240\\*135 模块尺寸：35.0\\*20.0mm ### ST7735S TFT LCD屏 介绍 功能特点： 参数 工作电压 2.5V~4.8V 工作电流 <20mA 工作温度 30℃ ~ 85℃ 休眠电流 <0.1mA 屏幕大小 1.14英寸 有效显示区域 1.7mm * 10.8mm 分辨率 160*80 色彩 132个RGB通道 对外接口 8P FPC (0.5mm间距) > 内部集成电路包含DC / DC转换器、可调VCOM生成器、非易失性（NV）存储器（用于存储初始寄存器设置）、显示时钟的振荡器以及时序控制器 ### SPMOD_LCD1.14 模块引脚定义： 引脚序号 引脚名称 类型 引脚说明 1 GND G 模块电源地 2 CS I SPI片选引脚 3 D/C I 数据/命令输入切换引脚 4 RST I 模块复位引脚，低有效 5 3V3 V 模块电源输入正 6 SCK I SPI串行时钟引脚 7 SI I/O MOSI数据引脚，主机输出从机输入 8 BL I 背光控制引脚，低电平关闭背光 <img src \"../../assets/spmod/spmod_lcd1.14/back.png\" width \"300\" /> 接线方式: MCU:FUN(IO) SP_LCD : : : : GPIOHS7(IO_7) RST GPIOHS15(IO_15) D/C SPI:SS0(IO_20) CS SPI:SCK(IO_21) SCK SPI:MOSI(IO_8) SI GPIOHS6(IO_6) BL 2.5~4.8V 3.3V GND GND <img src \"../../assets/spmod/spmod_lcd1.14//connection.png\" height \"250\"> ## 使用例程 * 流程 1. 初始化配置 2. 创建 Image 并填充 3. 发送图像并刷新 ### C 示例： ```c fpioa_set_function(SPI_IPS_LCD_CS_PIN_NUM, FUNC_SPI1_SS0); // SPI_IPS_LCD_CS_PIN_NUM: 20; fpioa_set_function(SPI_IPS_LCD_SCK_PIN_NUM, FUNC_SPI1_SCLK); // SPI_IPS_LCD_SCK_PIN_NUM: 21; fpioa_set_function(SPI_IPS_LCD_MOSI_PIN_NUM, FUNC_SPI1_D0); // SPI_IPS_LCD_MOSI_PIN_NUM: 8; fpioa_set_function(SPI_IPS_LCD_DC_PIN_NUM, FUNC_GPIOHS0 + SPI_IPS_LCD_DC_GPIO_NUM); // SPI_IPS_LCD_DC_PIN_NUM: 15; SPI_IPS_LCD_DC_GPIO_NUM: 15; fpioa_set_function(SPI_IPS_LCD_RST_PIN_NUM, FUNC_GPIOHS0 + SPI_IPS_LCD_RST_GPIO_NUM); // SPI_IPS_LCD_RST_PIN_NUM: 7; SPI_IPS_LCD_RST_GPIO_NUM: 7; fpioa_set_function(SPI_IPS_LCD_BL_PIN_NUM, FUNC_GPIOHS0 + SPI_IPS_LCD_BL_GPIO_NUM); // SPI_IPS_LCD_BL_PIN_NUM: 6; SPI_IPS_LCD_BL_GPIO_NUM: 6; // set gpiohs work mode to output mode gpiohs_set_drive_mode(SPI_IPS_LCD_DC_GPIO_NUM, GPIO_DM_OUTPUT); gpiohs_set_drive_mode(SPI_IPS_LCD_RST_GPIO_NUM, GPIO_DM_OUTPUT); gpiohs_set_drive_mode(SPI_IPS_LCD_BL_GPIO_NUM, GPIO_DM_OUTPUT); spi_init(1, SPI_WORK_MODE_0, SPI_FF_STANDARD, DATALENGTH, 0); ips_lcd_init(); // init LCD_ShowPicture(0, 0, LCD_W, LCD_H, gImage_nanke); // display ``` ### MaixPy 例程： ```python # 20: SPI_LCD_CS_PIN_NUM; fm.register(SPI_LCD_CS_PIN_NUM, fm.fpioa.GPIOHS20, force True) # 15: SPI_LCD_DC_PIN_NUM; fm.register(SPI_LCD_DC_PIN_NUM, fm.fpioa.GPIOHS15, force True) # 6: SPI_LCD_BUSY_PIN_NUM; fm.register(SPI_LCD_BUSY_PIN_NUM, fm.fpioa.GPIOHS6, force True) # 7: SPI_LCD_RST_PIN_NUM; fm.register(SPI_LCD_RST_PIN_NUM, fm.fpioa.GPIOHS7, force True) # set gpiohs work mode to output mode cs GPIO(GPIO.GPIOHS20, GPIO.OUT) dc GPIO(GPIO.GPIOHS15, GPIO.OUT) busy GPIO(GPIO.GPIOHS6, GPIO.OUT) rst GPIO(GPIO.GPIOHS7, GPIO.OUT) # 21: SPI_LCD_SCK_PIN_NUM; 8: SPI_LCD_MOSI_PIN_NUM; spi1 SPI(SPI_LCD_NUM, mode SPI.MODE_MASTER, baudrate SPI_LCD_FREQ_KHZ * 1000, polarity 0, phase 0, bits 8, firstbit SPI.MSB, sck SPI_LCD_SCK_PIN_NUM, mosi SPI_LCD_MOSI_PIN_NUM) ips SPLCD114(spi1, cs, dc, rst, busy, IPS_WIDTH, IPS_HEIGHT, IPS_MODE) # create an 'image' and fill it img image.Image() img.draw_rectangle(80, 80, 30, 30) # display ips.display(img) ``` ### 运行环境 语言 开发板 SDK/固件版本 : : : : : : C MaixCube kendryte standalone sdk v0.5.6 MaixPy MaixCube maixpy v0.5.1 *MaixPy固件建议自行从最新源码编译* ### 运行结果 * C <img src \"../../assets/spmod/spmod_lcd1.14//sp_lcd1.14_c.png\" height \"250\" /> * MaixPy <img src \"../../assets/spmod/spmod_lcd1.14//sp_lcd1.14_py.png\" alt \"sp_lcd1.14_py\" height \"250\" /> ### 移植 修改以下参数即可适配其他 K210 开发板. * C ```c // board_config.h #define SPI_INDEX 1 #define SPI_SCLK_RATE 600*1000 #define SPI_CHIP_SELECT_NSS 0 // SPI_CHIP_SELECT_0 #define SPI_IPS_LCD_CS_PIN_NUM 20 #define SPI_IPS_LCD_SCK_PIN_NUM 21 #define SPI_IPS_LCD_MOSI_PIN_NUM 8 #define SPI_IPS_LCD_DC_PIN_NUM 15 #define SPI_IPS_LCD_BL_PIN_NUM 6 #define SPI_IPS_LCD_RST_PIN_NUM 7 #define SPI_IPS_LCD_DC_GPIO_NUM 15 #define SPI_IPS_LCD_BL_GPIO_NUM 6 #define SPI_IPS_LCD_RST_GPIO_NUM 7 #define USE_HORIZONTAL 3 // 0/1 is horizontal, and 2/3 is vertical. ``` * Maixpy ```python ################### config ################### SPI_LCD_NUM SPI.SPI1 SPI_LCD_DC_PIN_NUM const(15) SPI_LCD_BUSY_PIN_NUM const(6) SPI_LCD_RST_PIN_NUM const(7) SPI_LCD_CS_PIN_NUM const(20) SPI_LCD_SCK_PIN_NUM const(21) SPI_LCD_MOSI_PIN_NUM const(8) SPI_LCD_FREQ_KHZ const(600) ############################################## ``` ## 参考设计 SPMOD_LCD1.14 尺寸图： <img src \"../../assets/spmod/spmod_lcd1.14/sipeed_spmod_lcd1.14.png\" height \"250\" /> ## 资源链接 资源 官网 www.sipeed.com SIPEED 官方淘宝店 [sipeed.taobao.com](sipeed.taobao.com) Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) MaixPy 文档官网 [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed 模型平台 [https://maixhub.com](https://maixhub.com) SDK 相关信息 [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) HDK 相关信息 [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) E mail(技术支持和商业合作) [Support@sipeed.com](mailto:support@sipeed.com) telgram link https://t.me/sipeed MaixPy AI QQ 交流群 878189804 "},"/hardware/en/modules_spmod/spmod_joystick.html":{"title":"SPMOD - JoyStick","content":"# SPMOD JoyStick ## 概述 <img src \"../../assets/spmod/spmod_joystick/sp_joystick.png\" width \"\" height \"300\" /> SPMOD_JoyStick (JoyStick模块)。 ## SPMOD JoyStick 介绍 采用 **Sipeed SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口 通过SP MOD SPI接口连接 可通过外部适配器单独连接7.2V~9V DC，为手柄的振动马达供电 内置升压电路，轻松驱动手柄 PSX/PS2兼容 模块尺寸：35.0\\*20.0\\*13.3mm ### SPMOD_JoyStick 模块引脚定义： 引脚序号 引脚名称 类型 引脚说明 1 GND G 模块电源地 2 CS I SPI片选引脚 3 SO I/O MISO数据引脚，手柄信号输出 4 NC NC 悬空引脚，无功能 5 3V3 V 模块电源输入正 6 SCK I SPI串行时钟引脚 7 SI I/O MOSI数据引脚，手柄信号输入 8 ACK O 确认信号输出引脚 <img src \"\" width \"500\" /> ## 使用例程 待更新 ## 参考设计 SPMOD_JoyStick 尺寸图： <img src \"../../assets/spmod/spmod_joystick/sipeed_spmod_joystick.png\" height \"250\" /> ## 资源链接 资源 链接 官网 www.sipeed.com SIPEED 官方淘宝店 [sipeed.taobao.com](sipeed.taobao.com) Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) MaixPy 文档官网 [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed 模型平台 [https://maix.sipeed.com](https://maix.sipeed.com) SDK 相关信息 [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) HDK 相关信息 [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) E mail(技术支持和商业合作) [Support@sipeed.com](mailto:support@sipeed.com) telgram link https://t.me/sipeed MaixPy AI QQ 交流群（六群） 636551897 "},"/hardware/en/modules_spmod/spmod_tof.html":{"title":"SPMOD - TOF","content":"# SPMOD TOF ## 概述 <img src \"../../assets/spmod/spmod_tof/sp_tof.png\" style \"padding right:100px;\" width \"\" height \"300\" /> SPMOD_TOF(TOF 模块) 采用 VL53L0X 模块。 ## SPMOD TOF 介绍 采用 **Sipeed SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口 利用SP MOD I2C 和 TOF 模块通讯 ToF模块：VL53L0X模块是一个I2C接口，长距离单点飞行时间测定（ToF）模块，它具有高性能和可靠性 最远测量距离4000mm，最高50Hz的测量刷新率。典型前方测量角度27° 可选配红色激光器瞄准头，通过XSHUT引脚控制激光器开关 模块尺寸：25.0\\*10\\*3.15mm ### VL53L0X 介绍 VL53L0X 功能特性： 测量距离 最大 4000mm(4m) 工作刷新率 50Hz 测量角度（正面） 27° 通信接口 I2C 工作电压 2.6V~3.5V (选用红色激光时： 2.8V~3.3V) 工作状态电流 18mA (选用红色激光时： 20mA) 工作温度 40℃ 80℃ 睡眠状态电流 5uA ### SPMOD_TOF 模块引脚定义： 引脚序号 引脚名称 类型 引脚说明 1 GND G 模块电源地 2 IRQ I 模块中断输入引脚，连接至 VL53L0X 的GPIO1 3 NC NC 悬空引脚，无功能 4 SDA I/O 模块 I2C 串行数据引脚 5 3V3 V 模块电源输入正 6 NC NC 悬空引脚，无功能 7 SHT I 模块休眠&激光头控制引脚 #注释 8 SCL I 模块 I2C 串行时钟引脚 > SHT 低电平时，模块休眠 &激光头关闭 <img src \"../../assets/spmod/spmod_tof/back.png\" height \"300\" /> 接线方式: MCU:FUN(IO) SP_RFID : : : : I2C:SDA(IO_7) SDA NC(IO_15) NC NC(IO_20) IRQ NC(IO_21) NC GPIOHS(IO_8) SHT I2C:SCL(IO_6) SCL 2.8~3.5V 3.3V GND GND <img src \"../../assets/spmod/spmod_tof/connection.png\" height \"250\"> ## 使用例程 * 流程 1. 初始化 2. 校准(可选) 3. 读取距离(多种模式可选) ### C 示例： ```c //set io mux fpioa_set_function(VL53L0X_SCL, FUNC_I2C0_SCLK + VL53L0X_I2C_DEVICE * 2); fpioa_set_function(VL53L0X_SDA, FUNC_I2C0_SDA + VL53L0X_I2C_DEVICE * 2); fpioa_set_function(VL53L0X_SHT, FUNC_GPIOHS0 + VL53L0X_SHT); gpiohs_set_drive_mode(VL53L0X_SHT, GPIO_DM_OUTPUT); //i2c init maix_i2c_init(VL53L0X_I2C_DEVICE, 7, VL53L0X_I2C_FREQ_KHZ * 1000); while (vl53l0x_init(&vl53l0x_dev)) { printf(\"VL53L0X init error!!!\\r\\n\"); msleep(500); } printf(\"VL53L0X init success!\\r\\n\"); // adjusting printf(\"VL53L0X adjusting\\r\\n\"); vl53l0x_calibration_test(&vl53l0x_dev); // get distance printf(\"VL53L0X start work\\r\\n\"); vl53l0x_general_test(&vl53l0x_dev); ``` ### MaixPy 例程： ```python fm.register(VL53L0X_SHT, fm.fpioa.GPIOHS0, force True) XSHUT GPIO(GPIO.GPIOHS0, GPIO.OUT) i2c I2C(VL53L0X_I2C_NUM, freq VL53L0X_FREQ, scl VL53L0X_SCL, sda VL53L0X_SDA) # create obj and read distance \t tof VL53L0X(i2c) \t while True: mm tof.read() utime.sleep_ms(100) print(mm) ``` ### 运行环境 语言 开发板 SDK/固件版本 : : : : C MaixCube kendryte standalone sdk v0.5.6 MaixPy MaixCube maixpy v0.5.1 ### 运行结果 * C <img src \"../../assets/spmod/spmod_tof/log_c.png\" height \"200\" /> * MaixPy [None] ## 移植 修改以下参数即可适配其他 K210 开发板. * C ```c // board_config.h #define VL53L0X_I2C_DEVICE 0 // i2c device number #define VL53L0X_I2C_FREQ_KHZ 100 // i2c frequence #define VL53L0X_SCL 6 // scl #define VL53L0X_SDA 7 // sda #define VL53L0X_SHT 8 // sht ``` * MaixPy ```python ################### config ################### VL53L0X_I2C_NUM const(I2C.I2C0) VL53L0X_FREQ const(100000) VL53L0X_SCL const(6) VL53L0X_SDA const(7) VL53L0X_SHT const(8) ############################################## ``` ## 参考设计 SPMOD_TOF 尺寸图： <img src \"../../assets/spmod/spmod_tof/sipeed_spmod_tof.png\" height \"250\" /> ## 资源链接 资源 官网 www.sipeed.com SIPEED 官方淘宝店 [sipeed.taobao.com](sipeed.taobao.com) Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) MaixPy 文档官网 [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed 模型平台 [https://maix.sipeed.com](https://maix.sipeed.com) SDK 相关信息 [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) HDK 相关信息 [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) E mail(技术支持和商业合作) [Support@sipeed.com](mailto:support@sipeed.com) telgram link https://t.me/sipeed MaixPy AI QQ 交流群（六群） 636551897 "},"/hardware/en/modules_spmod/spmod_micarray.html":{"title":"SPMOD - MicArray","content":"# SPMOD MicArray ## 概述 <img src \"../../assets/spmod/spmod_micarray/sp_micarray.png\" width \"\" height \"300\" /> SPMOD_MicArray(麦克风阵列模块)采用 RY3708(DC DC)升压模块 ## SPMOD MicArray 介绍 采用 **Sipeed SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口 将SP MOD转至FPC，利用FPC与麦克风阵列板相连。 板载3.3V至5V升压DC DC (RY3708)，轻松驱动麦克风阵列。 利用Grove接口控制麦克风阵列板上的LED。 需要配合SIPEED MICARRAY一起使用。 模块尺寸：35.0\\*10.0\\*11.2mm ### BOOST DC DC RY3708 模块 介绍 功能特点： 参数 输出电压 5.1V ±0.2V 外部供电电压 \t3.3V ±0.2V 外部供电电流 视麦克风阵列板的工作情况而定，通常小于500mA 工作温度范围 40℃ ~ 85℃ > 1.2MHz固定开关频率,内部4A开关电流限制,高温自动切断,集成80mΩ内部功率MOSFET ### SPMOD_MicArray 模块引脚定义： 引脚序号 引脚名称 类型 引脚说明 1 GND G 模块电源地 2 D2 I Mic_D0 3 D3 I Mic_D2 4 D0 I Mic_WS 5 3V3 V 模块电源输入正 6 D4 I Mic_D1 7 D5 I Mic_D3 8 D1 I Mic_BCK 9 CK I LED控制串行时钟引脚 (相当于I2C SCL) 10 DA I LED控制串行数据引脚 (相当于I2C SDA) <img src \"\" width \"300\" /> ## 使用例程 ```python from Maix import MIC_ARRAY as mic import lcd lcd.init() mic.init() #mic.init(i2s_d0 23, i2s_d1 22, i2s_d2 21, i2s_d3 20, i2s_ws 19, i2s_sclk 18, sk9822_dat 24, sk9822_clk 25) while True: imga mic.get_map() b mic.get_dir(imga) a mic.set_led(b,(0,0,255)) imgb imga.resize(160,160) imgc imgb.to_rainbow(1) a lcd.display(imgc) mic.deinit() ``` > 需要根据自己接板子上的管脚号来进行修改mic.init()中参数 ## 参考设计 SPMOD_MicArray 尺寸图： <img src \"../../assets/spmod/spmod_micarray/sipeed_spmod_micarray.png\" height \"250\" /> ## 资源链接 资源 官网 www.sipeed.com SIPEED 官方淘宝店 [sipeed.taobao.com](sipeed.taobao.com) Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) MaixPy 文档官网 [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed 模型平台 [https://maix.sipeed.com](https://maix.sipeed.com) SDK 相关信息 [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) HDK 相关信息 [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) E mail(技术支持和商业合作) [Support@sipeed.com](mailto:support@sipeed.com) telgram link https://t.me/sipeed MaixPy AI QQ 交流群（六群） 636551897 "},"/hardware/en/modules_spmod/spmod_weather.html":{"title":"SPMOD - Weather","content":"# SPMOD Weather ## 概述 <img src \"../../assets/spmod/spmod_weather/demo.gif\" width \"500\" /> SPMOD Weather (气象站模块), 集成三轴传感器 QMC7983,与温湿度气压传感器 BME280。 ## SPMOD Weather 介绍 特性： 采用 **Sipeed SPMOD** 接口(2*4PIN 2.54mm 排针)，统一 MaixPy 开发板接口 通过SP MOD I2C接口连接 磁性传感器：QMC7983是一个内置灵敏度补偿与NTC的三轴磁性传感器，I2C接口输出（最高频率400KHz），具有出色的动态范围和精度以及超低的功耗 磁感应量程：±30 高斯 温湿度气压传感器：BME280是同时集成了温湿度与气压传感器的数字传感器 模块尺寸：25.0\\*10\\*2.9mm ## 传感器特性： 磁性传感器 QMC7983 工作电压 2.6V~3.6V 工作电流 70uA 休眠电流 <1uA 磁感应量程 ±30 高斯 精度 每 LSB 1mG RMS 噪声 2 mG 对外接口 I2C，默认地址 0x2C,可通过选择电阻调节 温湿度气压传感器 BME280 工作电压 1.71V~3.6V 工作电流 <633uA 休眠电流 <5uA 湿度传感器的关键参数： 响应时间（𝜏63％） 1s 精度公差 ±3％ 相对湿度 磁滞 < 2％ 相对湿度 气压力传感器的关键参数： RMS 噪声 0.2 Pa（等效 到海拔 1.7 厘米） 偏移温度系数 ±1.5 Pa/K（等效温度变化 1°C 时，达到海拔 ±12.6 cm1s） 对外接口 I2C，默认地址 0x76, 可通过选择电阻调节 ### SPMOD_Weather 模块引脚定义： 引脚序号 引脚名称 类型 引脚说明 1 GND G 模块电源地 2 NC NC 悬空引脚，无功能 3 NC NC 悬空引脚，无功能 4 SDA I/O 模块I2C串行数据引脚 5 3V3 V 模块电源输入正 6 NC NC 悬空引脚，无功能 7 NC NC 悬空引脚，无功能 8 SCL I 模块I2C串行时钟引脚 <img src \"../../assets/spmod/spmod_weather/back.png\" width \"300\" /> ## 接线方式 <img src \"../../assets/spmod/spmod_weather/connection.png\" height \"250\"> MCU:FUN(IO) SP_RFID : : : : I2C:SDA(IO_7) SDA NC(IO_15) NC NC(IO_20) IRQ NC(IO_21) NC GPIOHS(IO_8) SHT I2C:SCL(IO_6) SCL 2.8~3.5V 3.3V GND GND ## 使用例程 * 流程 1. 初始化 weather SPWeather(i2c i2c_bus) # create sp_weather while 1: time.sleep_ms(500) print(weather.qmc_read_xyz) # QMC7983 read data print(weather.bme_values) # BME280 read data 2. 校准(可选) 3. 读取距离(多种模式可选) ### C 示例： ```c fpioa_set_function(Weather_SCL, FUNC_I2C0_SCLK + Weather_I2C_DEVICE * 2); // Weather_SCL: 6; fpioa_set_function(Weather_SDA, FUNC_I2C0_SDA + Weather_I2C_DEVICE * 2); // Weather_SDA: 7; maix_i2c_init(Weather_I2C_DEVICE, 7, 400000); // Weather_I2C_DEVICE: 0; rslt qmc_init(); // Magnetic sensor QMC7983 init rslt bme280_init(&dev); // Temperature, humidity and pressure sensors BME280 init stream_sensor_data_normal_mode(&dev); // read and print sensor data ``` ### MaixPy 例程： ```python i2c_bus I2C(I2C.I2C0, freq 100*1000, scl 6, sda 7) # scl: io_6, sda: io_7 weather SPWeather(i2c i2c_bus) # create sp_weather while 1: time.sleep_ms(500) print(weather.qmc_read_xyz) # QMC7983 read data print(weather.bme_values) # BME280 read data ``` ## 运行环境 语言 开发板 SDK/固件版本 : : : : : C MaixCube kendryte standalone sdk v0.5.6 MaixPy MaixCube maixpy v0.5.1 ## 运行结果 * C <img src \"../../assets/spmod/spmod_weather/log_c.png\" height \"200\"> * MaixPy <img src \"../../assets/spmod/spmod_weather/log_py.png\" height \"200\"> ## 参考设计 SPMOD_Weather 尺寸图： <img src \"../../assets/spmod/spmod_weather/sipeed_spmod_weather.png\" height \"250\" /> ## 资源链接 资源 官网 www.sipeed.com SIPEED 官方淘宝店 [sipeed.taobao.com](sipeed.taobao.com) Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) MaixPy 文档官网 [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed 模型平台 [https://maix.sipeed.com](https://maix.sipeed.com) SDK 相关信息 [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) HDK 相关信息 [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) E mail(技术支持和商业合作) [Support@sipeed.com](mailto:support@sipeed.com) telgram link https://t.me/sipeed MaixPy AI QQ 交流群（六群） 636551897 "},"/hardware/en/modules_spmod/spmod_fpc.html":{"title":"SPMOD - FPC","content":"# SPMOD FPC ## 概述 ![](../../assets/spmod/spmod_fpc/sp_fpc.png) SPMOD_FPC(FPC 转接线模块) ## SPMOD FPC 介绍 采用 **Sipeed SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口 作为延长套件，轻松的将SP MOD接口用FPC延长至另一端。您将有更大的自由连接模块构建系统。 提供一对SP MOD至FPC转换板（一公一母），一条FPC排线, 10P规格。 模块尺寸：15.0\\*10.0\\*3.3mm ## 概括 功能特点： 参数 SP MOD至FPC10转换器器(公母一对)\t 用于将SP MOD接口和FPC的双向转换 FPC排线\t 用于连接两个转换器 外部供电电压 视连接的模块而定 外部供电电流 视模块工作情况而定，通常小于1000mA 工作温度 30℃ ~ 85℃ ## 参考设计 SPMOD_FPC 尺寸图： <img src \"../../assets/spmod/spmod_fpc/sipeed_spmod_fpc.png\" height \"250\" /> ## 资源链接 资源 官网 www.sipeed.com SIPEED 官方淘宝店 [sipeed.taobao.com](sipeed.taobao.com) Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) MaixPy 文档官网 [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed 模型平台 [https://maix.sipeed.com](https://maix.sipeed.com) SDK 相关信息 [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) HDK 相关信息 [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) E mail(技术支持和商业合作) [Support@sipeed.com](mailto:support@sipeed.com) telgram link https://t.me/sipeed MaixPy AI QQ 交流群（六群） 636551897 "},"/hardware/en/modules_spmod/spmod_bt.html":{"title":"SPMOD - BT","content":"# SPMOD BT ## 概述 ![](./../../assets/spmod/spmod_bt/sipeed_spmod_BT.jpg) SPMOD BT(蓝牙 模块)采用 YDJ 23。 ## SPMOD BT 介绍 采用 **Sipeed SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口 利用 SP MOD UART 和蓝牙模块通讯 JDY 23蓝牙模块：支持BLE 5.0（兼容 BLE4.0、BLE4.2）。具有UART接口。模块支持AT指令控制。具备超低功耗特性和高可靠性 板载两个状态指示LED，模块状态一目了然 模块尺寸：25.6\\*20.2\\*3.2mm ### JDY 23 蓝牙介绍： 功能特点： 参数 工作频段： 2.4G 发射功率： 4db（最大） 通信接口： UART 工作电压： 1.8V~3.6V 工作温度： 40℃ 80℃ 天线： 板载PCB天线 接收灵敏度： 97dbm 主从支持： 从机 蓝牙版本： BLE 5.0（兼容 BLE4.0、BLE4.2） 唤醒状态电流： 800uA（广播模式） 浅睡状态电流： <50uA (广播模式) 深度睡眠电流： 9uA （无广播） 默认串口波特率： 9600 ### SPMOD_BT 模块引脚定义： 引脚序号 引脚名称 类型 引脚说明 1 GND G 模块电源地 2 AWK I/O 模块休眠唤醒引脚，低有效 3 STA I/O 蓝牙连接状态连接，连接成功时输出高电平 4 RX I 模块UART数据接受引脚，连接上位机TX 5 3V3 V 模块电源输入正 6 NC 悬空引脚，无功能 7 RST I/O 模块复位引脚，低电平有效 8 TX O 模块UART数据发送引脚，连接上位机的RX <img src \"../../assets/spmod/spmod_bt/back.jpg\" height \"250\" /> 接线方式： MCU:FUN(IO) SP_BT : : : : UART:TX(IO_7) RX USRT:RX(IO_6) TX 1.8 3.3V 3.3V GND GND <img src \"../../assets/spmod/spmod_bt/connection.png\" height \"250\"> ### 主要 AT 指令列表： 指令 描述 AT+POWR 显示模块发送功率 AT+RST\t 软复位 AT+MAC\t 显示MAC 地址 AT+NAME 显示广播名 AT+HOSTEN 从模式或 IBEACON 工作模式 AT+IBUUID IBEACON 的 UUID AT+DISC 指令断开连接 AT+SLEEP 睡眠 AT+MTU 设置模块发送的发包数长 *更多AT指令请参考[JDY 23 V2.1.pdf](https://cn.dl.sipeed.com/shareURL/MAIX/HDK/sp_mod/sp_bt)* ## 使用例程 * 流程 1. 发送 AT 指令 2. 接收数据 3. 判断是否设置成功 ### C 示例： ```c // set uart rx/tx func to io_6/7 fpioa_set_function(6, FUNC_UART1_RX + UART_NUM * 2); fpioa_set_function(7, FUNC_UART1_TX + UART_NUM * 2); uart_init(UART_DEVICE_1); uart_configure(UART_DEVICE_1, 9600, 8, UART_STOP_1, UART_PARITY_NONE); //change the name of sp_bt module to MAIXCUBE uart_send_data(UART_NUM, \"AT+NAMEMAIXCUBE\\r\\n\", strlen(\"AT+NAMEMAIXCUBE\\r\\n\")); //send AT order msleep(100); ret uart_receive_data(UART_NUM, rcv_buf, sizeof(rcv_buf)); //receive response if(ret ! 0 && strstr(rcv_buf, \"OK\")) { printk(LOG_COLOR_W \"set name success!\\r\\n\"); } // get the name of sp_bt module uart_send_data(UART_NUM, \"AT+NAME\\r\\n\", strlen(\"AT+NAME\\r\\n\")); //send AT order msleep(100); ret uart_receive_data(UART_NUM, rcv_buf, sizeof(rcv_buf)); //receive response if(ret ! 0 && strstr(rcv_buf, \"NAME\")) { printk(LOG_COLOR_W \"get name success!\\r\\n\"); } ``` ### MaixPy 例程： ```python # set uart rx/tx func to io_6/7 fm.register(6,fm.fpioa.UART1_RX) fm.register(7,fm.fpioa.UART1_TX) uart UART(UART.UART1,9600,8,1,0,timeout 1000, read_buf_len 4096) #change the name of sp_bt module to MAIXCUBE uart.write(\"AT+NAMEMAIXCUBE\\r\\n\") #send AT order time.sleep_ms(100) read_data uart.read() #receive response if read_data: read_str read_data.decode('utf 8') count read_str.count(\"OK\") if count ! 0: uart.write(\"set name success\\r\\n\") # get the name of sp_bt module uart.write(\"AT+NAME\\r\\n\") #send AT order time.sleep_ms(100) read_data uart.read() #receive response if read_data: read_str read_data.decode('utf 8') count read_str.count(\"NAME\") if count ! 0: uart.write(\"get name success\\r\\n\") ``` *注意发送AT指令后一定要加上\\r\\n* ### 运行结果: 使用[BLE Utility](../../tools/bledebugger.apk)连接设备后进行收发测试结果如下: <center class \"third\"> <img src \"../../assets/spmod/spmod_bt/res.png\" height \"250\"/><img src \"../../assets/spmod/spmod_bt/res1.png\" height \"250\"/> </center> ### 运行环境: 语言 开发板 SDK/固件版本 : : : : : C MaixCube kendryte standalone sdk v0.5.6 MaixPy MaixCube maixpy v0.5.1 ## 参考设计 SPMOD_BLE 尺寸图： <img src \"../../assets/spmod/spmod_bt/sipeed_spmod_bt.png\" height \"250\" /> ## 资源链接 资源 官网 www.sipeed.com SIPEED 官方淘宝店 [sipeed.taobao.com](sipeed.taobao.com) Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) MaixPy 文档官网 [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed 模型平台 [https://maixhub.com](https://maixhub.com) SDK 相关信息 [https://dl.sipeed.com/shareURL/MAIX/SDK](https://dl.sipeed.com/shareURL/MAIX/SDK) HDK 相关信息 [https://dl.sipeed.com/shareURL/MAIX/HDK](https://dl.sipeed.com/shareURL/MAIX/HDK) E mail(技术支持和商业合作) [Support@sipeed.com](mailto:support@sipeed.com) telgram link https://t.me/sipeed MaixPy AI QQ 交流群（六群） 636551897 "},"/hardware/en/modules_spmod/spmod_psram.html":{"title":"SPMOD - PSRAM","content":"# SPMOD PSRAM ## 概述 <img src \"../../assets/spmod/spmod_psram/sp_psram.png\" width \"\" height \"300\" /> SPMOD_PSRAM(PSRAM模块)采用 IPS6404L SQ 芯片。 ## SPMOD PSRAM 介绍 采用 **Sipeed SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口 通过SP MOD SPI/QPI接口连接 Pseudo−SRAM芯片：IPS6404L SQ是一个容量为64Mbit，SPI/QPI接口，具有出色的可靠性的和响应时间的伪随机动态存储器芯片。 工作频率：104MHz SPI读取响应时间：30.3ns 模块尺寸：15.0\\*10.0\\*13.3mm ### IPS6404L SQ 迫真静态随机存储器介绍 功能特点： 参数 工作电压 2.7V~3.6V 工作电流 10mA 工作温度 30℃~85℃ 休眠电流 <250μA 工作频率 104Mhz SPI读取响应时间 30.3ns 其他操作响应时间 9.3ns 对外接口 PI/QPI可选，默认SPI ### SPMOD_PSRAM 模块引脚定义： 引脚序号 引脚名称 类型 引脚说明 1 GND G 模块电源地 2 CS I SPI片选引脚 3 D1 I/0 MISO数据引脚，模块数据输出 4 D3 I/O 无功能 (QSPI模式下为IO3) 5 3V3 V 模块电源输入正 6 SCK I SPI串行时钟引脚 7 D0 I/0 MOSI数据引脚，模块数据输入 (QSPI模式下为IO0) 8 D2 I/O 无功能 (QSPI模式下为IO2) <img src \"\" width \"300\" /> ## 使用例程 待更新 ## 参考设计 SPMOD_PSRAM 尺寸图： <img src \"../../assets/spmod/spmod_psram/sipeed_spmod_psram.png\" height \"250\" /> ## 资源链接 资源 官网 www.sipeed.com SIPEED 官方淘宝店 [sipeed.taobao.com](sipeed.taobao.com) Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) MaixPy 文档官网 [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed 模型平台 [https://maix.sipeed.com](https://maix.sipeed.com) SDK 相关信息 [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) HDK 相关信息 [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) E mail(技术支持和商业合作) [Support@sipeed.com](mailto:support@sipeed.com) telgram link https://t.me/sipeed MaixPy AI QQ 交流群（六群） 636551897 "},"/hardware/en/modules_spmod/spmod_eink.html":{"title":"SPMOD - Eink","content":"# SPMOD Eink ## 概述 <img src \"../../assets/spmod/spmod_eink/sp_eink.png\" alt \"XXX\" style \"zoom:40%;\" /> SPMOD_Eink(墨水屏模块)采用 GDEW0154M09 电子墨水屏。 ## SPMOD Eink 介绍 采用 **Sipeed SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口 通过SP MOD SPI接口与屏幕底板相连 电子墨水屏：GDEW0154M09是一款1.54”，SPI接口控制，拥有24P FPC(0.5mm间距)接口的电子墨水屏。拥有超广可视角。 支持 1 bit 黑/白显示 分辨率：200x200 模块尺寸：35*30*3.8mm ### GDEW0154M09 电子墨水屏介绍 功能特点： 参数 工作电压 2.3V~3.6V 工作电流 1~3mA 工作温度范围 40℃~85℃ 休眠电流 <5uA 屏幕大小 1.54英寸 有效显示区域 27.6mm 分辨率 200*200 色彩 1 bit 黑/白显示 对外接口 24P FPC (0.5mm间距) > 内部集成电路包含门缓冲器、源缓冲器，接口，时序控制逻辑，振荡器，DC DC，SRAM，LUT，VCOM ### SPMOD_Eink 模块引脚定义： 引脚序号 引脚名称 类型 引脚说明 1 GND G 模块电源地 2 CS I SPI片选引脚 3 D/C I 数据/命令输入切换引脚 4 RES I 模块复位引脚，低有效 5 3V3 V 模块电源输入正 6 SCK I SPI串行时钟引脚 7 SI I/O MOSI数据引脚，主机输出从机输入 8 BSY O BUSY状态输出引脚 <img src \"../../assets/spmod/spmod_eink/sp_eink_back.png\" height \"300\" /> 接线方式： MCU:FUN(IO) SP_Eink : : : : GPIOHS(IO_7) RES SPIOHS(IO_15) D/C SPIOHS(IO_20) CS SPI:SCK(IO_21) SCK SPI:MOSI(IO_8) SI GPIOHS(IO_6) BSY 2.3 3.6V 3.3V GND GND <img src \"../../assets/spmod/spmod_eink/connection.png\" height \"250\"> ### 基本指令列表 指令 功能 : : : : 0x10 开始发送黑白图像 0x13 开始发送红白图像 0x12 刷新图像到屏幕 *更多指令信息参考[GDEW0154M09.pdf](https://dl.sipeed.com/shareURL/MAIX/HDK/Spmod_CN/sp_eink)* ## 使用例程 * 流程 1. 初始化配置 2. 创建 Image 并填充 3. 发送图像并刷新 ### C 示例： ```c spi_init(1, SPI_WORK_MODE_0, SPI_FF_STANDARD, DATALENGTH, 0); fpioa_set_function(SPI_Eink_CS_PIN_NUM, FUNC_SPI1_SS0); // SPI_Eink_CS_PIN_NUM: 20; fpioa_set_function(SPI_Eink_SCK_PIN_NUM, FUNC_SPI1_SCLK); // SPI_Eink_SCK_PIN_NUM: 21; fpioa_set_function(SPI_Eink_MOSI_PIN_NUM, FUNC_SPI1_D0); // SPI_Eink_MOSI_PIN_NUM: 8; fpioa_set_function(SPI_Eink_DC_PIN_NUM, FUNC_GPIOHS0 + SPI_Eink_DC_GPIO_NUM); // SPI_Eink_DC_PIN_NUM: 21; fpioa_set_function(SPI_Eink_RST_PIN_NUM, FUNC_GPIOHS0 + SPI_Eink_RST_GPIO_NUM); // SPI_Eink_RST_PIN_NUM: 7; fpioa_set_function(SPI_Eink_BL_PIN_NUM, FUNC_GPIOHS0 + SPI_Eink_BL_GPIO_NUM); // SPI_Eink_BL_PIN_NUM: 6; gpiohs_set_drive_mode(SPI_Eink_DC_GPIO_NUM, GPIO_DM_OUTPUT); gpiohs_set_drive_mode(SPI_Eink_RST_GPIO_NUM, GPIO_DM_OUTPUT); gpiohs_set_pin(SPI_Eink_DC_GPIO_NUM, GPIO_PV_HIGH); gpiohs_set_pin(SPI_Eink_RST_GPIO_NUM, GPIO_PV_HIGH); gpiohs_set_drive_mode(SPI_Eink_BL_PIN_NUM, GPIO_DM_INPUT_PULL_UP); gpiohs_set_pin_edge(SPI_Eink_BL_PIN_NUM, GPIO_PE_BOTH); EPD_DisplayInit(); //EPD init //Paint initialization Paint_NewImage(BlackImage, EPD_WIDTH, EPD_HEIGHT, 270, WHITE); //Set screen size and display orientation Paint_SelectImage(BlackImage); //Set the virtual canvas data storage location Paint_Clear(WHITE); //clear paint Paint_DrawString_EN(0, 0, \"sipeed\", &Font8, WHITE, BLACK); //5*8 Paint_DrawString_EN(0, 10, \"sipeed\", &Font12, WHITE, BLACK); //7*12 Paint_DrawString_EN(0, 25, \"sipeed\", &Font16, WHITE, BLACK); //11*16 Paint_DrawString_EN(0, 45, \"sipeed\", &Font20, WHITE, BLACK); //14*20 Paint_DrawString_EN(0, 80, \"sipeed\", &Font24, WHITE, BLACK); //17*24 EPD_FullDisplay(BlackImage, BlackImage, 0); //display image ``` ### MaixPy 例程： ```python spi1 SPI(SPI.SPI1, mode SPI.MODE_MASTER, baudrate 600 * 1000, polarity 0, phase 0, bits 8, firstbit SPI.MSB, sck 21, mosi 8) fm.register(20, fm.fpioa.GPIOHS20, force True) # SPI_Eink_SS_PIN_NUM: 20; fm.register(15, fm.fpioa.GPIOHS15, force True) # SPI_Eink_DC_PIN_NUM: 15; fm.register(6, fm.fpioa.GPIOHS6, force True) # SPI_Eink_BUSY_PIN_NUM: 6; fm.register(7, fm.fpioa.GPIOHS7, force True) # SPI_Eink_RST_PIN_NUM: 7; cs GPIO(GPIO.GPIOHS20, GPIO.OUT) dc GPIO(GPIO.GPIOHS15, GPIO.OUT) busy GPIO(GPIO.GPIOHS6, GPIO.IN, GPIO.PULL_DOWN) rst GPIO(GPIO.GPIOHS7, GPIO.OUT) epd SPEink(spi1, cs, dc, rst, busy, SPEink_WIDTH, SPEink_HEIGHT, SPEink_ROTATION) epd.init() img image.Image() img img.resize(200, 200) img.draw_line(0, 0, 100, 100) epd.display(img) ``` ### 运行环境 语言 开发板 SDK/固件版本 : : : : : : C MaixCube kendryte standalone sdk v0.5.6 MaixPy MaixCube maixpy v0.5.1 *MaixPy固件建议自行从最新源码编译* ### 运行结果 * C <img src \"../../assets/spmod/spmod_eink/sp_eink_c.png\" height \"250\" /> * MaixPy <img src \"../../assets/spmod/spmod_eink/sp_eink_py.png\" height \"250\" /> ### 移植 修改以下参数即可 * C ```c // board_config.h #define SPI_INDEX 1 #define SPI_SCLK_RATE 600 * 1000 #define SPI_CHIP_SELECT_NSS 0 //SPI_CHIP_SELECT_0 #define SPI_Eink_CS_PIN_NUM 20 #define SPI_Eink_SCK_PIN_NUM 21 #define SPI_Eink_MOSI_PIN_NUM 8 #define SPI_Eink_DC_PIN_NUM 15 #define SPI_Eink_BL_PIN_NUM 6 #define SPI_Eink_RST_PIN_NUM 7 #define SPI_Eink_DC_GPIO_NUM 15 #define SPI_Eink_BL_GPIO_NUM 6 #define SPI_Eink_RST_GPIO_NUM 7 ``` * MaixPy ```python ################### config ################### SPI_Eink_NUM SPI.SPI1 SPI_Eink_DC_PIN_NUM const(15) SPI_Eink_BUSY_PIN_NUM const(6) SPI_Eink_RST_PIN_NUM const(7) SPI_Eink_CS_PIN_NUM const(20) SPI_Eink_SCK_PIN_NUM const(21) SPI_Eink_MOSI_PIN_NUM const(8) SPI_Eink_FREQ_KHZ const(600) ############################################## ``` ## 参考设计 SPMOD_Eink 尺寸图： <img src \"../../assets/spmod/spmod_eink/sipeed_spmod_eink.png\" height \"250\" /> ## 资源链接 资源 官网 www.sipeed.com SIPEED 官方淘宝店 [sipeed.taobao.com](sipeed.taobao.com) Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) MaixPy 文档官网 [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed 模型平台 [https://maixhub.com](https://maixhub.com) SDK 相关信息 [https://dl.sipeed.com/shareURL/MAIX/SDK](https://dl.sipeed.com/shareURL/MAIX/SDK) HDK 相关信息 [https://dl.sipeed.com/shareURL/MAIX/HDK](https://dl.sipeed.com/shareURL/MAIX/HDK) E mail(技术支持和商业合作) [Support@sipeed.com](mailto:support@sipeed.com) telgram link https://t.me/sipeed MaixPy AI QQ 交流群 878189804 "},"/hardware/en/modules_spmod/spmod_servo.html":{"title":"SPMOD - SERVO","content":"# SPMOD SERVO ## 概述 <img src \"../../assets/spmod/spmod_servo/sp_servo.png\" width \"\" height \"300\" /> SPMOD_SERVO (SERVO模块)。 ## SPMOD SERVO 介绍 采用 **Sipeed SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口 利用SP MOD控制多达6个独立的PWM 9g舵机 舵机接口采用3P 2.54间距排针 独立的外部5V供电，通过USB Type C或者KF螺钉接线柱，不会从SP MOD取电 板载电源指示灯，通电状态一目了然 模块尺寸：35.0\\*20\\*1.6mm 功能特点： 参数 PWM 9g舵机接口*6 外接4.8 6V电源的情况下，可连接6个PWM 9g舵机并分别控制 外部供电电压 4.8V 6.0V 外部供电电流 视模块工作情况而定，通常小于1500mA 工作温度 40℃ ~ 85℃ ### SPMOD_SERVO 模块引脚定义： <img src \"../../assets/spmod/spmod_servo/sp_servo_pin.png\" width \"500\" /> ## 使用例程 待更新 ## 参考设计 SPMOD_SERVO 尺寸图： <img src \"../../assets/spmod/spmod_servo/sipeed_spmod_servo.png\" height \"250\" /> ## 资源链接 资源 官网 www.sipeed.com SIPEED 官方淘宝店 [sipeed.taobao.com](sipeed.taobao.com) Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) MaixPy 文档官网 [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed 模型平台 [https://maix.sipeed.com](https://maix.sipeed.com) SDK 相关信息 [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) HDK 相关信息 [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) E mail(技术支持和商业合作) [Support@sipeed.com](mailto:support@sipeed.com) telgram link https://t.me/sipeed MaixPy AI QQ 交流群（六群） 636551897 "},"/hardware/en/modules_spmod/spmod_template.html":{"title":"SPMOD - XXX","content":"# SPMOD XXX ## 概述 <img src \"../../assets/spmod/sipeed_spmod_xxx.jpg\" alt \"XXX\" style \"zoom:60%;\" /> SPMOD_XX(XX 模块)采用XXX。 ## SPMOD XXX 介绍 采用 **Sipeed SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口 XXX 模块尺寸：X.XX\\*XX.X\\*XX.Xmm ### XXXX 介绍 XXXXX XXXX XXXX 功能特点： ### SPMOD_XXX 模块引脚定义： 引脚序号 引脚名称 类型 引脚说明 1 GND G XX 2 XXX I XX 3 MISO O XX 4 XXX I XX 5 XXX O XX 6 SCK I XX 7 MOSI I XX 8 VCC G XX ## 使用例程 MaixPy 例程： > NOTE: 待更新 STM32 例程： ## 参考设计 SPMOD_XXX 原理图： ## 资源链接 资源 官网 www.sipeed.com SIPEED 官方淘宝店 [sipeed.taobao.com](sipeed.taobao.com) Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) MaixPy 文档官网 [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed 模型平台 [https://maix.sipeed.com](https://maix.sipeed.com) SDK 相关信息 [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) HDK 相关信息 [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) E mail(技术支持和商业合作) [Support@sipeed.com](mailto:support@sipeed.com) telgram link https://t.me/sipeed MaixPy AI QQ 交流群（六群） 636551897 "},"/hardware/en/modules_spmod/spmod_grove.html":{"title":"SPMOD - Grove","content":"# SPMOD Grove ## 概述 <img src \"../../assets/spmod/spmod_grove/sp_grove.png\" width \"\" height \"400\" /> SPMOD_Grove(GROVE 模块) ## SPMOD Grove 介绍 采用 **Sipeed SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口 作为拓展版，提供三个标准的Grove接口。方便您将Grove模块与SP MOD一起使用。 每条数据线均提供外部上拉。 提供高达1000mA的供电能力。 模块尺寸：35.0\\*10.0\\*2.1mm ## 概括 功能特点： 参数 Grove 连接器 (HY 2.0mm 4P连接器)*3 用于连接Grove线缆 排针4*2，间距2.54mm *1 用于和SP MOD接口连接 外部供电电压 视连接的模块而定 外部供电电流 视模块工作情况而定，通常小于1000mA 工作温度 30℃ ~ 85℃ ## 参考设计 SPMOD_Grove 尺寸图： <img src \"../../assets/spmod/spmod_grove/sipeed_spmod_grove.png\" height \"250\" /> ## 资源链接 资源 官网 www.sipeed.com SIPEED 官方淘宝店 [sipeed.taobao.com](sipeed.taobao.com) Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) MaixPy 文档官网 [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed 模型平台 [https://maix.sipeed.com](https://maix.sipeed.com) SDK 相关信息 [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) HDK 相关信息 [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) E mail(技术支持和商业合作) [Support@sipeed.com](mailto:support@sipeed.com) telgram link https://t.me/sipeed MaixPy AI QQ 交流群（六群） 636551897 "},"/hardware/en/modules_spmod/spmod_ethernet.html":{"title":"SPMOD - Ethernet","content":"# SPMOD Ethernet ## 概述 ![](../../assets/spmod/spmod_ethernet/sp_ethernet.png) SPMOD_Ethernet(网络扩展模块)采用 W5500 以太网主控芯片。 ## SPMOD Ethernet 介绍 采用 **Sipeed SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口 通过SP MOD SPI接口连接 主控芯片：W5500 是一款集成全硬件 TCP/IP 协议栈的嵌入式以太网控制器。 SPI 速率理论上可达80MHz \t集成以太网数据链路层（MAC）和10BaseT/100BaseTX 以太网物理层（PHY），支持自动协商（10/100 Based全双工/半双工） 模块尺寸：35.76\\*19.74\\*8.7mm ### W5500 以太网主控芯片介绍 功能特点： 参数 工作电压 2.97V~3.63V 工作电流 <132mA 工作温度 40℃~85℃ 休眠电流 <15mA SPI 时钟 最高80MHz 全硬件TCP/IP协议栈 支持TCP、UDP、ICMP、IPv4、ARP、IGMP、PPPoE协议 > 支持8路独立硬件 Socket 同时通信 ,通信效率互不影响 ,内部32K字节收发缓存供TCP/IP包处理 ,支持掉电模式、网络唤醒 ,集成 10BaseT / 100Base T 以太网 PHY ,支持自动协商（全/半双工，10M/100M) ,不支持自动极性变换MDIX ### SPMOD_Ethernet 模块引脚定义： 引脚序号 引脚名称 类型 引脚说明 1 GND G 模块电源地 2 CS I SPI片选引脚 3 SO I/0 MISO数据引脚，主机输入从机输出 4 NC NC 悬空引脚，无功能 5 3V3 V 模块电源输入正 6 SCK I SPI串行时钟引脚 7 SI I/0 MOSI数据引脚，主机输出从机输入 8 NC NC 悬空引脚，无功能 <img src \"\" width \"300\" /> ## 使用例程 待更新 ## 参考设计 SPMOD_Ethernet 尺寸图： <img src \"../../assets/spmod/spmod_ethernet/sipeed_spmod_ethernet.png\" height \"250\" /> ## 资源链接 资源 官网 www.sipeed.com SIPEED 官方淘宝店 [sipeed.taobao.com](sipeed.taobao.com) Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) MaixPy 文档官网 [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed 模型平台 [https://maix.sipeed.com](https://maix.sipeed.com) SDK 相关信息 [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) HDK 相关信息 [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) E mail(技术支持和商业合作) [Support@sipeed.com](mailto:support@sipeed.com) telgram link https://t.me/sipeed MaixPy AI QQ 交流群（六群） 636551897 "},"/hardware/en/modules_spmod/spmod_extender.html":{"title":"SPMOD - Extender","content":"# SPMOD Extender ## 概述 ![](../../assets/spmod/spmod_extender/sp_extender.png) SPMOD_Extender(8PIN扩展模块) ## SPMOD Extender 介绍 采用 **Sipeed SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口 利用SP Extender将SP MOD一分为四，包含三个相连的2线接口（连接至SP MOD的D0和D1）和一个单独的四线接口（连接至SP MOD的D2 D5） 模块尺寸：35.0\\*20.0\\*1.6mm ## 概括 功能特点： 参数 两线SP MOD接口*3 连接至SP MOD的D0和D1，可用作UART (最多连接一个设备)或I2C（最多连接三个设备）或者两个独立的GPIO 四线SP MOD接口 连接至SP MOD的D2 D5，通常用作SPI接口，也可用作四个杜立的GPIO接口 外部供电电压 视连接的模块而定 外部供电电流 视模块工作情况而定，通常小于1000mA 工作温度 40℃ ~ 85℃ ## 参考设计 SPMOD_Extender 尺寸图： <img src \"../../assets/spmod/spmod_extender/sipeed_spmod_extender.png\" height \"250\" /> ## 资源链接 资源 官网 www.sipeed.com SIPEED 官方淘宝店 [sipeed.taobao.com](sipeed.taobao.com) Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) MaixPy 文档官网 [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed 模型平台 [https://maix.sipeed.com](https://maix.sipeed.com) SDK 相关信息 [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) HDK 相关信息 [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) E mail(技术支持和商业合作) [Support@sipeed.com](mailto:support@sipeed.com) telgram link https://t.me/sipeed MaixPy AI QQ 交流群（六群） 636551897 "},"/hardware/en/modules_spmod/spmod_rfid.html":{"title":"SPMOD - RFID","content":"# SPMOD RFID ## 概述 <img src \"../../assets/spmod/spmod_rfid/sp_rfid.png\" style \"padding right:100px;\" width \"\" height \"300\" /> SPMOD_RFID (NFC 模块)采用复旦微电子 FM17510 高度集成的非接触式（13Mhz）的读写芯片。 ## SPMOD RFID 介绍 采用 **Sipeed SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口 利用SP MOD SPI和RFID模块通讯 64Byte收发缓冲FIFO RIFC IC 为 FM17510。 模块尺寸：25.0\\*20.1\\*6.2mm ### FM17510 介绍 FM17510 是一款高度集成的工作在 13.56MHz 下的非接触读写器芯片，支持符合 ISO/IEC 14443 TypeA 协议的非接触读写器模式。 同时提供了低功耗的外部卡片侦测功能，方便电池供电、需要低功耗工作、并且需要实时处理任意 时刻会进入射频场的外部卡片的读写器设备。 FM17510 具有低电压、低功耗、 单端驱动等特点。适用于低功耗、低电压、低成本要求的非接触读。 FM1750XX 在软硬件层面上兼容 MFRC552，支持工作模式： FM17510 功能特点： 支持 ISO/IEC 14443 TypeA 读写器模式 读写器模式支持 M1 加密算法 ISO14443 TYPEA 支持通讯速率 106kbps， 212kbps， 424kbps 支持 SPI 串行接口，最高 10Mbps Host 接口独立电源供电，电压范围 2.2~3.6V 工作温度范围 40℃ ~ 85℃ 64Byte 收发缓冲 FIFO 中断输出模式灵活可配 多种低功耗模式 : Soft powerdown模式 , Hard powerdown 模式, Deep powerdown 模式（典型值 1uA） 支持低功耗外部卡片侦测功能 可编程定时器 内置振荡电路外接 27.12MHz 晶振 宽电压工作范围 2.2V~3.6V 内置 CRC 协处理器 可编程 I/O 引脚 ### SPMOD_RFID 模块引脚定义： 引脚序号 引脚名称 类型 引脚说明 Note 1 GND G 模块电源地 2 CS I SPI片选引脚 3 SO I/O MISO数据引脚，主机输入从机输出 4 NPD I 复位/休眠控制引脚 5 3V3 V 模块电源输入正 6 SCK I SPI串行时钟引脚 7 SI I/O MOSI数据引脚，主机输出从机输入 8 IRQ O 模块中断输出引脚 > 当 NPD 引脚为低电平时，模块进入休眠状态；当 NPD 引脚输入一个上升沿时，模块复位。 <img src \"../../assets/spmod/spmod_rfid/back.png\" height \"300\" /> 接线方式: MCU:FUN(IO) SP_RFID : : : : NC(IO_7) NPD SPI:MISO(IO_15) SO SPI:SS0(IO_20) CS SPI:SCK(IO_21) SCK SPI:MOSI(IO_8) SI NC(IO_6) IRQ 2.2~3.6V 3.3V GND GND <img src \"../../assets/spmod/spmod_rfid/connection.png\" height \"250\"> ## 使用例程 * 流程 1. 初始化 2. 扫描并绑定卡片 3. 读写数据 ### C 示例： ```c fpioa_set_function(RFID_CS_PIN, FUNC_GPIOHS0 + RFID_CS_HSNUM); // RFID_CS_PIN: 20; fpioa_set_function(RFID_CK_PIN, FUNC_GPIOHS0 + RFID_CK_HSNUM); // RFID_CK_PIN: 21; fpioa_set_function(RFID_MO_PIN, FUNC_GPIOHS0 + RFID_MO_HSNUM); // RFID_MO_PIN: 8; fpioa_set_function(RFID_MI_PIN, FUNC_GPIOHS0 + RFID_MI_HSNUM); // RFID_MI_PIN: 15; gpiohs_set_drive_mode(spi_io_cfg.hs_cs, GPIO_DM_OUTPUT); gpiohs_set_drive_mode(spi_io_cfg.hs_clk, GPIO_DM_OUTPUT); gpiohs_set_drive_mode(spi_io_cfg.hs_mosi, GPIO_DM_OUTPUT); gpiohs_set_drive_mode(spi_io_cfg.hs_miso, GPIO_DM_INPUT); // detected card PcdRequest(0x52, type) // auth and bind... // read or write 16 bytes data from sector 0x11 PcdWrite(0x11, w_buf) PcdRead(0x11, &r_buf) ``` ### MaixPy 例程： ```python # 20: CS_NUM; fm.register(20, fm.fpioa.GPIOHS20, force True) # set gpiohs work mode to output mode cs GPIO(GPIO.GPIOHS20, GPIO.OUT) # RFID_SCK: 21; RFID_SI:8; RFID_SO: 15; spi1 SPI(SPI.SPI1, mode SPI.MODE_MASTER, baudrate 600 * 1000, polarity 0, phase 0, bits 8, firstbit SPI.MSB, sck 21, mosi 8, miso 15) # Create an object of the class MFRC522 MIFAREReader MFRC522(spi1, cs) # detected and auth, bind... # read or write 16 bytes data from sector 0x11 MIFAREReader.MFRC522_Write(0x11, data) MIFAREReader.MFRC522_Read(0x11) ``` ### 运行环境 语言 开发板 SDK/固件版本 : : : : C MaixCube kendryte standalone sdk v0.5.6 MaixPy MaixCube maixpy v0.5.1 ### 运行结果 * C <img src \"../../assets/spmod/spmod_rfid/c_log.png\" height \"200\" /> * MaixPy <img src \"../../assets/spmod/spmod_rfid/maixpy_log.png\" height \"200\" /> ### 移植 修改以下参数即可适配其他 K210 开发板. * C ```c // board_config.h #define RFID_CS_PIN (20) #define RFID_CK_PIN (21) #define RFID_MO_PIN (8) #define RFID_MI_PIN (15) #define RFID_CS_HSNUM (20) #define RFID_CK_HSNUM (21) #define RFID_MO_HSNUM (8) #define RFID_MI_HSNUM (15) ``` * MaixPy ```python ################### config ################### CS_NUM const(20) SPI_FREQ_KHZ const(600) SPI_SCK const(21) SPI_MOSI const(8) SPI_MISO const(15) ############################################# ``` ## 参考设计 SPMOD_RFID 尺寸图： <img src \"../../assets/spmod/spmod_rfid/sipeed_spmod_rfid.png\" height \"250\" /> ## 资源链接 资源 官网 www.sipeed.com SIPEED 官方淘宝店 [sipeed.taobao.com](sipeed.taobao.com) Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) MaixPy 文档官网 [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed 模型平台 [https://maix.sipeed.com](https://maix.sipeed.com) SDK 相关信息 [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) HDK 相关信息 [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) E mail(技术支持和商业合作) [Support@sipeed.com](mailto:support@sipeed.com) telgram link https://t.me/sipeed MaixPy AI QQ 交流群（六群） 636551897 "},"/hardware/en/lichee/index.html":{"title":"Lichee Pi","content":"# Lichee Pi ## Lichee Zero <div align \"center\"> <a href \"./Zero/Zero.html\" ><img src \"./assets/Zero/Zero_1.png\" width 400></a> </div> ## Lichee Nano <div align \"center\"> <a href \"./Nano/Nano.html\" ><img src \"./assets/Nano/Nano_2.png\" width 400></a> </div> ## Lichee Zero Plus <div align \"center\"> <a href \"./ZeroPlus/ZeroPlus.html\"><img src \"./assets/Zero Plus/Plus_1.jpg\" width 400></a> </div> ## Lichee RV <div align \"center\"> <a href \"./RV/RV.html\"><img src \"./assets/RV/D1 4.png\" width 400></a> </div>"},"/hardware/en/lichee/RV/86_panel.html":{"title":"Lichee 86 Panel","content":"# Lichee 86 Panel ## Introduction Lichee RV 86 Panel is a development kit designed for smart home central control sence. it's equipped with LicheeRV Core board (ALlwinner D1 chip with 512MB ddr3), 4 inch touch IPS screen, Wifi+BT module, Ethernet, two digital silicon mic and GPIO expansion interface. For software it can use Linux OS (Openwrt or Debian) and Ali WATF(WAFT is a high performance application research framework for aiot based on WebAssembly and their own rendering engine) ![Basic board](./../assets/RV/86_2.png) ## Parameters Item Value Core board Sipeed LicheeRV Nezha compute bar Display Default Bundle for 4 inch 480\\*480 standard definition IPS capacitive touch screen <br> Optional upgrade to 4 inch 720\\*720 high definition IPS capacitive touch screen<br>Reserver 8 inch 1280\\*800 IPS capacitive touch screen interface Audio Onboard 1W mini speaker, Dual digital silicon microphone Network XR829 WIFI+BT wireless module <br>RTL8201F 100M Ethernet <br> Reserved RJ45 ethernet pad USB USB C OTG interface on core board <br> Reserved USB C HOST and USB uart interface Power Support 5V,12V power supply (Onboard DC DC ) Extension pins Double 2x8Pin 2.54mm Pin headers，Reserved FPCIO Shell Optional 86 panel 3D print shell，download 3D file [here](https://dl.sipeed.com/shareURL/LICHEE/D1/Lichee_RV_86_panel/6_Shell_3D) source Dimension 86x86mm Usage situations Smart home center control unit，WAFT UI evaluation Development framework Support WAFT (WebAssembly Framework For Things）runtime Operating system Support OpenWRT and Debian [Development resource](./user.html#bsp sdk develpoment) Provide docker development image of the original SDK ![Functions map](./../assets/RV/86_pin.png) ## Related links [Download center](https://dl.sipeed.com/shareURL/LICHEE/D1/Lichee_RV_86_panel) [Burn image](./flash.html) [Basic usage](./user.html) ## Support Email to support@sipeed.com for business cooperation or leave messge in this page for help."},"/hardware/en/lichee/RV/RV.html":{"title":"Lichee RV - Nezha CM","content":"# Lichee RV Nezha CM > Edit on 2022.05.13 ## Overview Lichee RV Nezha CM is a compute module with modular design, equipped with Allwinner D1 chip (based on T Head XuanTie C906 core), 512MB DDR3 RAM. It can boot from TF card or SD NAND, uses two sets of M.2 b key 67 pin connectors to route all IO, making it convient for wide use and easy to replace. ![](./../assets/RV/D1 4.jpg) ![](./../assets/RV/D1 back.jpg) ## Specifications Item Value CPU Allwinner D1 chip (Based on T Head XuanTie C906 core) up to 1GHZ RAM 16bits 512MB DDR3，Up to 792MHz Storge Onboard TF card slot，can use tf card for storing,1TB storage capacity have been tested ok <br>Reserve SD NAND pads (Conflict with 8pins lcd interface. using for business custom made ) Display **MIPI**：4 lane MIPI DSI <br>**RGB**：RGB888 interface(partially multiplexed with DSI) <br>**MCU** : I80 interface<br>**SPI**：Onboard 8pins SPI screen interface，can be used for 1.14 inch screen Audio Analog audio headphone output(HPOUT); <br>Analog audio line input(LINEIN); <br>Digital Audio (I2S/SPDIF); <br>Analog microphone interface(MIC3);<br>Digital microphone interface(DMIC);<br>All above pin out to connecting finger Ethernet Pin out RMII/RGMII to connecting finger (Multiplexed with some GPIOs) USB Onboard TYPE C USB OTG interface(USB0) <br>USB HOST pins out to connecting finger(USB1) GPIO Other GPIOs all pin out to connecting finger Key • FEL key (Enter to download mode) Led • A power led <br>• A user led (active high) PCB 4 layers Fixed<br> way Connect the core board and bottom board by two sets of M.2B connecting finger and fasten with a M2 screw Development lanuguge C/C++, Python, Golang, etc... System Mirrors Tina Linux (Based on OpenWRT 14.07), Debian, YoC (RTOS ) ![](./../assets/RV/D1 pin.png) ## Comparison between the bottom board Item Lichee RV Dock Lichee RV Panel : : SOC Allwinner D1（XuanTie C906 RISC V） Allwinner D1（XuanTie C906 RISC V） Ram 1GByte 1GByte Wireless network Choosable: <br> 2.4G WIFI+BT<br> none (You can weld other WiFi modules but need debug by yourself) 2.4G WIFI+BT Wired network None Support 100M Ethernet Video out HDMI connector; <br>SPI screen interface; <br>Screen convert board can be used for：<br> common RGB screen connector(include TP pins)(support 4.3inch/5.0inch screen we sell<br> MIPI screen interface connector(compatible with 8 inch screen of NeZha development board) sRGB screen interface connector(include TP pins)(support standard 4 inch ips screen with TP )<br> MIPI screen interface connector(compatible with 8 inch screen of NeZha development board) USB port One USB OTG(Type C port on core board) <br> One USB Host(USB A port on bottom board) One USB OTG(Type C port on core board) <br> One USB Host(USB C port on bottom board) Expand interface Support microphone arrays <br>Most GPIOs are connected with 2x20P pin pads Part GPIOs are connected to 2x20P pin pads出 Audio Onboard 3W Audio amplifier <br> Onboard electret microphone circuit Onboard 3W Audio amplifier <br> Onboard 2 MEMS digital microphones Key One FEL key(Enter to download mode)<br>One RST key(Reset)<br>One user key One FEL key(Enter to download mode) LED One power led<br>One 2812 RGB LED One power led Shell None 3D print shell Size 65.0mm x 40.0mm 86.0mm x 86.0mm ## Connect 1.14 inch screen ![](./../assets/RV/D1 1.png) ![](./../assets/RV/D1 2.png) ![](./../assets/RV/D1 3.png) > Up to now 1.14 inch screen is not able to display and need to wait for updating ## Burn system [Flash tutorial](./flash.html) ## Notice The USB TYPE C connector of the core board uses the CC pin as an automatic OTG identification pin, so it conflicts with the identification when using the USB C to C data line, and it only works with the USB A to C data line. There are two ways to solve this problem and the steps are as follows Type C work mode OTG (Factory default product) CC identification(Need to change hardware) : : : : Resistance R30 and resistance R31 Blank weld 5.1K 1% 0402 resistance Diode D3 and D4 weld 4148 diode Blank Compatible with C to C cables no yes Compatible with A to C cables yes yes Whether supports automatic OTG switching yes no To use C to C data line, a physical modification to the device is required to be made around the type c connector in order to use the corresponding CC identification mode. A manual switch to Host mode using OTG cables will be required from then on should you wish to attach the external USB devices, as automatic OTG switching is disabled. If you want to use USB C to C data line, you need do two things： > ① add two 5.1K 1% 0402 Resistances at R30 and R31 ，② Remove Diode ![](./../assets/RV/other.png) ![](./../assets/RV/D1Core2.png) ## Download Download the Debian system image from Mega netdisk: <https://mega.nz/folder/lx4CyZBA#PiFhY7oSVQ3gp2ZZ_AnwYA> If you want to build your own custom image, you can visit the BSP SDK in the following link. [BSP SDK](./user.html#BSP SDK development)"},"/hardware/en/lichee/RV/Dock.html":{"title":"Lichee Dock","content":"# Lichee Dock ## Introduction Lichee RV Dock is a RISC V Linux development kits with high integration, small size and **affordable price** designed for opensource developer. It's equipped with **HDMI interface** and it supports many screen by its screen convert board. It's also equipped with many peripherals, including a UAB A port, **2.4G Wifi BT module**, an analog microphone and a speaker jack interface. These means user can use it to develop or test linux application just by display device and input device like mouse and keyboard, which shortens developer's research and development time. ![Outlook](./../assets/RV/RV Dock.jpg) ## Parameters Item Value Core boardNezha compute bar Display port Onboard HDMI output interface; <br>RGB and MIPI screen interface connect to 2x20 Pins Header and <br> (We provide this screen converter board t) Network Onboard 2.4G WIFI+BT module, 2.4G Patch antenna and IPEX connector USB Onboard USB type A host Audio On board speaker driver circuit (supports 4Ω 3W speakers) and speaker; connector<br>On board electrical microphone circuit Memory Reserved a SOP8 pad, and the connection protocol is the SPI; <br> Consult for the customer service staff for more information Extra connector Onborad 30P FPC connector，supports our Mic Array R6 microphone array GPIO connector Reserved 2x20P 2.54mm pads(Default welding pin headers) LED An onboard WS2812 RGB LED<br> An onboard power LED KEY An onboard reset key<br>An user's key ## Links [Datasheet](https://dl.sipeed.com/shareURL/LICHEE/D1/Lichee_RV Dock/1_Datasheet) [Schematic](https://dl.sipeed.com/shareURL/LICHEE/D1/Lichee_RV Dock/2_Schematic) [Bitmap](https://dl.sipeed.com/shareURL/LICHEE/D1/Lichee_RV Dock/3_Bitmap) [Dimensions](https://dl.sipeed.com/shareURL/LICHEE/D1/Lichee_RV Dock/4_Dimensions) [3D file](https://dl.sipeed.com/shareURL/LICHEE/D1/Lichee_RV Dock/5_3D) ## Support Email to support@sipeed.com for business cooperation or leave messge in this page for help."},"/hardware/en/lichee/RV/problems.html":{"title":"Questions&Answers","content":" title: Questions&Answers keywords: debian, Rv, Problam, apt, img, sipeed ## Apt trouble When execute apt command in debian system it may show error as follows > GPG error: http://ftp.ports.debian.org/debian ports sid InRelease: The following signatures couldn't be verified because the public key is not available: NO_PUBKEY E852514F5DF312F6 This means built in key expires and need updating manually, here are two ways to download key. Doanload from web page：https://packages.debian.org/sid/all/debian ports archive keyring/download wget : `wget http://ftp.cn.debian.org/debian/pool/main/d/debian ports archive keyring/debian ports archive keyring_2022.02.15_all.deb` Copy downloaded key (usr scp or lrzsz tool) into LicheeRV board, then run following command to update key: > sudo dpkg i debian ports archive keyring_2022.02.15_all.deb Then run `sudo apt get update` to update apt. ## Not work Make sure you choose as what is shown below when burnning card by yourself <details> <summary><font color \"#4F84FF\">Click to see burn requirement</font></summary> <img src \"./../assets/RV/flash.png\"> </details> We can use adb shell to communicate with computer by **Tina OS** Just connect the core board with computer for communication. ![](./../../../zh/lichee/assets/RV/adb shell.png) **Debian OS** only can use uart for communication with computer. ## 86 panel screen no display/ display wrong Here we need use corresopnding fex file to overwrite the board level configuration by using following command in linux system Download fex file here https://dl.sipeed.com/shareURL/LICHEE/D1/Lichee_RV/SDK/board Overwrite command: ```bash sudo dd if boot_package_XXX.fex of /dev/sdX bs 1K seek 16400 ``` The sdX in the command is the name of TF card in linux If you have other trouble, consult the seller or email to support@sipeed.com for help."},"/hardware/en/lichee/RV/user.html":{"title":"Basic usage","content":"# Basic usage ## Use Dock motherboard ### Connnect Board We can easily note the TX and RX pins marked on the bottom of motherboard, so we can use serial port of the ttl level wo communicate with computer(Both Tina and Debian os are OK). For Tina OS we can use typeC cable to connect the core board with computer and use adb shell to communicate. For Debian OS we can use keyboard and mouse to contorl the system. #### Notes about Debian It may run slow because of the speed of TF card. The users name is `root` and passwork is `licheepi` **When using serial port connets board it always print kernel message, do following steps to stop it:** Edit `/etc/rsyslog.conf` by root and change `*.emerg` located in lht last line into `#*.emerg` in this file Restart rsyslog service by this command `/etc/init.d/rsyslog restart` **Want to use termial in GUI** Use command `Alt+F2` to run \"run\", then input `termit` to open a terminal. ### Light LED After succeed login OS(Both Tina and Debian are OK), we can stat blink LED. There is an LED beside the screw fixing pad on the core board, This can be found in the dimension drawing: <details> <summary><font color \"#4F84FF\">Click to see dimension drawing</font></summary> <img src \"./../../../zh/lichee/assets/RV/rv_coreboard_dimension.png\"> </details> And from the [schematic](https://dl.sipeed.com/shareURL/LICHEE/D1/Lichee_RV/HDK/2_Schematic) we can know the led connects with PC0 pin, and we can figure out its siginal number is ('C' 'A')x32+0 2x32+0 64 We can also know the IO multiplexing table from pinmux pins file ```bash cat /sys/kernel/debug/pinctrl/2000000.pinctrl/pinmux pins ... pin 64 (PC0): device 2008000.ledc function ledc group PC0 #From this we know it connects with LED pin 65 (PC1): UNCLAIMED pin 66 (PC2): UNCLAIMED pin 67 (PC3): UNCLAIMED pin 68 (PC4): UNCLAIMED pin 69 (PC5): UNCLAIMED pin 70 (PC6): UNCLAIMED pin 71 (PC7): UNCLAIMED ... ``` We export this led GPIO first： ```bash echo 64 > /sys/class/gpio/export #export GPIO64 ``` Then we set this IO direction out, by which we can control its voltage level. ```bash echo out>/sys/class/gpio/gpio64/direction #Set IO direction out echo 1 > /sys/class/gpio/gpio64/value #Set IO high voltage level echo 0 > /sys/class/gpio/gpio64/value #Set IO low voltage level ``` This is the easiest way to control IO. We shoule cancel export if we don't use this IO. ```bash echo 64 > /sys/class/gpio/unexport # cancel export GPIO64 ``` Up to now we have succeeded Lighting led on RISC V 64 D1. You can also light on the serial RGB LED ws2812: ```bash echo 255 > /sys/class/leds/sunxi_led0r/brightness #Red led on echo 0 > /sys/class/leds/sunxi_led0r/brightness #Red led off echo 255 > /sys/class/leds/sunxi_led0g/brightness #Green led on echo 0 > /sys/class/leds/sunxi_led0g/brightness #Green led off echo 255 > /sys/class/leds/sunxi_led0b/brightness #Blue led on echo 0 > /sys/class/leds/sunxi_led0b/brightness #Blue led off ``` ### Peripheral verification #### Audio function Check recording device Use command `arecord l` ```bash root@MaixLinux:~# arecord l **** List of CAPTURE Hardware Devices **** card 0: audiocodec [audiocodec], device 0: SUNXI CODEC 2030000.codec 0 [] Subdevices: 1/1 Subdevice 0: subdevice 0 card 1: snddmic [snddmic], device 0: 2031000.dmic dmic hifi dmic hifi 0 [] Subdevices: 1/1 Subdevice 0: subdevice 0 card 2: sndhdmi [sndhdmi], device 0: 2034000.daudio audiohdmi dai 20340a4.hdmiaudio 0 [] Subdevices: 1/1 Subdevice 0: subdevice 0 ``` Check speaker device Use command `aplay l` ``` root@MaixLinux:~# aplay l **** List of PLAYBACK Hardware Devices **** card 0: audiocodec [audiocodec], device 0: SUNXI CODEC 2030000.codec 0 [] Subdevices: 1/1 Subdevice 0: subdevice 0 card 2: sndhdmi [sndhdmi], device 0: 2034000.daudio audiohdmi dai 20340a4.hdmiaudio 0 [] Subdevices: 1/1 Subdevice 0: subdevice 0 ``` Play recording： ```bash arecord D hw:1,0 f S16_LE t wav d 3 t.wav #Recording ``` ```bash aplay D hw:0,0 t.wav #Play recording ``` Besides, we can adjust volume by alsamixer application <details> <summary><font color \"#4F84FF\">Click to see alsamixer</font></summary> <pre><code class \"language shell\">┌────────────────────────────── AlsaMixer v1.2.4 ──────────────────────────────┐ │ Card: audiocodec F1: Help │ │ Chip: F2: System information │ │ View: F3:[Playback] F4: Capture F5: All F6: Select sound card │ │ Item: Headphone [dB gain: 24.00] Esc: Exit │ │ │ │ ┌──┐ ┌──┐ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │ │ → │ │ │ │ │ → │ │ │ │▒▒│ → │ │ │ │▒▒│ → │ │ │ │▒▒│ → │ │ │ │▒▒│ → │ │▒▒│ │▒▒│ → │ │▒▒│ │▒▒│ │ │ │▒▒│ │▒▒│ │ │ ├──┤ ┌──┐ ┌──┐ Off ┌──┐ ┌──┐ ┌──┐ └──┘ │ │ │MM│ │MM│ │MM│ │MM│ │MM│ │MM│ │ │ └──┘ └──┘ └──┘ └──┘ └──┘ └──┘ │ │ 25 63 │ │ &lt;Headphon>FMINL ga FMINR ga ADC1 ADC ADC1 Inp ADC1 Inp ADC1 Inp ADC1 vol │ └──────────────────────────────────────────────────────────────────────────────┘</code></pre> </details> #### USB Function Default kernel incorporates driver for external USB flash disk. After Plug in the USB flash disk, you can use `fdisk l` command to see the new `/dev/sda` device If the USB flash disk has not been formatted, you can use `mkfs.vfat` command to format the USB disk, then mount it. #### Wireless network ##### **Use Tina OS** LicheeRV bottom board is equipped with XR829 or RTL8723BS wifi module, can connect network by following commands: Add following content into `wpa_supplicant.conf` file located in /etc/wifi/ to config wifi ```bash network { ssid \"WiFi_name\" psk \"WiFi_password\" } ``` Then restart board(Use command `reboot`), use these two commands `ifconfig wlan0 up`; `udhcpc iwlan0` to connect wifi. Then we can use ssh to remote login or use scp to transfer files by network. ##### **debian OS** It's not supported to use command line to connect network Click System menu > Preferenes > Connman Settings，Enable Network Settings ，check whether the interface in the network property is wlan0. Double click the network name and input WiFi password to connect wifi. ![](./../../../zh/lichee/assets/RV/wifi 1.jpg) After succeeding connecting network, we can see the network IP ![](./../../../zh/lichee/assets/RV/wifi 2.jpg) #### Display and touch LicheeRV supports following screen： SPI screen\t\t 1.14 inch(TODO) RGB screen\t\t 4.3 inch 480x272；5.0 inch 800x480； RGB+SPI screen 4.0 inch 480x480(st7701s); 4.0 inch 720x720(nv3052c) MIPI screen \t8.0 inch 1280x720(ILI9881C) We can use following commands to view screen driver information The following message will be different due to different mirror system ```bash cat /sys/class/disp/disp/attr/sys screen 0: de_rate 300000000 hz, ref_fps:60 mgr0: 480x480 fmt[rgb] cs[0x204] range[full] eotf[0x4] bits[8bits] err[0] force_sync[0] unblank direct_show[false] iommu[1] dmabuf: cache[0] cache max[0] umap skip[0] overflow[0] \tlcd output\tbacklight( 50)\tfps:59.5\tesd level(0)\tfreq(60)\tpos(0)\treset(0)\t 480x 480 \terr:0\tskip:184\tirq:230715\tvsync:0\tvsync_skip:0 BUF enable ch[1] lyr[0] z[16] prem[N] a[globl 255] fmt[ 0] fb[ 480, 480; 480, 480; 480, 480] crop[ 0, 0, 480, 480] frame[ 0, 0, 480, 480] addr[ffe00000, 0, 0] flags[0x 0] trd[0,0] ``` Test screen color bar ：`echo 1 > /sys/class/disp/disp/attr/colorbar` #### Play video Now we can play BadApple On licheeRV [Click me to download video](https://dl.sipeed.com/shareURL/LICHEE/D1/Lichee_RV/MP4) FFmpeg has been built in Tina image, which is a powerful multimedia library, can be used for screen recording or play video. Recording command： ```bash ffmpeg f fbdev framerate 10 i /dev/fb0 record.avi ``` Play commamd (They are play audio from speaker and HDMI) ``` ffmpeg i /mnt/UDISK/badapple_640480_xvid.mp4 pix_fmt bgra f fbdev /dev/fb0 f alsa hw:0,0 ## speaker ffmpeg i /mnt/UDISK/badapple_640480_xvid.mp4 pix_fmt bgra f fbdev /dev/fb0 f alsa hw:2,0 ## hdmi ``` Because it's decoded by cpu, so the Maximum screen resolution test is 750x540 , and it will run slower if play higher screen resolution. <iframe src \"https://player.bilibili.com/player.html?aid 209723771&bvid BV1xa411r7PP&cid 457742249&page 1\" scrolling \"no\" border \"0\" frameborder \"no\" framespacing \"0\" allowfullscreen \"true\"> </iframe> #### Microphone array(For debian OS only) Connect board with microphone array (make sure not reverse the cable or not reverse the pin ), then run `sudo ./micarr_0609` in terminal. If you need redevelop about microphone array, contact with support@sipeed.com ![](./../../../zh/lichee/assets/RV/mic_array_picture.jpg) <iframe src \"https://player.bilibili.com/player.html?aid 849734125&bvid BV1HL4y1H7nv&cid 457750392&page 1\" scrolling \"no\" border \"0\" frameborder \"no\" framespacing \"0\" allowfullscreen \"true\"> </iframe> ## 86 Panel If your device display incorrectly, go to [Questions&Answers](./problems.html) to fix this. Here we just show simple usage about this board, the usage for [Dock](#use dock motherboard) also can be used for 86Panel (Except Light LED by PC0 pins) For tina os there is no GUI, so we use debian as example. After finishing burning debian OS, insert mirror card into the board, wait about 2 minutes to see the desktop displays on the screen, during which you can see log form uart port. ![attachmentId 2734](./../../../zh/lichee/assets/RV/LicheeRV_login_picture.png) Username `sipeed` and Password `licheepi`, use mouse and keyboard to operate it. ![attachmentId 2735](./../../../zh/lichee/assets/RV/desktop_appearance.png) Then we can de some basic operations. Use `Alt+F2` to run \"run\", then input `termit` to new a terminal command line. ![attachmentId 2736](./../../../zh/lichee/assets/RV/Basic_operation.png) Let's try to compile and run hello world ![attachmentId 2737](./../../../zh/lichee/assets/RV/Run_HelloWorld.png) We also provide 720P 720p high definition screen, you can try this if you have enough money。 When you use this you need to overwrite the board level configuration to set it in correct configurations to display.[Click here](problems.html#86 panel screen no display display wrong) to see more details. ![attachmentId 2738](./../../../zh/lichee/assets/RV/display_1.png) ![attachmentId 2739](./../../../zh/lichee/assets/RV/display_2.png) ### Light LED Because LED on the core board is reused with the 86Panel motherboard peripheral, We can't light it directly. After connecting the LED with the reserved IO pad, we can blink it by the same ways how we blink by [dock board](#light led). ### Connect Internet #### Connect by Cable 86 Panel supports 100 Megabit networks. And use following commands to connect to Internet after using the network cable included in the package to connect to the subnet port on the board. ```bash ifconfig eth0 up udhcpc ieth0 ``` #### Wireless network You can refer to [Dock wireless network](#wireless network) ### Others Same as operating dock motherboard. #### Touch screen test <font color #16B2C>Only tina OS incorporates touch demo</font> IF you buy 86panel package, just use command `ts_test` to test touch screen > There is a bug with touch driver,that is when you remove your finger during test, the cursor stops blink while the terminal still print messages ```bash root@MaixLinux:/# ts ts_calibrate ts_harvest ts_print_mt ts_test ts_verify ts_finddev ts_print ts_print_raw ts_test_mt tshowimg ``` ## USE BSP SDK To make it easy for user to develop custom function, Sipeed provide bsp docker image of LicheeRV. Download link:[Mege netdisk](https://mega.nz/folder/lx4CyZBA#PiFhY7oSVQ3gp2ZZ_AnwYA) After finishing downloading docker file, decompress into tar file. ```bash gzip d licheerv_d1_compile.tar.gz #Decompress into tar file docker import licheerv_d1_compile.tar licheerv_d1_compile:latest #import docker image ``` After succeed running it's suggessted to relogin and username `nihao` password `sipeed123` ```bash sudo docker run it licheerv_d1_compile:latest /bin/bash # Start D1 compile docker image in interactive mode login # change user ``` You can use following commands to finish compiling. ```bash cd ~/sdk/tina d1 open_new/ source build/envsetup.sh lunch # choose 1 make menuconfig # unchoose alsa plugin, otherwise it fail to compile # alsa plugins path in menuconfig #. #└── Libraries # └── alsa plugins make j8 pack ``` There are some new dts file in this SDK, you can use them if necessary They are in device/config/chips/d1/configs/nezha/board_xxx.dts Other SDK developing manual can refer to relevant documents on the Allwinner development platform https://open.allwinnertech.com/ If you need other SDK please visit allwinner official website: https://d1.docs.aw ol.com/en ## WAFT developer's guide TODO"},"/hardware/en/lichee/RV/flash.html":{"title":"Lichee RV system image","content":"# Lichee RV system image There are two system images for Lichee RV and they are tina and debian. **Tina** is a small linux image while **Debian** is a desktop image. ## Prepare 1. Lichee RV Core board 2. TF card (It's suggested to use tf card provided by sipeed beacuse other card might fail to burn or fail to boot system) 3. Burn tool [PhoenixCard](https://dl.sipeed.com/shareURL/LICHEE/D1/Lichee_RV/tool) 4. System image [Tina](https://dl.sipeed.com/shareURL/LICHEE/D1/Lichee_RV/SDK/image) Debian: Download from [mega](https://mega.nz/folder/lx4CyZBA#PiFhY7oSVQ3gp2ZZ_AnwYA) Image name Meaning Note LicheeRV RISCV D1 Linux image only for sipeed Tina Tina openwrt system image debian Riscv debian system image 86panel [taobao 86panel](https://item.taobao.com/item.htm?spm a230r.1.14.18.30b534187YMsRx&id 663345415205&ns 1&abbucket 7#detail) dock [taobao dock](https://item.taobao.com/item.htm?spm a1z10.3 c s.w4002 21410578028.20.35765d54K9XCOt&id 666274331852) hdmi Display to HDMI screen 800480 / 480P Display to LCD screen，it fits resolution 800*480 or 480P (640X480) 8723ds This image supports 8723ds WIFI / BLE driver xr829 This image supports xr829 WIFI / BLE driver waft Whether waft is built in image ## Burn image Connect you sd card reader inserted with sd card with your computer Use SD Card Formatter to format your TF card first: Click Refresh then choose your target disk carefully, click Format ![Format SD card](./../../../assets/maixII/V831/image 20210802102810041.png) Follow the steps below to complete burning ![burn image](./../../lichee/assets/RV/flash.png) Run PhoenixCard Click `Image` marked with ① to choose your target firmware We choose `Start up` marked with ② Click `Burn` marked with ③ to burn your target firmware into tf card From `Status bar` marked with ④ to see your progress；If it's red when finishing this means it fails burning, then we should rerun `SD Card Formatter` to format the TF card to increase its success possibility. Click `Close` to close PhoenixCard > Not each card can successed be burned, if you can't do this we suggest you buy an image card we provide Waiting for finishing burning, It will be faster if flashing Tina OS and it will take about 10 minutes if flashing Debian ## Run OS The username and passward are as follows: Tina OS username：`root` password：`tina` Debian OS username：`root` password：`licheepi` Insert tf card, and we can see the startup information in the serial port tool > Debian startup message <details> <summary><font color \"#4F84FF\">Click to see Debian startup log</font></summary> <pre><code class \"language shell\"> [270]HELLO! BOOT0 is starting! [273]BOOT0 commit : 27369ab OpenSBI v0.6 ____ _____ ____ _____ / __ \\ / ____ _ \\_ _ _ __ ___ _ __ (___ _) '_ \\ / _ \\ '_ \\ \\___ \\ _ < __ _) __/ ____) _) _ \\____/ .__/ \\____ ______/____/_____ _ </code></pre> </details> > Tina startup message <details> <summary><font color \"#4F84FF\">Click to see Tina startup log</font></summary> <pre><code class \"language shell\"> BusyBox v1.27.2 () built in shell (ash) __ ___ _ __ _ / / /__ _(_)_ __ / / (_)__ __ ____ __ / /_/ / _ `/ /\\ \\ / / /__/ / _ \\/ // /\\ \\ / /_/ /_/\\_,_/_//_\\_\\ /____/_/_//_/\\_,_//_\\_\\ Maix Linux (Neptune, 5C1C9C53) root@MaixLinux:/# </code></pre> </details> ## Qusetions [Questions](./problems.html)"},"/hardware/en/lichee/RV/ubuntu.html":{"title":"LicheeRV ubuntu","content":" title: LicheeRV ubuntu keywords: ubuntu, riscv, lichee update: date: 2022 12 01 version: v0.1 author: wonder content: Create file Ubuntu released the image file which can run on LicheeRV. But we can't flash this image file with PhoenixCard application, so here are steps. After booting this system on LicheeRV, we can use mouse and keyboard to operate this system if connecting this board with HDMI screen, otherwise we can only operate this system by serial communication. ## Ubuntu Introduction Ubuntu is based on another linux distribution Debian, and we can find many answers from internet when meet trouble, which is friendly to beginners and helps them find solutions quickly when they have trouble. Because of the limited performance, it's suggested running this system by command edition. If you need graphical interface, you need to do it by yourself. <img src \"./../../../zh/lichee/assets/RV/ubuntu/d1_ubuntu_desktop.jpg\" alt \"d1_ubuntu_desktop\" width \"45%\"> <img src \"./../../../zh/lichee/assets/RV/ubuntu/d1_ubuntu_desktop_picture.jpg\" alt \"d1_ubuntu_desktop_picture\" width \"45%\"> The photo above is D1 Dock Pro，and it's different with Dock board, Dock Pro board incorporates USB uart port, by which we can communicate the board card with the computer with only one USB TypeC cable. The relevant peripherals can be seen in the following figure. <img src \"./../../../zh/lichee/assets/RV/ubuntu/dock_pro_top_block.jpg\" alt \"dock_pro_top_block\" width \"45%\"> <img src \"./../../../zh/lichee/assets/RV/ubuntu/dock_pro_bottom_block.jpg\" alt \"dock_pro_bottom_block\" width \"45%\"> This board can be bought from [aliexpress](https://www.aliexpress.com/item/1005003741287162.html?). ## Steps ### Get image We upload this image file on [mega](https://mega.nz/folder/1FxlVKrA#nONEKgZWKBzeEkWKAq_AcQ). ### Software Visit [balenaEtcher](https://www.balena.io/etcher/) to download application. We have upload Windows edition software in our [Download station](https://dl.sipeed.com/shareURL/others/balenaEtcher), other edition can be downloaded from [balenaEtcher official site](https://www.balena.io/etcher/). ### Flash System Prepare a SD card over 8G, the card with better performance can have better experienxe. Connect the TF card with computer by SD card reader or SD card slot in the computer. Here is an example about SD card slot in computer, if your computer dose not have SD card slot, you need the SD card reader. <table> <tr> <th colspan \"2\"> Connect TF card with computer </th> </th> </tr> <tr> <td>Connect by SD card reader</td> <td>Connect by SD card slot</td> </tr> <tr> <td><img src \"./../../../zh/lichee/assets/RV/ubuntu/d1_ubuntu_sdcard_reader.jpg\" alt \"d1_ubuntu_sdcard_reader\" ></td> <td><img src \"./../../../zh/lichee/assets/RV/ubuntu/d1_ubuntu_sdcard_computer_reader.jpg\" alt \"d1_ubuntu_sdcard_computer_reader\" ></td> </tr> </table> Run balenaEtcher, choose the downloaded image file, choose your TF card, click Flash: ![d1_ubuntu_burn_image](./../../../zh/lichee/assets/RV/ubuntu/d1_ubuntu_burn_image.gif) Make sure you choose the correct SD card. ![d1_ubuntu_burn_image_sdcard_choose](./../../../zh/lichee/assets/RV/ubuntu/d1_ubuntu_burn_image_sdcard_choose.png) This will take a bit time, and after finishing this work it will be like as following figure. If there is no `Successful` shown after finishing this work, try to reburn this image. ![d1_ubuntu_finish_burn_image](./../../../zh/lichee/assets/RV/ubuntu/d1_ubuntu_finish_burn_image.png) ## Run System Finishing flashing system and seeing `sucessful` shown in the end, we can connect SD card with this board to start ubuntu. ![dock_pro_ubuntu](./../../../zh/lichee/assets/RV/ubuntu/dock_pro_ubuntu.jpg) View messages from UART, and we can operate this board by UART. <img src \"./../../../zh/lichee/assets/RV/ubuntu/d1_ubuntu_boot_opensbi.jpg\" alt \"d1_ubuntu_boot_opensbi\" width \"45%\"> <img src \"./../../../zh/lichee/assets/RV/ubuntu/ubuntu_boot.jpg\" alt \"ubuntu_boot\" width \"45%\"> Wait a while, then the username and password are both `root`. ![d1_ubuntu_login](./../../../zh/lichee/assets/RV/ubuntu/d1_ubuntu_login.jpg) ## Connect wifi Use command `nmcli` to connect 2.4G wireless. Scan wifi ```bash nmcli dev wifi ``` ![d1_ubuntu_wifi_scan](./../../../zh/lichee/assets/RV/ubuntu/d1_ubuntu_wifi_scan.jpg) Connect wifi，by command `nmcli dev wifi connect wifi_name password wifi_password` ```bash nmcli dev wifi connect Sipeed_Guest password 12345678 ``` ![d1_ubuntu_wifi_connect](./../../../zh/lichee/assets/RV/ubuntu/d1_ubuntu_wifi_connect.jpg) See `successfully`, then we have already connected to the wifi, and commands like `apt` and others work fine. ![d1_ubuntu_install_tree](./../../../zh/lichee/assets/RV/ubuntu/d1_ubuntu_install_tree.jpg) ## Blink led We can blink led on our board by this Ubuntu system like what we have done on Tina, here are the codes: Tuen on LED : ```bash echo 1 > /sys/class/leds/\\:status/brightness ``` Note the `\\` in this command, without which you can't run this command successfully. ![d1_ubuntu_led_on](./../../../zh/lichee/assets/RV/ubuntu/d1_ubuntu_led_on.jpg) Turn off LED : ```bash echo 0 > /sys/class/leds/\\:status/brightness ``` ![d1_ubuntu_led_off](./../../../zh/lichee/assets/RV/ubuntu/d1_ubuntu_led_off.jpg) ## In the end Based in [Ubuntu LicheeRV image](https://wiki.ubuntu.com/RISC V/LicheeRV), we packed the wireless driver inside, which make user more convenient to experience this system. ## Questions ### No HDMI output The board will not display HDMI command line when booting, and after the HDMI related service starts LicheeRV displays the command line console on HDMI screen, and some screen is not fit LicheeRV ubuntu image output and will not display the command line console. Here is the login photo of UART (ttyS0) and HDMI command line console (tty1) of LicheeRV ubuntu image. ![d1_ubuntu_console_hdmi](./../../../zh/lichee/assets/RV/ubuntu/d1_ubuntu_console_hdmi.jpg)"},"/hardware/en/lichee/Zero/Zero.html":{"title":"Lichee Zero","content":"# Lichee Zero ## Lichee Zero 概述 Lichee Zero是基于全志科技的V3s(ARM Cortex A7内核)高性能CPL芯片设计的迷你开发板。开发板设计小巧精致，将芯片的所有资源都引出,板载USB、Flash、TF卡、4OP LCD接口等，并把所有IO资源引出，方便开发者拓展使用，适合初学者学习linux或者商用于产品开发。 核心板： <img src \"./../assets/Zero/Zero_1.png\" width 500> <img src \"./../assets/Zero/Zero_6.png\" width 500> 核心板+扩展板： <img src \"./../assets/Zero/Zero_3.png\" width 500> <img src \"./../assets/Zero/Zero_4.png\" width 500> ## 参数 ### V3s参数 V3s框架 ![](./../assets/Zero/V3s.png) 项目 参数 CPU ARM Cortex™ A7 最高1.2GHz Memory Integrated 64MB DRAM Audio Codec • Integrated 92dB audio codec<br>• Supports two ADC channels and two DAC channels<br>• Supports one low noise analog microphone bias outputs<br>• Supports one microphone input and one stereo microphone outpu Video • Supports 1080p@40fps or 1080p@30fps+VGA@30fps H.264 video encoding,<br>• Supports H.264 1080p@30fps decoding, MJPEG 1080@30fps decoding Video Input/Output • Supports 8/10/12 bit parallel CSI and 4 lane MIPI CSI2<br>• Supports up to 5M CMOS sensor<br>• Supports RGB/i80/LVDS LCD up to 1024x768 resolution Connectivity • 3 x SD card controllers<br>• LRADC/SPI/TWI/UART/PWM<br>• USB, EMAC+PHY ISP • Integrated ISP up to 5M pixels<br>• Supports two channel outputs for display and encoding respectively<br>• Supports various input and output formats<br>• Supports AE/AF/AWB<br>• Supports saturation adjustment/ noise reduction/ defect pixel correction/distortion correction ### Lichee Zero核心板参数 项目 参数 CPU V3s 内存 64MB DDR2 存储 预留 SOP8 SPI Flash焊盘 <br>板载TF卡座 显示 通用40P RGB LCD FPC座<br>可直插常见的40P 4.3/5/7寸屏幕（板载背光驱动)，通过转接板可插50P 7/9寸屏<br>支持常见的272x480,480x800,1024x600等分辨率板载电阻式触摸屏芯片，支持电阻屏<br>板载RGB LED 通讯接口 SDIO x2，可搭配配套SDIO WiFi+BT模块<br>SPl x1<br>12C x2<br>UART x3<br>100M Ether x1(含EPHY)<br>OTG USB x1<br>MIPI CSI x1 其他接口 <br>PWM x2<br>LRADC x1<br>Speakerx2+ Mic x1 电气特性 Micro USB 5V供电<br>2.54mm插针3.3V~5V供电<br>1.27mm邮票孔供电 ![](./../assets/Zero/Zero_8.png) ![](./../assets/Zero/Zero_10.png) ### Lichee Zero 拓展板 项目 参数 CPU V3s 内存 64MB DDR2 存储 预留 SOP8 SPI Flash焊盘 <br>板载TF卡座 显示 通用40P RGB LCD FPC座<br>可直插常见的40P 4.3/5/7寸屏幕（板载背光驱动)，通过转接板可插50P 7/9寸屏<br>支持常见的272x480,480x800,1024x600等分辨率板载电阻式触摸屏芯片，支持电阻屏<br>板载RGB LED 通讯接口 SDIO x2，可搭配配套SDIO WiFi+BT模块<br>SPl x1<br>12C x2<br>UART x3<br>100M Ether x1(含EPHY)<br>OTG USB x1<br>MIPI CSI x1 其他接口 <br>PWM x2<br>LRADC x1<br>Speakerx2+ Mic x1 板载外设 以太网接口<br>3.5mm耳机接口<br>驻极体麦克风<br>额外TF卡卡槽<br>4个按键<br>MIPI接口 电气特性 Micro USB 5V供电<br>2.54mm插针3.3V~5V供电<br>1.27mm邮票孔供电 ![](./../assets/Zero/Zero_9.png) ## 使用教程 [Lichee Zero](/soft/Lichee/zh/Zero Doc/Start/intro_cn.md) ## 产品技术支持 Lichee Zero 开发板可以在多种场景实现客户不同方面的需要，在 AIoT 上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务 <support@sipeed.com>。"},"/hardware/en/lichee/One/index.html":{"title":"","content":"敬请期待"},"/hardware/en/lichee/th1520/lp4a.html":{"title":"Lichee Pi 4A","content":" title: Lichee Pi 4A keywords: Linux, Lichee, TH1520, SBC, update: date: 2023 03 31 version: v0.1 author: wonder content: Create file ## Introduction Lichee Pi 4A is the Risc V linux development board using [Lichee Module 4A](http://wiki.sipeed.com/hardware/en/lichee/th1520/lm4a.html) core module, its main chip is [TH1520](https://www.t head.cn/product/yeying), contains 4TOPS@int8 AI NPU, supports dual screen 4K resolution display and 4K mipi camera input, dual Gigabit Ethernets and Mutiple USB interfaces provides enough connections. And there is a Riscv C906 Core for audio decode. Online store:[Aliexpress](https://www.aliexpress.com/item/1005005532736080.html) ## Parameters <table> <thead> <tr> <th colspan 2>Main Chip</th> </tr> </thead> <tbody> <tr> <td>Name</td> <td>TH1520</td> </tr> <tr> <td>CPU</td> <td>RISC V 64GCV C910*4@2GHz <br>· Each core contains 64KB I cache amd 64KB D Cache <br>· Shared 1MB L2 Cache <br>· Support TEE and REE, configered at core booting<br>· Support multi core debugging framework of custom and RISC V compatible interface<br>· Independent power domain, supports DVFS</td> </tr> <tr> <td>GPU</td> <td>· OpenCL 1.1/1.2/2.0<br>· OpenGL ES 3.0/3.1/3.2<br>· Vulkan 1.1/1.2<br>· Android NN HAL</td> </tr> <tr> <td>NPU</td> <td>Support 4TOPS@INT8, up to 1GHz <br>· Support TensorFlow、ONNX、Caffe <br>· Support CNN、RNN、DNN </td> </tr> <tr> <td>Decode</td> <td>Real time decoder, support H.265/H.264/VP9/8/7/6/AVS/AVS+/AVS2.0/VC1/MPEG4 <br>· Support H.264 BP/MP/HP@level 5.1 decoding, up to 4K resolution<br>· Support H.265/HEVC Main Profile@level 5.1 decoding, up to 4K resolution<br>· Support VP9 Profile 2 decoding, up to 4K resolution<br>· Support AVS2.0 decoding, up to 4K resolution<br>· Support VP6/7/8/AVS/AVS+/VC1/MPEG4 decoding, up to 1920x1080 resolution<br>· Decoding at 4K@75fps maximum</td> </tr> <tr> <td>Encode</td> <td>· Support H.264 BP/MP/HP@level4.2 encoding, up to 4K resolution<br>· Support H.265/HEVC Main Profile encoding, up to 4K resolution<br>· Only support I frame and P frame<br>· Encoding at 4K@40fps maximum</td> </tr> <tr> <th colspan 2>Hardware information</th> </tr> <tr> <td>RAM</td> <td>· 8GB 64bits LPDDR4<br>· 16GB 64bits LPDDR4<br></td> </tr> <tr> <td>Storage</td> <td>· eMMC: Optional Blank、 8G、 32G、 128G<br>· Support TF card</td> </tr> <tr> <td>Ethernet</td> <td>· 2 x Gigabit Ethernets, POE optional</td> </tr> <tr> <td>USB</td> <td>· USB3.0 x 4<br>· USB2.0 x 1 (Burn firmware only)</td> </tr> <tr> <td>Audio</td> <td>· 1 x 3.5mm Stereo port<br>· 1 x Speaker interface<br>· 2 x onboard microphones<br></td> </tr> <tr> <td>Display</td> <td>· 1 x HDMI2.0<br>· 1 x 4 lane MIPI DSI</td> </tr> <tr> <td>Camera</td> <td>· 2 x 2 lane MIPI CSI<br>· 1 x 4 lane MIPI CSI</td> </tr> <tr> <td>GPIO</td> <td>· UART<br>· IIC<br>· SPI</td> </tr> </tbody> </table> ## Links [Specification](https://dl.sipeed.com/shareURL/LICHEE/licheepi4a/01_Specification) [Schematic](https://dl.sipeed.com/shareURL/LICHEE/licheepi4a/02_Schematic) [Bit_number_map](https://dl.sipeed.com/shareURL/LICHEE/licheepi4a/03_Bit_number_map) [Dimensional_drawing](https://dl.sipeed.com/shareURL/LICHEE/licheepi4a/04_Dimensional_drawing) [3D_model](https://dl.sipeed.com/shareURL/LICHEE/licheepi4a/05_3D_model) [Github](https://github.com/sipeed/LicheePi4A)"},"/hardware/en/lichee/th1520/lpi4a/2_unbox.html":{"title":"开箱体验","content":" title: 开箱体验 keywords: Linux, Lichee, TH1520, SBC, RISCV, unbox update: date: 2023 05 08 version: v1.0 author: wonder content: Release docs ## 开箱内容 LicheePi 4A 分为两个版本，内测版与正式版。 内测版于 2023 年 5 月发售，仅有 8+8（DDR+eMMC）版本，各部分功能基本正常。 正式版预计于 2023 年 6 月发售，将有 8+32,16+128 版本，也会针对内测版用户提出的相关建议进行局部微调优化，功能/镜像与内测版会保持一致。 ### 内测版 如果你是第一批内测版 LicheePi 4A 用户，你收到的包裹内将是如下包装： ![package_alpha](./../../../../zh/lichee/th1520/lpi4a/assets/unbox/package_alpha.png) 打开塑料盒包装，你将看到如下的内容： ![unbox_alpha](./../../../../zh/lichee/th1520/lpi4a/assets/unbox/unbox_alpha.png) 包裹在黑色泡棉内的就是 LicheePi 4A 主体，其余标号部件为： 1. 30x30mm 散热硅脂 2. 30mm 5V 散热风扇，右边已连接至风扇插针。如果松动脱出，请自行安装回去，注意红线为正极，装反后风扇不会转动。 3. 2.4G WiFi 天线，已安装至 IPEX 座子。如果松动脱出，请自行安装回去。 4. USB C 线缆，作为供电和下载镜像使用。 如果开箱后发现缺少相关部件，请联系客服咨询。 ### 正式版 （预计2023年6月发售） ### 选配件 如果你购买了选配件的话，包裹里还可能有： ![option_alpha](./../../../../zh/lichee/th1520/lpi4a/assets/unbox/option_alpha.png) 图中上半部分是选配的 RVDebugger Plus，具有 JTAG+UART 功能，如果你需要进行底层调试，可选购买。 图中下半部分是选配的 12V2A 电源适配器，如果你需要在板子上外接大量耗电外设（如 USB，MIPI 屏），可选购买。 5V2A USB 供电可满足板卡在 1.85GHz 下的满载烤机运行 以及未来还会有POE供电模块（TODO） ## 组装板卡 ### SOM安装 默认情况下 LM4A SOM 已经安装至主板上，如果你需要升级/替换 SOM，可按如下说明进行 SOM 的取出和安装 1. 取出 SOM: <table> <tr> <td colspan 2>先用手指往外拨动弹片解锁 SOM, 然后将 SOM 取出</td> </tr> <tr> <td><img src \"./../../../../zh/lichee/th1520/lpi4a/assets/unbox/unlock_som.png\" alt \"unlock_som\"></td> <td><img src \"./../../../../zh/lichee/th1520/lpi4a/assets/unbox/remove_som.png\" alt \"remove_som\"></td> </tr> </table> 2. 安装 SOM: <table> <tr> <td colspan 2>先把 SOM 斜着插入连接器插槽, 然后按压SOM，两边弹片会自动锁住SOM</td> </tr> <tr> <td><img src \"./../../../../zh/lichee/th1520/lpi4a/assets/unbox/insert_som.png\" alt \"insert_som\"></td> <td><img src \"./../../../../zh/lichee/th1520/lpi4a/assets/unbox/lock_som.png\" alt \"lock_som\"></td> </tr> </table> ### 散热器安装 LicheePi 4A 是高性能 SBC，需要安装主动散热器对 SOM 进行散热，否则在满载时可能由于核心过热而自动降频，无法达到最优性能。 1. 安装导热硅脂片 取出导热硅脂片，撕开两面薄膜，将硅脂片放置在下图位置并轻轻按压固定（硅脂片自己具备一定粘性可以固定住），注意完整覆盖住主芯片与两颗内存芯片 ![silicone_pad](./../../../../zh/lichee/th1520/lpi4a/assets/unbox/silicone_pad.png) 2. 安装散热风扇 在硅脂片上对齐安装30mm的散热风扇，并轻轻按压固定住。 ![insert_fan](./../../../../zh/lichee/th1520/lpi4a/assets/unbox/insert_fan.png) 3. 安装散热风扇电源 默认收到时应该已经插入好了风扇电源，如果风扇电源线脱出，请按下图所示插入，注意电源线顺序，装反风扇不会旋转。 注意，该位置上的插针电源受 linux 内核控制，需正确配置内核才会旋转，如果风扇不转，也可插到板卡下方的 20pin 插针的 5V + GND 处测试风扇好坏。 ![insert_fan_cable](./../../../../zh/lichee/th1520/lpi4a/assets/unbox/insert_fan_cable.png) ### WIFI天线安装 默认情况下WIFI天线已经安装在主板上，如果脱出，请按照下图安装回去： ![insert_ant](./../../../../zh/lichee/th1520/lpi4a/assets/unbox/insert_ant.png) ### POE模块安装 选配，TODO。 ### 组装完成 组装完成后的状态如下所示： ![assemble_ok](./../../../../zh/lichee/th1520/lpi4a/assets/unbox/assemble_ok.png) ## 启动板卡 LicheePi 4A出库已预烧录了基础系统镜像，至此你已可以快速进行开机体验！ 注意：预烧录的系统镜像版本可能比较旧，体验不佳，完成上电体验后，可以根据下章教程进行镜像更新。 使用 HDMI 线缆(自备)连接显示器(自备)与 LicheePi 4A 的 HDMI 口，使用配套的 USB C 线缆连接到至少 5V2A 输出的 USB 电源(自备)上，LicheePi 4A 即会开机启动，默认镜像会在 30s 内启动到桌面系统的登录界面。 ![boot_login](./../../../../zh/lichee/th1520/lpi4a/assets/unbox/boot_login.png) 默认镜像有两类帐号密码配置，可以都尝试下： 1. 帐号：`root`，`debian`，`sipeed`；密码均为 `licheepi` 2. 帐号`debian`，密码`debian`；帐号`sipeed`，密码`licheepi` 如果按照上述操作，没能点亮显示器，进入系统，有以下可能请自查： 1. 检查电源电压是否正常，USB C 口连接是否正常，电源指示灯是否点亮 2. 检查散热器是否正常安装，风扇是否旋转 3. 检查 HDMI 是否稳固连接，显示器是否开机，以及可以尝试更换显示器测试 4. 也可能是出厂遗漏固件烧录，请按下章方法进行镜像烧录后再试 5. 如果以上均不奏效，请联系客服售后 ## 板卡硬件说明 完成初次点亮板卡后，可以静下心来认识下 LicheePi 4A 的硬件，方便后期可能的维护工作。 ![pi_view](./../../../../zh/lichee/th1520/lpi4a/assets/unbox/pi_view.png) ### 超频说明 TH1520 标称频率为 1.85GHz，我们仅保证你收到的板卡可以稳定工作在 1.85GHz。 如果你是发烧玩家，想进行超频操作，那么你有一定概率可以超频到 2GHz，但我们不保证在该频率下的稳定性。 经不完全测试，约有 80% 的 SOM 可以超频至 2GHz 启动系统，约有 50% 的 SOM 可以在 2GHz 下跑通压力测试。 ### USB 限流说明 由于系统最大电源输入能力为 12V2A，即约 24W，转换为 5V 后，大约有 20W 左右有效功率。 为了更好地为 SOM 供电（SOM 在超频满载情况下可达 12W 功率），所以 USB HUB 处进行了电流限制，限制了 1.5A 的电流（内测版硬件。正式版硬件会根据反馈调整此处电流限制），即 7.5W 功率。 再接入大量 USB 设备时可能会超出该电流限制，此时建议对 USB 设备进行外部辅助供电。 如果需要解除此处电流限制，请进行如下操作：TODO。 ### 内测版已知问题 1. 仅支持原生eMMC启动，不支持 SD / SPI Flash 启动。正式版会增加拨码开关选择。 2. HDMI电平转换可能在个别显示器上存在兼容性问题，导致无法设置分辨率。可以尝试更换显示器。 3. 板载音频输出电路的高通滤波电路的截止频率过高（500Hz），导致低音丢失。正式版中会修正RC参数 ### 硬件资料下载 [板卡规格书](https://dl.sipeed.com/shareURL/LICHEE/licheepi4a/01_Specification) [底板原理图](https://dl.sipeed.com/shareURL/LICHEE/licheepi4a/02_Schematic) [底板点位图](https://dl.sipeed.com/shareURL/LICHEE/licheepi4a/03_Bit_number_map) [底板尺寸图](https://dl.sipeed.com/shareURL/LICHEE/licheepi4a/04_Dimensional_drawing) [模型文件](https://dl.sipeed.com/shareURL/LICHEE/licheepi4a/05_3D_model) ## 其他链接 Online store: [Aliexpress](https://www.aliexpress.com/item/1005005532736080.html) [Github](https://github.com/sipeed/LicheePi4A) [Sipeed 下载站](https://dl.sipeed.com/shareURL/LICHEE/licheepi4a) Telegram: https://t.me/linux4rv 联系邮箱：support@sipeed.com"},"/hardware/en/lichee/th1520/lpi4a/9_benchmark.html":{"title":"CPU 跑分测试","content":" title: CPU 跑分测试 keywords: Linux, Lichee, TH1520, SBC, RISCV, benchmark update: date: 2023 05 08 version: v1.0 author: wonder content: Release docs ## Dhrystone 平头哥官方数据，C910 为 5.6 分左右。 ![dmips](./../../../../zh/lichee/th1520/lpi4a/assets/benchmark/dmips.png) ## CoreMarks 测试参数配置： ` funroll all loops finline limit 500 fgcse sm fno schedule insns msignedness cmpiv fno code hoisting mno thread jumps1 mno iv adjust addr cost mno expand split imm` 测试结果（1.85GHz）： ```txt 2K performance run parameters for coremark. CoreMark Size : 666 Total ticks : 15129 Total time (secs): 15.129000 Iterations/Sec : 13219.644392 Iterations : 200000 Compiler version : GCC10.4.0 Compiler flags : O2 march rv64gv0p7_zfh_xtheadc O3 funroll all loops finline limit 500 fgcse sm fno schedule insns msignedness cmpiv fno code hoisting mno thread jumps1 mno iv adjust addr cost mno expand split imm DPERFORMANCE_RUN 1 lrt Memory location : Please put data memory location here (e.g. code in flash, data on heap etc) seedcrc : 0xe9f5 [0]crclist : 0xe714 [0]crcmatrix : 0x1fd7 [0]crcstate : 0x8e3a [0]crcfinal : 0x4983 Correct operation validated. See README.md for run and reporting rules. CoreMark 1.0 : 13219.644392 / GCC10.4.0 O2 march rv64gv0p7_zfh_xtheadc O3 funroll all loops finline limit 500 fgcse sm fno schedule insns msignedness cmpiv fno code hoisting mno thread jumps1 mno iv adjust addr cost mno expand split imm DPERFORMANCE_RUN 1 lrt / Heap ``` ![coremarks](./../../../../zh/lichee/th1520/lpi4a/assets/benchmark/coremarks.png) ## Geekbench5 > 注：这里的测试使用公版工具链，若使用thead专用工具链，性能预计可提升50%以上 ![geekbench5](./../../../../zh/lichee/th1520/lpi4a/assets/benchmark/geekbench5.png) https://browser.geekbench.com/v5/cpu/compare/21100603?baseline 21092115 ## 7 Zip LZMA [7 Zip LZMA Benchmark](https://7 cpu.com/) ![7z](./../../../../zh/lichee/th1520/lpi4a/assets/benchmark/7z.png) ## OpenSSL ```bash openssl speed evp aes 256 cbc openssl speed evp aes 256 gcm openssl speed evp sha1 openssl speed evp sha256 ``` type 16bytes 64bytes 256bytes 1024bytes 8192bytes 16384bytes <p style \"white space:nowrap\">AES 256 CBC</p> 29206.05k 36957.73k 39648.85k 40407.72k 40624.13k 40768.21k <p style \"white space:nowrap\">AES 256 GCM</p> 24610.57k 28191.29k 29459.29k 29727.06k 29911.72k 29949.95k <p style \"white space:nowrap\">sha1</p> 9428.03k 30591.02k 72920.06k 113164.63k 135271.77k 137052.16k <p style \"white space:nowrap\">sha256</p> 6206.94k 17151.38k 34806.19k 47151.10k 52559.87k 53163.07k ## LLVM TODO ## 其它 欢迎投稿～ 投稿接受后可得￥5～150（$1~20）优惠券！"},"/hardware/en/lichee/th1520/lpi4a/3_images.html":{"title":"镜像集合","content":" title: 镜像集合 keywords: Linux, Lichee, TH1520, SBC, RISCV, image update: date: 2023 05 08 version: v1.0 author: wonder content: Release docs ## 内核支持 目前平头哥官方 SDK 使用 Linux5.10 内核： https://gitee.com/thead yocto 主线 linux6.x 内核正在移植中，主要社区贡献者：`Jisheng Zhang ` ## Sipeed官方镜像 LicheePi 4A 的镜像不定期更新中，初期的镜像可能不太稳定，或者无法发挥 TH1520 的完全性能，请关注本页面，获取最新镜像。 Sipeed 官方镜像基于 Debian 系统修改适配。 默认镜像有两类帐号密码配置，可以都尝试下： 1. 帐号：`root`，`debian`，`sipeed`；密码均为 `licheepi` 2. 帐号`debian`，密码`debian`；帐号`sipeed`，密码`licheepi` 下载地址： <! 百度网盘：[点我](https://pan.baidu.com/e/1jnjz0KO_xnO5R8tWlXtx0A) > Mega 云盘：[点我](https://mega.nz/folder/phoQlBTZ#cZeQ3qZ__pDvP94PT3_bGA) ISCAS 镜像站：[点我](https://mirror.iscas.ac.cn/revyos/extra/images/lpi4a/) ### Debian ![debian](./../../../../zh/lichee/th1520/lpi4a/assets/images/debian.png) 1. LPi4A_Test_0425 1. 发布日期：2023年4月25日 2. 内核：5.10 3. 根文件系统：ext4, 4.3GB 4. 主要预装软件包： 1. 开发类 2. 办公类 5. 修复问题： 6. 已知问题： 1. 关闭GPU 2. 安装ibus输入法后会导致GPU开启，复现GPU双缓冲卡顿（终端+图形界面）问题 2. LPI4A tempfix0428 1. 发布日期：2023年4月28日 2. 内核：5.10 3. 根文件系统：ext4, 4.3GB 4. 主要预装软件包：TODO 5. 修复问题： 1. 临时修复0425版本中终端显示滞后的问题，但是会导致CPU占用率提升，GPU效率减半 6. 已知问题： 1. 安装ibus输入法后会导致GPU开启，复现GPU双缓冲卡顿（图形界面）问题 ### OpenWRT ![openwrt](./../../../../zh/lichee/th1520/lpi4a/assets/images/openwrt.png) TODO ### Andriod ![android](./../../../../zh/lichee/th1520/lpi4a/assets/images/android.png) TODO 系统安装：提示默认已安装到 eMMC。升级系统的方式（镜像下载，烧录工具，步骤） ## 第三方镜像 这里整理了第三方提供的镜像，仅供用户体验，sipeed 不保证此类镜像的可用性，稳定性。 ### openEuler ![openEuler](./assets/images/openEuler.png) Download: [Click me](https://mirror.iscas.ac.cn/openeuler sig riscv/openEuler RISC V/preview/openEuler 23.03 V1 riscv64/lpi4a/) Twitter: https://twitter.com/openEuler ### DeepinOS ![deepin](./../../../../zh/lichee/th1520/lpi4a/assets/images/deepin.jpg) Readme and image download address: [Link](https://github.com/aiminickwong/licheepi4a images) ### openKylin ![openKylin](./../../../../zh/lichee/th1520/lpi4a/assets/images/openkylin.png) Readme and image download link: [Click me](https://github.com/aiminickwong/licheepi4a images) ### armbian ![armbian](https://cdn.armbian.com/wp content/uploads/2018/03/logo2.png) Project address: [Click me](https://github.com/chainsx/armbian riscv build) ### Fedora ![fedora](./../../../../zh/lichee/th1520/lpi4a/assets/images/fedora.png) ### Ubuntu ![ubuntu](./../../../../zh/lichee/th1520/lpi4a/assets/images/ubuntu.png) ### NixOS ![nixos](./../../../../zh/lichee/th1520/lpi4a/assets/images/nixos.png) ### Gentoo ![gentoo](./../../../../zh/lichee/th1520/lpi4a/assets/images/gentoo.jpg)"},"/hardware/en/lichee/th1520/lpi4a/7_develop_andriod.html":{"title":"系统开发","content":" title: 系统开发 keywords: Linux, Lichee, TH1520, SBC, RISCV, Kernel, SDK, Develop update: date: 2023 05 08 version: v1.0 author: wonder content: Release docs "},"/hardware/en/lichee/th1520/lpi4a/7_develop_thead.html":{"title":"系统开发","content":" title: 系统开发 keywords: Linux, Lichee, TH1520, SBC, RISCV, Kernel, SDK, Develop update: date: 2023 05 12 version: v1.1 author: wonder content: Depart docs date: 2023 05 08 version: v1.0 author: wonder content: Release docs ## Yocto Linux TH1520 的官方开发环境是平头哥的基于 yocto 的开发环境，大家可以在这里获取开发环境： https://gitee.com/thead yocto/ 本节简单介绍如何搭建 Linux Yocto 环境并使用 Yocto 构建可在开发板上运行的完整镜像。 ### 搭建Yocto编译环境 Linux SDK 使用 Yocto 构建镜像。Yocto 编译环境使用 Ubuntu18.04，推荐在 Linux 上使用 Docker 部署,也可直接在 Ubuntu18.04 下搭建环境（见[T Head曳影1520Yocto用户指南.pdf](https://gitee.com/thead yocto/documents/blob/master/zh/user_guide/T Head%E6%9B%B3%E5%BD%B11520Yocto%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf)2.2）。 这里仅介绍 Linux 上使用 Docker 部署的方式。**建议编译机器预留200G磁盘空间，内存为4G以上，编译时间因网络情况差异很大，在使用代理的情况下编译典型linux系统配置（最小系统加上必要的相关基础组件）时间约为1.5h（CPU为i5 11400，时间供参考）**。 使用官方脚本安装 docker \t```bash \tcurl fsSL https://get.docker.com bash s docker mirror Aliyun \t``` 下载 dockerfile 并修改用户名和 ID \t点击下载 [linux dev master.7z](https://gitee.com/thead yocto/documents/blob/master/linux dev master.7z) 并解压后，进入到 `linux dev master` 目录，打开 `Dockerfile`，找到如下语句 \t```bash \tENV DOCKER_USER2 \"your the same user name asyour host\"` \tENV USER2_ID \"your user id\" \t``` \t将 \"your the same user name asyour host\" 改为用户 host os 的用户名，\"your user id\" 的值对应该用户的密码。 构建 docker 镜像环境 \t```bash \tdocker build t linux dev base:base . \t``` \t这里下载的软件包的时候可能会有些报错，可以在 Dockerfile 中进行相应的修改，等到创建好 docker 后登录到 docker 中再进行下载。这个 docker 镜像可以编译 thead 发布的 buildroot、yocto 等 Linux SDK。默认密码为 `123`。 启动 docker \t```bash \tdocker run u thead dt name linux dev {your_name} v {your_lock_home}:{your_home} linux dev base:base /bin/bash \t``` \t{your_name} 为容器名称，起名时不要重名。 \t通过 v 选项可以挂载宿主机的目录，起到类似共享文件的作用，{your_lock_home} 为宿主机的本地路径，{your_home} 为挂载在 docker 里的路径。 查看启动的 docker 容器 \t```bash \tdocker ps grep linux dev base \t``` 就能够看到刚刚启动的 docker 容器。 登录 docker \t```bash \tdocker exec it linux dev {your_name} /bin/bash \t``` 下载开源软件包（仅在第一次获取 SDK 时才需要下载） \t构建固件时会从网上下载开源软件包，若网络较差，下载时间会比较长。为了加速这一过程，可以先到 gitee 下载离线开源软件包（假设下载到用户目录） \t```bash \tcd ~ \tgit clone https://gitee.com/thead yocto/yocto downloads.git \t``` 下载 Yocto 构建包 \t```bash \tgit clone https://gitee.com/thead yocto/xuantie yocto.git b Linux_SDK_V1.1.2 \t``` 加载目标设备的配置文件和环境变量（编译前记得检查是否加载） \t```bash \tcd xuantie yocto \tsource openembedded core/oe init build env thead build/light fm \t``` 将前面下载的开源软件包通过共享 downloads 目录的方式软链接到 SDK 目录 \t```bash \tln s ~/yocto downloads ../downloads \t``` 至此，搭建环境已经完成。 ### Machine/Target支持列表 在上面的加载环境变量步骤中，设置完成后可看到以下信息 ```bash ### Shell environment set up for builds. ### You can now run 'bitbake <target>' Common targets are: thead image linux thead image multimedia thead image gui machines: light beagle light b product light a val light lpi4a ``` 相关说明如下 target（SDK 支持的镜像列表）： 命名描述 thead image linux典型linux系统配置，最小系统加上必要的相关基础组件 thead image multimedia典型linux系统+视频视觉配置，加上视频子系统的组件（Gstreamer等） thead image gui加上GUI相关组件的完整配置版本，包括Gnome桌面、weston、QT等应用组件等等 machines（SDK 支持的板级配置）： 命名描述 light a valTH1520 A EVB板 light b productTH1520 B EVB板 light beaglebeagleV Ahead开发板 light lpi4aLichee Pi 4A开发板 ### 构建镜像 构建命令格式如下： ```bash MACHINE {machine} bitbake {target} ``` 将其中的 {machine} 和 {target} 部分替换为上面两个表格中对应的命名即可。例如，编译一个在 LicheePi 4A 开发板上运行的典型 Linux 镜像的命令如下： ```bash MACHINE light lpi4a bitbake thead image linux ``` #### 构建镜像时可能会出现的问题 由于网络原因，这一步可能仍会出现下载失败或下载很慢的情况，有条件的话推荐使用代理。 报错信息 \t```bash \tPlease use a locale setting which supports utf 8. \tPython can't change the filesystem locale after loading so we need a utf 8 when python starts or things won't work. \t``` \t首先运行如下命令 \t```bash \tsudo apt get install locales \tsudo dpkg reconfigure locales \t``` \t然后在打印出来的列表中找到`en_US.UTF8`这一项（大概在第158项）,输入这一项对应的序号后回车，接下来也选择这一项后回车。 \t完成上述设置步骤后接着运行如下命令（也可考虑将下面的命令加入到docker的`.bashrc`中） \t```bash \tsudo locale gen en_US.UTF 8 \tsudo update locale LC_ALL en_US.UTF 8 LANG en_US.UTF 8 \texport LANG en_US.UTF 8 \t``` \t完成上述步骤后再编译就不会出现原来的报错。 报错信息 \t```bash \tplease install them in order to proceed: lz4c pzstd zstd \t``` \t安装对应的依赖即可 \t```bash \tsudo apt update && sudo apt install y zstd liblz4 tool \t``` ### 镜像打包 在 [light_deploy_images](https://gitee.com/thead yocto/light_deploy_images/tree/master/tarball) 仓库中，包含了一些预发布镜像。对于刚刚编译好的镜像，可以利用这个仓库中的 `sdk.sh` 脚本来进行打包。 首先切换到已经编译好的镜像中的 `light fm` 目录下，将该仓库中的 `sdk.sh` 移动到这里即可。直接运行该脚本 `./sdk.sh` 即可，打包后会生成相应的镜像，相应文件的位置以及镜像目录的结构参考 [light_deploy_images](https://gitee.com/thead yocto/light_deploy_images/tree/master/tarball) 仓库。 最后，可以将 docker 编译好的镜像及相关文件复制到先前通过 v 选项挂载的共享文件夹中，宿主机即可使用该文件进行烧录。 到这里，我们已经完成了编译和打包，得到了一个可以烧录到开发板中运行的镜像。 ### 设备树解析 TODO ### 其他参考资料 **light_deploy_images 仓库：** 包含已经构建好可烧录的 Linux Image，打包镜像脚本以及其他相关工具，详见仓库。 仓库地址：[https://gitee.com/thead yocto/light_deploy_images](https://gitee.com/thead yocto/light_deploy_images) **documents 仓库：** 包含所有发布的 SDK 相关文档 仓库地址：[https://gitee.com/thead yocto/documents](https://gitee.com/thead yocto/documents) <! ## Mainline Linux TODO ## OpenWRT TODO ## Andriod TODO ## OpenHarmony TODO { \"label\":\"THead Yocto\", \"file\":\"lichee/th1520/lpi4a/7_develop_thead.md\" }, { \"label\":\"Mainline Linux\", \"file\":\"lichee/th1520/lpi4a/7_develop_mainline.md\" }, { \"label\":\"Andriod\", \"file\":\"lichee/th1520/lpi4a/7_develop_andriod.md\" }, { \"label\":\"Other\", \"file\":\"lichee/th1520/lpi4a/7_develop_other.md\" } > ## Others 欢迎投稿～ 投稿接受后可得￥5～150（$1~20）优惠券！"},"/hardware/en/lichee/th1520/lpi4a/7_develop_mainline.html":{"title":"系统开发","content":" title: 系统开发 keywords: Linux, Lichee, TH1520, SBC, RISCV, Kernel, SDK, Develop update: date: 2023 05 08 version: v1.0 author: wonder content: Release docs "},"/hardware/en/lichee/th1520/lpi4a/5_desktop.html":{"title":"桌面系统基础使用","content":" title: 桌面系统基础使用 keywords: Linux, Lichee, TH1520, SBC, RISCV, Debian, Desktop update: date: 2023 05 08 version: v1.0 author: wonder content: Release docs ## 登录系统 本篇文档以默认的 Debian 桌面系统为例，介绍基础系统使用操作。 将 LicheePi 4A 连接上显示器后，可以看到图形化交互界面了。 在登录界面，输入用户名 `sipeed`，密码 `licheepi` 就可以登录进系统了。 > 总共有三个用户，`root`，`debian`，`sipeed`，初始密码均为`licheepi` > 有些版本的`debian`用户的密码为`sipeed` ![usage_login_userpasserward](./../../../../zh/lichee/th1520/lpi4a/assets/desktop/usage_login_userpasserward.png) ## 打开命令行 在 LicheePi 4A 的 Debian 图形化系统中，使用快捷键 `Ctrl` + `Alt` + `T` 三个组合键可以直接打开命令行终端，来快速方便地操作系统。 ![usage_debian_terminal_shell_hotkey](./../../../../zh/lichee/th1520/lpi4a/assets/desktop/usage_debian_terminal_shell_hotkey.png) ## 连接网络 ### 连接有线网络 LicheePi 4A 由两个千兆网络接口；将已经接通网络的网线插入到 LicheePi 4A 的网络接口中节能实现连接有线网络了。 <table> <tr> <td>插上网线之前</td> <td>插上网线之后</td> </tr> <tr> <td><img src \"./../../../../zh/lichee/th1520/lpi4a/assets/desktop/usage_debian_ethernet_port_disconnect_one.png\" alt \"usage_debian_ethernet_port_connect_one\"></td> <td><img src \"./../../../../zh/lichee/th1520/lpi4a/assets/desktop/usage_debian_ethernet_port_connect_one.png\" alt \"usage_debian_ethernet_port_connect_one\"></td> </tr> <tr> <td colspan 2> 上面两张图对比可以看到：在接上网线前，系统中 <code>Ethernet Network</code> 下面显示着 <code>disconnected</code>, 接上网线后显示 <code>Wired connection </code></td> </tr> </table> ### 连接无线网络 LicheePi 4A 板载无线模组，支持蓝牙和 wifi 。 从状态栏中的 `Avaliable networks` 中查看自己想要连接到的无线网络，输入密码之后就自动连接上了。 <table> <tr> <td colspan 2><img src \"./../../../../zh/lichee/th1520/lpi4a/assets/desktop/usage_debian_select_wireless_network.png\" alt \"usage_debian_select_wireless_network\"></td> </tr> <tr> <td><img src \"./../../../../zh/lichee/th1520/lpi4a/assets/desktop/usage_debian_wireless_network_password.png\" alt \"usage_debian_wireless_network_password\"></td> <td><img src \"./../../../../zh/lichee/th1520/lpi4a/assets/desktop/usage_debian_wireless_network_connected.png\" alt \"usage_debian_wireless_network_connected\"></td> </tr> </table> 在输入密码的弹出窗口中，`Wi Fi adapter` 中需要选择 `wlan0` 来连接网络。 <! ## TODO 连接蓝牙 > ## 软件安装 在完成网络连接后，即可进行软件包的更新，安装。 ### 软件源 在 Debian 系统中，可以使用 apt (Advanced Packaging Tool) 来进行软件的安装。 安装软件的时候，会从系统指定的软件网站中搜索并下载目标软件，当目标网站访问困难（比如服务器距离太远或者服务器网络不佳）时，可以手动设置编辑软件源网站，改成距离自己当前最近的源，来减少下载时间。 软件源默认使用 `/etc/apt/sources.list` 文件里面的内容，有额外需要的话可以自行更改。但是要注意需要使用支持 Risc V 架构的软件源。 ![usage_debian_apt_change_source](./../../../../zh/lichee/th1520/lpi4a/assets/desktop/usage_debian_apt_change_source.png) ### 升级软件 使用 `sudo apt update` 可以更新软件列表，一般在更换软件源之后需要使用这个命令。 然后使用 `sudo apt upgrade package_name` 可以更新名称为 `package_name` 的软件。 比如下面是使用 `sudo apt upgrade vim` 来更新 `vim` 这个软件的示例 ![usage_debian_apt_upgrade_vim](./../../../../zh/lichee/th1520/lpi4a/assets/desktop/usage_debian_apt_upgrade_vim.png) ### 安装程序 可以借助于 apt 命令来安装软件；比如使用 `sudo apt install package_name` 命令来安装 `package_name`，下面是使用 apt 来安装 `net tools` 的例子。 ![usage_debian_apt_install_nettools](./../../../../zh/lichee/th1520/lpi4a/assets/desktop/usage_debian_apt_install_nettools.png) 安装 `net tools` 后，就可以使用 `ifconfig` 命令了。 ![usage_debian_ifconfig_result_list](./../../../../zh/lichee/th1520/lpi4a/assets/desktop/usage_debian_ifconfig_result_list.png) 箭头指向的地方就是常说的 IP 地址了。 ## SSH 如果你的镜像里没有 ssh 或 sshd 指令，可以先通过以下指令安装： ```bash sudo apt install ssh openssh server ``` 安装之后即可使用 ssh 来远程登录到其它机器操作，或者在其它机器上使用 ssh 登录到 LicheePi 4A 还可以使用 scp 进行文件传输： ```bash scp demo.zip sipeed@192.168.1.9:~/ ``` ## 输入法 如果你需要进行非 ascii 的字符输入，就需要安装输入法，这里以中文输入法为例，其它语言请自行查找相关教程。 先安装 ibus libpinyin： ```bash sudo apt install y ibus libpinyin ``` > 注意这里会消耗约200MB磁盘空间 安装完后，重启板卡，即可在 Applications 下看到 `IBus Preference` 选项，点击进入设置。 ![pinyin_cfg0](./../../../../zh/lichee/th1520/lpi4a/assets/desktop/pinyin_cfg0.png) 在出现的界面里点击 `Input Method`，点击 `Add`，选择 `Chinese`，选择 `Intelligent Pinyin`，点击 `Add`，即可添加中文拼音输入法。 ![pinyin_cfg1](./../../../../zh/lichee/th1520/lpi4a/assets/desktop/pinyin_cfg1.png) 在右上角点击输入法图标，可见以下选项，选择 `Chinese Intelligent Pinyin` 即可。 ![pinyin_cfg2](./../../../../zh/lichee/th1520/lpi4a/assets/desktop/pinyin_cfg2.png) 此时即可在系统中顺利输入中文： ![pinyin_cfg3](./../../../../zh/lichee/th1520/lpi4a/assets/desktop/pinyin_cfg3.png) > 注：在 0425 版本镜像中，可能会由于 GPU 支持问题，导致安装了输入法后，出现图形界面卡顿滞后的问题。 ## 办公软件 部分镜像内置了基础的 Office 办公软件（LibreOffice）： ![office0](./../../../../zh/lichee/th1520/lpi4a/assets/desktop/office0.png) LibreOffice Calc 即 XLS 功能： ![office_calc](./../../../../zh/lichee/th1520/lpi4a/assets/desktop/office_calc.png) LibreOffice Impress 即 PPT 功能： ![office_impress](./../../../../zh/lichee/th1520/lpi4a/assets/desktop/office_impress.png) LibreOffice Writer 即 WORD 功能： ![office_writer](./../../../../zh/lichee/th1520/lpi4a/assets/desktop/office_writer.png) ## 浏览器 系统内置了火狐浏览器（Firefox）： ![browser0](./../../../../zh/lichee/th1520/lpi4a/assets/desktop/browser0.png) 使用搜索引擎： ![browser_bing](./../../../../zh/lichee/th1520/lpi4a/assets/desktop/browser_bing.png) 观看在线视频： ![browser_bili](./../../../../zh/lichee/th1520/lpi4a/assets/desktop/browser_bili.png) > 注：由于目前（0425）版本还未完全适配好 GPU，视频编解码使用 CPU 软解，所以浏览器下播放视频占用率较高。实际性能以未来的 GPU 适配完成的镜像为准。 ## 播放器 系统内置了一些开源播放器，我们建议使用 VLC Player 作为视频播放器 ![player](./../../../../zh/lichee/th1520/lpi4a/assets/desktop/player.png) ## 编程开发 ### Python 系统已内置了 python3 环境，可以在终端直接运行： ![python](./../../../../zh/lichee/th1520/lpi4a/assets/desktop/python.png) 如果需要安装Python包，则使用：`sudo apt install python3 XXX` 比如安装pyserial包：`sudo apt install python3 serial` 即可 ### C 需要安装 `build essential` 包，占用约800MB磁盘空间 ```bash sudo apt install build essential ``` 然后即可使用 gcc 进行相关编译操作： ![gcc](./../../../../zh/lichee/th1520/lpi4a/assets/desktop/gcc.png) ## 扩展存储空间 内测版板载 eMMC 容量较小，留给用户的空间只有 2～3GB，如果需要进行大容量存储，则需要扩展存储空间，可选使用 USB 存储或者 TF 存储。 ### 挂载 U 盘 将一个 U 盘插入 LicheePi 4A 的 USB 口后，可以在命令终端窗口使用 `dmesg` 查看板卡硬件变动信息。 如下是连接 U 盘后，使用 `dmesg` 在命令行终端看到的最新信息（截取）。 ![usage_debian_udisk_dmesg](./../../../../zh/lichee/th1520/lpi4a/assets/desktop/usage_debian_udisk_dmesg.png) 上面的信息显示出了板卡的外设更改信息；从中可以看到有一个大容量 USB 存储设备连接到了 LicheePi 4A。 使用命令 `cat /proc/partitions grep \"sd*\"` 命令可以查看到 U 内部的分区个数 ![usage_debian_udisk_partition_detail](./../../../../zh/lichee/th1520/lpi4a/assets/desktop/usage_debian_udisk_partition_detail.png) 以上面的结果为例，其中 `sda` 指代的是整个 U 盘，`sda1` 和 `sda2` 表示的是 U 盘里面的两个分区。 先在桌面系统创建一个文件夹，然后使用 `mount` 命令将 U 盘的某一分区挂载到该文件夹下。 ```bash mkdir ~/Desktop/udisk # 在桌面创建一个名为 udisk 的文件夹 mount /dev/sda2 ~/Desktop/udisk # 挂载 U 盘的 sda2 分区到 udisk 文件夹 ``` <table> <tr> <td> 运行命令前 </td> <td> 运行命令后 </td> </tr> <tr> <td style \"white space:nowrap\"><img src \"./../../../../zh/lichee/th1520/lpi4a/assets/desktop/usage_debian_udisk_before_mount.png\" alt \"usage_debian_udisk_before_mount\"></td> <td style \"white space:nowrap\"><img src \"./../../../../zh/lichee/th1520/lpi4a/assets/desktop/usage_debian_udisk_after_mount.png\" alt \"usage_debian_udisk_after_mount\"></td> </tr> <tr> <td colspan 2> 运行命令后桌面新增了一个名为 udisk 的文件夹，使用鼠标双击打开 udisk 文件夹后可以看到文件夹里面的内容与 U 盘里面的实际内容一致 <img src \"./../../../../zh/lichee/th1520/lpi4a/assets/desktop/usage_debian_udisk_open_folder.png\" alt \"usage_debian_udisk_open_folder\"></td> </tr> </table> ### 挂载 TF卡 将 TF 卡插入 LicheePi 4A 背面的 TF 卡槽中，即可在系统下看到 `/dev/mmcblk1` 设备 （/dev/mmcblk0 是 SOM 上的 eMMC） 如果 TF 卡尚未分区或者格式化，用户可以使用 `sudo fdisk /dev/mmcblk1` 指令进行分区， 然后使用 `sudo mkfs.ext4 /dev/mmcblk1p1` 或者 `sudo mkfs.vfat /dev/mmcblk1p1` 对新建的分区进行格式化操作。 如果想作为扩展分区使用，建议使用 ext4；如果想作为与 Windows 交换数据的 TF 卡，建议使用 vfat。 格式化好后，即可与上节内容一样进行挂载操作，确认是否挂载正常。 ### 设置开机挂载 验证手工挂载成功后，你可以进一步设置开机挂载。 只需要在 /etc/fstab 文件内加上需要开机自动挂载的设备信息即可，以下是在最后一行添加TF卡自动挂载的示例。 ```bash sipeed@lpi4a:~$ cat /etc/fstab # UNCONFIGURED FSTAB FOR BASE SYSTEM /dev/mmcblk0p3 / auto defaults 1 1 /dev/mmcblk0p2 /boot auto defaults 0 0 /dev/mmcblk1p1 /mnt auto defaults 0 2 ``` 第一个数字：0 表示开机不检查磁盘，1 表示开机检查磁盘； 第二个数字：0 表示交换分区，1 代表启动分区（Linux），2 表示普通分区 /dev/mmcblk1p1 也可使用磁盘 UUID，即写成 UUIS xxxx xxx 的形式，UUID 可以使用`sudo blkid`查看： `/dev/mmcblk1p1: UUID \"033173ff b3ab 494c ab14 4dcd656a9214\" BLOCK_SIZE \"4096\" TYPE \"ext4\" PARTUUID \"8e4e28df 01\"` ## 更多 欢迎投稿～ 投稿接受后可得￥5～150（$1~20）优惠券！"},"/hardware/en/lichee/th1520/lpi4a/11_credits.html":{"title":"致谢","content":" title: 致谢 keywords: Linux, Lichee, TH1520, SBC, RISCV, credits update: date: 2023 05 08 version: v1.0 author: wonder content: Release docs 本章节专门向 LicheePi 4A 作出贡献的个人和团体致谢！ 感谢你们的贡献让 RISC V 发展得更快更好！ （本文按个人意愿以真名或者网名进行致谢） ## 矽速 泽畔，阔爷，瀚宝，wonder，ztd，... ## 平头哥 春强，陈炜，穆呈，陆斌，... 特别感谢 陆斌 同学的全程沟通！ ## PLCT Wu Wei：感谢吴老板大力支持！老板大气！ [Icenowy Zheng](https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/log/?qt author&q Icenowy+Zheng)：冰激凌，永远的神，手打 binary patch，真人快打！ 高涵：revyos之父！ Estela ad Astra：预订 OpenWRT！ ## 开源社区 [Jisheng Zhang](https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/log/?qt author&q Jisheng+Zhang): TH1520 主线化支持 范文捷：Wine CE 作者，在 LPi4A 上进行相关移植测试。"},"/hardware/en/lichee/th1520/lpi4a/usage.html":{"title":"LicheePi 4A 基础上手","content":"# LicheePi 4A 基础上手 ## 需要的配件 为了更容易地使用 LicheePi 4A，需要准备以下的配件: HDMI 显示器，或者与 LicheePi 4A 拍套售卖的显示屏；图形化操作系统很方便操作。 键盘和鼠标；用来操作图形化系统。 电源适配器；最好购买与 LicheePi 4A 配套的电源适配器；这会给 LicheePi 4A 提供足够的供电。 ## 烧录系统 ### 获取镜像 百度网盘：[点我](https://pan.baidu.com/s/1jnjz0KO_xnO5R8tWlXtx0A) ### 烧录系统 烧录镜像需要使用 参考：https://gitee.com/thead yocto/light_deploy_images ## 串口登录 20230423 记录: > 当前图形化系统显示驱动有一些问题，先使用串口登录到系统后，删除 `/lib/libGLESv1_CM_PVR_MESA.so` 和`/lib/libGLESv2_PVR_MESA.so` 两个文件后，可以流畅的使用图形化系统了 使用串口连接上底板上 GPIO 的 `U0 RX` 和 `U0 TX`，然后打开串口软件，`Windows` 上可以使用 `mobaxterm`，`Linux` 系统可以使用 `minicom`。 设置波特率 `115200` 后打开选择并打开连接在电脑上的串口端口，然后在打开串口后的终端里可以敲击几次 **回车键** 来看看终端有没有反应. ![usage_serial_login_test](./../../../../zh/lichee/th1520/lpi4a/assets/usage/usage_serial_login_test.png) 如果没有反应： 1. 检查 Lichee Pi 4A 的供电情况；如果底板 TypeC 附近的 LED 亮起来，说明供电正常。 2. 检查串口引脚接线情况；可以更换 `TX` 和 `RX` 接线来尝试排除串口接线错误导致串口不能正常通信的情况 3. 检查系统烧录情况；在底板 TypeC 接口与天线接口之间有一个复位按键，尝试按下后可以从串口终端中开到启动信息日志；多次重启说明系统有缺失，需要重新烧录镜像。 输入用户名 `root`，密码 `sipeed` 就可以登录进系统了。 登录系统后，使用 `rm /lib/libGLESv1_CM_PVR_MESA.so` 和`rm /lib/libGLESv2_PVR_MESA.so` 命令来删除两处文件，暂时解决图形化系统卡顿的情况。 ![usage_login_remove_gpu_file](./../../../../zh/lichee/th1520/lpi4a/assets/usage/usage_login_remove_gpu_file.png) ## 登录系统 将 Lichee Pi 4A 连接上显示器后，可以看到图形化交互界面了。 在登录界面，输入用户名 `root`，密码 `sipeed` 就可以登录进系统了。 > 2023 年 4 月 25 日更新镜像的登录密码为 `licheepi` ![usage_login_userpasserward](./../../../../zh/lichee/th1520/lpi4a/assets/usage/usage_login_userpasserward.png) ## 打开命令行 在 Lichee Pi 4A 的 Debian 图形化系统中，使用快捷键 `Ctrl` + `Alt` + `T` 三个组合键可以直接打开命令行终端，来快速方便地操作系统。 ![usage_debian_terminal_shell_hotkey](./../../../../zh/lichee/th1520/lpi4a/assets/usage/usage_debian_terminal_shell_hotkey.png) ## 控制风扇 在 Lichee Pi 4A 上，风扇是通过 PWM 来控制的，使用 ## 连接网络 ### 连接有线网络 Lichee Pi 4A 由两个千兆网络接口；将已经接通网络的网线插入到 Lichee Pi 4A 的网络接口中节能实现连接有线网络了。 <table> <tr> <td>插上网线之前</td> <td>插上网线之后</td> </tr> <tr> <td><img src \"./../../../../zh/lichee/th1520/lpi4a/assets/usage/usage_debian_ethernet_port_disconnect_one.png\" alt \"usage_debian_ethernet_port_connect_one\"></td> <td><img src \"./../../../../zh/lichee/th1520/lpi4a/assets/usage/usage_debian_ethernet_port_connect_one.png\" alt \"usage_debian_ethernet_port_connect_one\"></td> </tr> <tr> <td colspan 2> 上面两张图对比可以看到：在接上网线前，系统中 <code>Ethernet Network</code> 下面显示着 <code>disconnected</code>, 接上网线后显示 <code>Wired connection </code></td> </tr> </table> ### 连接无线网络 Lichee Pi 4A 板载无线模组，支持蓝牙和 wifi 。 从状态栏中的 `Avaliable networks` 中查看自己想要连接到的无线网络，输入密码之后就自动连接上了。 <table> <tr> <td colspan 2><img src \"./../../../../zh/lichee/th1520/lpi4a/assets/usage/usage_debian_select_wireless_network.png\" alt \"usage_debian_select_wireless_network\"></td> </tr> <tr> <td><img src \"./../../../../zh/lichee/th1520/lpi4a/assets/usage/usage_debian_wireless_network_password.png\" alt \"usage_debian_wireless_network_password\"></td> <td><img src \"./../../../../zh/lichee/th1520/lpi4a/assets/usage/usage_debian_wireless_network_connected.png\" alt \"usage_debian_wireless_network_connected\"></td> </tr> </table> 在输入密码的弹出窗口中，`Wi Fi adapter` 中的两个选项都能用来链接无线网络，选择一个即可。 <! ## 连接蓝牙 > ## 测试 USB 接口 使用桌面系统时，键盘鼠标正常使用就说明 USB 是正常的。 当然，只有命令行终端时，使用 `lsusb` 命令可以查看当前板卡上所连接的 USB 设备。 如下图，箭头所指的是已经接上 Lichee Pi 4A 的键盘。 ![usage_debian_lsusb_list_device](./../../../../zh/lichee/th1520/lpi4a/assets/usage/usage_debian_lsusb_list_device.png) ## 挂载 U 盘 除了上面使用 `lsusb` 来查看 USB 接口的连接情况外，也可以使用 `dmesg` 命令来查看内核信息，进一步查看详细信息。 将一个 U 盘插入 Lichee Pi 4A 的 USB 口后，可以在命令终端窗口使用 `dmesg` 查看板卡硬件变动信息。 如下是连接 U 盘后，使用 `dmesg` 在命令行终端看到的最新信息（截取）。 ![usage_debian_udisk_dmesg](./../../../../zh/lichee/th1520/lpi4a/assets/usage/usage_debian_udisk_dmesg.png) 上面的信息显示出了板卡的外设更改信息；从中可以看到有一个大容量 USB 存储设备连接到了 Lichee Pi 4A。 使用命令 `cat /proc/partitions grep \"sd*\"` 命令可以查看到 U 内部的分区个数 ![usage_debian_udisk_partition_detail](./../../../../zh/lichee/th1520/lpi4a/assets/usage/usage_debian_udisk_partition_detail.png) 以上面的结果为例，其中 `sda` 指代的是整个 U 盘，`sda1` 和 `sda2` 表示的是 U 盘里面的两个分区。 先在桌面系统创建一个文件夹，然后使用 `mount` 命令将 U 盘的某一分区挂载到该文件夹下。 ```bash mkdir ~/Desktop/udisk # 在桌面创建一个名为 udisk 的文件夹 mount /dev/sda2 ~/Desktop/udisk # 挂载 U 盘的 sda2 分区到 udisk 文件夹 ``` <table> <tr> <td> 运行命令前 </td> <td> 运行命令后 </td> </tr> <tr> <td style \"white space:nowrap\"><img src \"./../../../../zh/lichee/th1520/lpi4a/assets/usage/usage_debian_udisk_before_mount.png\" alt \"usage_debian_udisk_before_mount\"></td> <td style \"white space:nowrap\"><img src \"./../../../../zh/lichee/th1520/lpi4a/assets/usage/usage_debian_udisk_after_mount.png\" alt \"usage_debian_udisk_after_mount\"></td> </tr> <tr> <td colspan 2> 运行命令后桌面新增了一个名为 udisk 的文件夹，使用鼠标双击打开 udisk 文件夹后可以看到文件夹里面的内容与 U 盘里面的实际内容一致 <img src \"./../../../../zh/lichee/th1520/lpi4a/assets/usage/usage_debian_udisk_open_folder.png\" alt \"usage_debian_udisk_open_folder\"></td> </tr> </table> ## 挂载 TF 卡 将 tf 卡插入到 Lichee Pi 4A 底板，使用 ## 音频测试 ### 测试音频播放 Lichee Pi 4A 底板上有扬声器接口和 3.5mm 音频接口两处可以播放音频的地方。 要注意的是 3.5mm 音频接口和扬声器接口是互斥的：接上 3.5mm 音频设备后，板载的扬声器接口是被禁用的；断开 3.5mm 音频设备才能使用板载的扬声器。 系统内置了一些 wav 音频文件用来测试，直接使用 `aplay` 命令来播放音频文件就可以。 ![usage_debian_list_audio_file](./../../../../zh/lichee/th1520/lpi4a/assets/usage/usage_debian_list_audio_file.png) 运行下面的命令后，可以从耳机孔音频设备中听到 `Rear` `Left` 两个单词的声音。 ```bash aplay /usr/share/sounds/alsa/Rear_Left.wav ``` ## 设置中文显示 ## 安装中文输入法 ## 更换软件源 在 Debian 系统中，可以使用 apt (Advanced Packaging Tool) 来进行软件的安装。 安装软件的时候，会从系统指定的软件网站中搜索并下载目标软件，当目标网站访问困难（比如服务器距离太远或者服务器网络不佳）时，可以手动设置编辑软件源网站，改成距离自己当前最近的源，来减少下载时间。 软件源默认使用 `/etc/apt/sources.list` 文件里面的内容，有额外需要的话可以自行更改。但是要注意需要使用支持 Risc V 架构的软件源。 ![usage_debian_apt_change_source](./../../../../zh/lichee/th1520/lpi4a/assets/usage/usage_debian_apt_change_source.png) ## 升级软件 使用 `sudo apt update` 可以更新软件列表，一般在更换软件源之后需要使用这个命令。 然后使用 `sudo apt upgrade package_name` 可以更新名称为 `package_name` 的软件。 比如下面是使用 `sudo apt upgrade vim` 来更新 `vim` 这个软件的示例 ![usage_debian_apt_upgrade_vim](./../../../../zh/lichee/th1520/lpi4a/assets/usage/usage_debian_apt_upgrade_vim.png) ## 安装程序 可以借助于 apt 命令来安装软件；比如使用 `sudo apt install package_name` 命令来安装 `package_name`，下面是使用 apt 来安装 `net tools` 的例子。 ![usage_debian_apt_install_nettools](./../../../../zh/lichee/th1520/lpi4a/assets/usage/usage_debian_apt_install_nettools.png) 安装 `net tools` 后，就可以使用 `ifconfig` 命令了。 ![usage_debian_ifconfig_result_list](./../../../../zh/lichee/th1520/lpi4a/assets/usage/usage_debian_ifconfig_result_list.png) 箭头指向的地方就是常说的 IP 地址了。 ## 更改开机 LOGO ## 操作 GPIO > 进阶使用 ## 获取设备 IP ## VNC 远程桌面 ## 通过 SSH 登录到系统 ### 远程登录到系统 ### 远程拷贝文件 ## Samba 文件共享 Samba 基于SMB/CIFS网络协议，不同设备之间可以通过该协议共享访问文件、串行端口等，这里通过它将 Windows 10 系统设备上的共享文件夹挂载至 Lichee Pi 4A。 下面的命令会自动安装 Samba 作为服务器和客户端的全部必需组件： ```bash sudo apt install samba samba common bin smbclient cifs utils ``` ## 搭建 FTP 服务 ## 配置 NGINX ## 安装 Docker ## 测试 GPU ## 编程语言体验 ### C ### Java ### Python ## 使用 Python 进行串口通信 ## 编译体验 Opencv ## 编译体验 Wiringpi ## 配置开机脚本 ### 开机自动挂载 U 盘"},"/hardware/en/lichee/th1520/lpi4a/4_burn_image.html":{"title":"烧录镜像","content":" title: 烧录镜像 keywords: Linux, Lichee, TH1520, SBC, RISCV, image update: date: 2023 05 08 version: v1.0 author: wonder content: Release docs ## 准备工作 ### 获取镜像 参见上一章“镜像集合”，选取需要的镜像下载。 以下的烧录方式以 Debian 镜像 `LPi4A_Test_0425.7z` 为例。 ### 获取烧录工具 在镜像集合的网盘内可以获得 `burn_tool.zip`, 解压可得 win/linux/mac 三个系统下的 fastboot 烧录工具。 ## 进入烧录模式 注意不同版本硬件进入烧录模式的方式略有不同，参见以下章节。 ### 内测版硬件 按住板上的BOOT按键不放，然后插入 USB C 线缆上电（线缆另一头接 PC ），即可进入 USB 烧录模式。 ![press_boot](./../../../../zh/lichee/th1520/lpi4a/assets/burn_image/press_boot.png) 在 Windows 下使用设备管理器查看，会出现 “USB download gadget” 设备。 在 Linux 下，使用 `lsusb` 查看设备，会显示以下设备： `ID 2345:7654 T HEAD USB download gadget` ### 正式版硬件 TODO ### Windows 下驱动安装 Windows 下初次使用需要安装驱动，注意由于该驱动未经过数字签名，需要用户手工禁用数字签名。 ![before_install_driver](./../../../../zh/lichee/th1520/lpi4a/assets/burn_image/before_install_driver.png) ![install_driver](./../../../../zh/lichee/th1520/lpi4a/assets/burn_image/install_driver.png) ## 烧录镜像 进入烧录模式后，可使用 burn_tool.zip 内的 fastboot 进行烧录操作，注意可能需要先赋予 fastboot 可执行权限。 以 linux 下为例： ```bash sudo ./fastboot flash ram ./images/u boot with spl.bin sudo ./fastboot reboot sleep 10 sudo ./fastboot flash uboot ./images/u boot with spl.bin sudo ./fastboot flash boot ./images/boot.ext4 sudo ./fastboot flash root ./images/rootfs.ext4 ``` 前面3行指令会检查并格式化分区，请务必执行，否则后面烧录 rootfs 会很慢。 `boot.ext4` 为 boot 分区，包含以下内容： ```bash fw_dynamic.bin #opensbi Image #kernel image kernel release #commit id of kernel light_aon_fpga.bin #fw for E902 aon light_c906_audio.bin #fw for C906 audio light lpi4a.dtb #1.85GHz dtb light lpi4a_2Ghz.dtb #2GHz overclock dtb light lpi4a ddr2G.dtb #history dtb ``` `rootfs.ext4` 为根文件系统，默认为 Debian 系统。 烧录镜像的典型 log 输出如下： ![](./../../../../zh/lichee/th1520/lpi4a/assets/burn_image/burn_image_progress_result.png) <! ```bash (base) pc@n5105:~/work/$ sudo ./fastboot flash ram u boot with spl.bin Sending 'ram' (935 KB) OKAY [ 0.248s] Writing 'ram' OKAY [ 0.002s] Finished. Total time: 0.255s (base) pc@n5105:~/work/$ sudo ./fastboot reboot Rebooting OKAY [ 0.001s] Finished. Total time: 0.202s (base) pc@n5105:~/work/$ sudo ./fastboot flash uboot u boot with spl.bin Sending 'uboot' (935 KB) OKAY [ 0.054s] Writing 'uboot' OKAY [ 0.030s] Finished. Total time: 0.107s (base) pc@n5105:~/work/$ sudo ./fastboot flash boot boot_20230420.ext4 Sending 'boot' (40000 KB) OKAY [ 1.705s] Writing 'boot' OKAY [ 0.877s] Finished. Total time: 2.770s (base) pc@n5105:~/work/$ sudo ./fastboot flash root rootfs 20230425 001635 nogpu.ext4 Invalid sparse file format at header magic Sending sparse 'root' 1/37 (114572 KB) OKAY [ 4.793s] Writing 'root' OKAY [ 3.087s] Sending sparse 'root' 2/37 (105264 KB) OKAY [ 4.465s] Writing 'root' OKAY [ 2.330s] Sending sparse 'root' 3/37 (111970 KB) OKAY [ 4.814s] Writing 'root' OKAY [ 2.861s] Sending sparse 'root' 4/37 (114684 KB) OKAY [ 4.902s] Writing 'root' OKAY [ 2.658s] Sending sparse 'root' 5/37 (101490 KB) OKAY [ 4.305s] Writing 'root' OKAY [ 2.652s] Sending sparse 'root' 6/37 (114684 KB) OKAY [ 4.648s] Writing 'root' OKAY [ 2.657s] Sending sparse 'root' 7/37 (113862 KB) OKAY [ 4.755s] Writing 'root' OKAY [ 2.826s] Sending sparse 'root' 8/37 (111189 KB) OKAY [ 4.741s] Writing 'root' OKAY [ 2.695s] Sending sparse 'root' 9/37 (114625 KB) OKAY [ 4.865s] Writing 'root' OKAY [ 2.660s] Sending sparse 'root' 10/37 (104030 KB) OKAY [ 4.506s] Writing 'root' OKAY [ 4.108s] Sending sparse 'root' 11/37 (111701 KB) OKAY [ 4.744s] Writing 'root' OKAY [ 2.717s] Sending sparse 'root' 12/37 (107317 KB) OKAY [ 4.568s] Writing 'root' OKAY [ 2.583s] Sending sparse 'root' 13/37 (114629 KB) OKAY [ 4.830s] Writing 'root' OKAY [ 2.753s] Sending sparse 'root' 14/37 (109798 KB) OKAY [ 4.711s] Writing 'root' OKAY [ 2.778s] Sending sparse 'root' 15/37 (112203 KB) OKAY [ 4.795s] Writing 'root' OKAY [ 2.982s] Sending sparse 'root' 16/37 (112502 KB) OKAY [ 4.827s] Writing 'root' OKAY [ 2.991s] Sending sparse 'root' 17/37 (114110 KB) OKAY [ 4.849s] Writing 'root' OKAY [ 2.853s] Sending sparse 'root' 18/37 (114681 KB) OKAY [ 4.888s] Writing 'root' OKAY [ 2.802s] Sending sparse 'root' 19/37 (112042 KB) OKAY [ 4.799s] Writing 'root' OKAY [ 3.674s] Sending sparse 'root' 20/37 (109101 KB) OKAY [ 4.631s] Writing 'root' OKAY [ 2.582s] Sending sparse 'root' 21/37 (114225 KB) OKAY [ 4.623s] Writing 'root' OKAY [ 2.782s] Sending sparse 'root' 22/37 (114365 KB) OKAY [ 4.703s] Writing 'root' OKAY [ 2.667s] Sending sparse 'root' 23/37 (103529 KB) OKAY [ 4.133s] Writing 'root' OKAY [ 2.442s] Sending sparse 'root' 24/37 (114664 KB) OKAY [ 4.631s] Writing 'root' OKAY [ 2.581s] Sending sparse 'root' 25/37 (114550 KB) OKAY [ 4.749s] Writing 'root' OKAY [ 2.878s] Sending sparse 'root' 26/37 (114686 KB) OKAY [ 4.796s] Writing 'root' OKAY [ 2.853s] Sending sparse 'root' 27/37 (114466 KB) OKAY [ 4.800s] Writing 'root' OKAY [ 2.894s] Sending sparse 'root' 28/37 (110689 KB) OKAY [ 4.711s] Writing 'root' OKAY [ 2.616s] Sending sparse 'root' 29/37 (114687 KB) OKAY [ 4.880s] Writing 'root' OKAY [ 2.992s] Sending sparse 'root' 30/37 (110984 KB) OKAY [ 4.710s] Writing 'root' OKAY [ 2.451s] Sending sparse 'root' 31/37 (114685 KB) OKAY [ 4.920s] Writing 'root' OKAY [ 2.749s] Sending sparse 'root' 32/37 (114684 KB) OKAY [ 4.825s] Writing 'root' OKAY [ 2.503s] Sending sparse 'root' 33/37 (114684 KB) OKAY [ 4.816s] Writing 'root' OKAY [ 3.262s] Sending sparse 'root' 34/37 (114686 KB) OKAY [ 4.745s] Writing 'root' OKAY [ 2.825s] Sending sparse 'root' 35/37 (114684 KB) OKAY [ 4.913s] Writing 'root' OKAY [ 2.630s] Sending sparse 'root' 36/37 (114684 KB) OKAY [ 4.838s] Writing 'root' OKAY [ 2.593s] Sending sparse 'root' 37/37 (21324 KB) OKAY [ 0.926s] Writing 'root' OKAY [ 0.487s] Finished. Total time: 281.671s ``` > ## 启动机制 brom > uboot spl > uboot > opensbi > kernel TODO ## 批量烧录 如果你有商业需求，需要批量烧录固件，可以使用 sipeed 提供的 ARM/RV 版 fastboot 制作离线批量烧录器。 如果你需要烧录的数量很大，也可以直接联系 support@sipeed.com，我们提供预烧录镜像服务。"},"/hardware/en/lichee/th1520/lpi4a/1_intro.html":{"title":"板卡介绍","content":" title: 板卡介绍 keywords: Linux, Lichee, TH1520, SBC, RISCV update: date: 2023 05 08 version: v1.0 author: wonder content: Release docs English documents are being translated, please read these documents via web translate application at present if necessary . ## 简介 LicheePi 4A 是基于 [Lichee Module 4A](http://wiki.sipeed.com/hardware/zh/lichee/th1520/lm4a.html) 核心板的 高性能 RISC V Linux 开发板，以 [TH1520](https://www.t head.cn/product/yeying) 为主控核心（4xC910@1.85G， RV64GCV，4TOPS@int8 NPU， 50GFLOP GPU），板载最大 16GB 64bit LPDDR4X，128GB eMMC，支持 HDMI+MIPI 双4K 显示输出，支持 4K 摄像头接入，双千兆网口（其中一个支持POE供电）和 4 个 USB3.0 接口，多种音频输入输出（由专用 C906 核心处理）。 ![lpi4a](./../../../../zh/lichee/th1520/lpi4a/assets/intro/lpi4a.png) LicheePi 4A 是截止目前（2023Q2）为止最强的 RISC V SBC。性能约为上一代 RISC V SBC [VisionFive2](https://www.starfivetech.com/en/site/boards)的2倍；未开启专用指令集加速的情况下，性能逼近基于 ARM A72 的树莓派 4，在开启相关指令集加速的情况下，可以与树莓派 4 持平。而且最高具备 16GB 超大内存，是树莓派 4 最高配置 8GB 内存的两倍！ ![benchmark](./../../../../zh/lichee/th1520/lpi4a/assets/intro/benchmark.png) ![geekbench5](./../../../../zh/lichee/th1520/lpi4a/assets/intro/geekbench5.png) LicheePi 4A 可以用作典型的 RISC V 验证平台，其强大的性能可以较快速地实现本地编译，而无需使用 QEMU 进行编译。 我们在近期（2023Q2）还会放出基于LM4A的集群计算板卡 LicheeCluster 4A，最大支持 7xLM4A 进行集群计算，编译，非常适合发行版编译农场场景，尽情期待。 在保持高性能的同时，我们也尽量进行了 CostDown 设计，8GB 内存版本价格在 ￥749~ 899（\\\\$100 ~ \\\\$130），16GB 内存版本在 ￥1100~1300 （\\\\$155 ~\\\\$185）, 性价比上超越了树莓派 4（8GB ~\\\\$150）! 无论你是否是 RISC V 粉丝，你都值得入手体验下 LicheePi 4A 这款划时代的高性能 RISC V SBC！ ![desktop](./../../../../zh/lichee/th1520/lpi4a/assets/intro/desktop.png) ## 欢迎投稿 本文档为在线文档，托管在 github 上，大家可以点击右上角 `编辑本页` 链接来进行编辑~ 对成功提交文档的用户，我们视文档质量酌情提供 ￥5 ~ 150（\\\\$1 ~ 20）的优惠券~ ## 基础参数 <table> <thead> <tr> <th colspan 2>主控参数</th> </tr> </thead> <tbody> <tr> <td>主控芯片</td> <td>TH1520</td> </tr> <tr> <td>CPU处理器</td> <td>RISC V 64GCV C910*4@2GHz <br>· 每核支持 64KB I cache 和 64KB D Cache <br>· 四核共享 1MB L2 Cache <br>· 支持 TEE 和 REE，TEE/REE 支持核数启动时可配置<br>· 支持自定义且接口兼容 RISC V 的多核调试框架<br>· 独立电源域，支持 DVFS</td> </tr> <tr> <td>图形处理器</td> <td>· OpenCL 1.1/1.2/2.0<br>· OpenGL ES 3.0/3.1/3.2<br>· Vulkan 1.1/1.2<br>· Android NN HAL</td> </tr> <tr> <td>NPU处理器</td> <td>支持 4TOPS@INT8 通用 NNA 算力，主频 1GHz <br>· 支持 TensorFlow、ONNX、Caffe <br>· 支持 CNN、RNN、DNN 等</td> </tr> <tr> <td>视频解码器</td> <td>实时解码器，支持 H.265/H.264/VP9/8/7/6/AVS/AVS+/AVS2.0/VC1/MPEG4 <br>· 支持 H.264 BP/MP/HP@level 5.1 解码，最大 4K 分辨率<br>· 支持 H.265/HEVC Main Profile@level 5.1 解码，最大 4K 分辨率<br>· 支持 VP9 Profile 2 解码，最大 4K 分辨率<br>· 支持 AVS2.0 解码，最大 4K 分辨率<br>· 支持 VP6/7/8/AVS/AVS+/VC1/MPEG4 解码，最大 1920x1080 分辨率<br>· 解码性能最大 4K@75fps</td> </tr> <tr> <td>视频编码器</td> <td>· 支持 H.264 BP/MP/HP@level4.2 编码，最大 4K 分辨率<br>· 支持 H.265/HEVC Main Profile 编码，最大 4K 分辨率<br>· 仅支持 I 帧和 P 帧<br>· 编码性能最大 4K@40fps</td> </tr> <tr> <th colspan 2>硬件特性</th> </tr> <tr> <td>RAM</td> <td>· 8GB 64bits LPDDR4<br>· 16GB 64bits LPDDR4<br></td> </tr> <tr> <td>存储</td> <td>· eMMC: 可选 空贴、 8G、 32G、 128G<br>· 支持 TF 卡</td> </tr> <tr> <td>以太网</td> <td>· 2 x 千兆以太网接口，可选 POE</td> </tr> <tr> <td>USB</td> <td>· USB3.0 x 4<br>· USB2.0 x 1（仅用于烧录）</td> </tr> <tr> <td>音频接口</td> <td>· 1 x 3.5mm 耳机接口<br>· 一个扬声器接口<br>· 两个板载麦克风<br></td> </tr> <tr> <td>显示接口</td> <td>· 1 x HDMI2.0<br>· 1 x 4 lane MIPI DSI</td> </tr> <tr> <td>摄像头接口</td> <td>· 2 x 2 lane MIPI CSI<br>· 1 x 4 lane MIPI CSI</td> </tr> <tr> <td>GPIO</td> <td>· UART<br>· IIC<br>· SPI</td> </tr> </tbody> </table> ### 硬件资料下载 [板卡规格书](https://dl.sipeed.com/shareURL/LICHEE/licheepi4a/01_Specification) [底板原理图](https://dl.sipeed.com/shareURL/LICHEE/licheepi4a/02_Schematic) [底板点位图](https://dl.sipeed.com/shareURL/LICHEE/licheepi4a/03_Bit_number_map) [底板尺寸图](https://dl.sipeed.com/shareURL/LICHEE/licheepi4a/04_Dimensional_drawing) [模型文件](https://dl.sipeed.com/shareURL/LICHEE/licheepi4a/05_3D_model) ## 其他链接 Online store: [Aliexpress](https://www.aliexpress.com/item/1005005532736080.html) [Github](https://github.com/sipeed/LicheePi4A) [Sipeed 下载站](https://dl.sipeed.com/shareURL/LICHEE/licheepi4a) Telegram: https://t.me/linux4rv 联系邮箱：support@sipeed.com"},"/hardware/en/lichee/th1520/lpi4a/8_application.html":{"title":"典型应用","content":" title: 典型应用 keywords: Linux, Lichee, TH1520, SBC, RISCV, application update: date: 2023 05 08 version: v1.0 author: wonder content: Release docs ## llama.cpp llama 是 META 开源的大语言模型，[llama.cpp](https://github.com/ggerganov/llama.cpp) 是 ggerganov 开源的纯 cpp 运行的 llama 推理项目。 感谢 llama.cpp 这个优秀的项目，我们可以在 LicheePi 4A 上运行 LLM。 笔者在早些时候稍微修改了 llama.cpp [https://github.com/Zepan/llama.cpp](https://github.com/Zepan/llama.cpp)，使其可以在更小内存（低至 700MB 左右）运行 7B 模型。 可以看到 TH1520 花费约 6s 计算一个 token（未使用 V 扩展加速，V 扩展加速预计可加速 4～8 倍，如果你加入了 V 扩展支持，欢迎投稿！） ![llama_th1520](./../../../../zh/lichee/th1520/lpi4a/assets/application/llama_th1520.png) 同时还简单测试了下在入门级 C906 内核上运行7B模型的可行性，由于 D1 的内存过小，使用了 mmap 方式只读扩展，所以引入了大量低速 IO 操作，使得运行速度大为降低，最后仅 18s/token ![llama_d1](./../../../../zh/lichee/th1520/lpi4a/assets/application/llama_d1.png) ## Minecraft Server TODO ## Wine CE TODO ## 其它 欢迎投稿～ 投稿接受后可得￥5～150（$1~20）优惠券！"},"/hardware/en/lichee/th1520/lpi4a/6_peripheral.html":{"title":"外设使用","content":" title: 外设使用 keywords: Linux, Lichee, TH1520, SBC, RISCV, Peripheral update: date: 2023 05 08 version: v1.0 author: wonder content: Release docs ## SoC 相关 ### CPU 运行频率 `sudo cat /sys/devices/system/cpu/cpu*/cpufreq/cpuinfo_cur_freq ` 单位为 KHz 注意系统自带温控策略，当系统过于空闲或者温度过高时，都会降频。请保持良好散热，使得 CPU 在 60 度以下，获得最佳性能。 ### 芯片温度 `cat /sys/class/thermal/thermal_zone0/temp` 单位为0.001摄氏度 ### CPU超频 TH1520 默认最大运行频率为 1.85GHz，但是经过初步测试发现，有 80% 左右的芯片可以在 2GHz 运行，有 50% 左右的芯片可以在 2GHz 通过压力测试。 这里放出简易超频步骤，仅供参考，不对稳定性和安全性做保证。 查看`/boot`下的文件： ```bash fw_dynamic.bin #opensbi Image #kernel image kernel release #commit id of kernel light_aon_fpga.bin #fw for E902 aon light_c906_audio.bin #fw for C906 audio light lpi4a.dtb #1.85GHz dtb light lpi4a_2Ghz.dtb #2GHz overclock dtb light lpi4a ddr2G.dtb #history dtb ``` 将 `light lpi4a_2Ghz.dtb` 拷贝覆盖为 `light lpi4a.dtb`，重启，即可修改开机后的最大频率。 注意有一定几率这样修改后无法启动，此时需要重新烧录固件来恢复。 如果成功启动，则可以查看下面的数值确认是否已成功超频： `sudo cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq` ## PWM 以散热风扇所接的 PWM1 为例，可以通过如下代码进行风扇使能操作： ```bash echo 1 > /sys/class/pwm/pwmchip0/export echo 1000000 > /sys/class/pwm/pwmchip0/pwm1/period echo 1000000 > /sys/class/pwm/pwmchip0/pwm1/duty_cycle echo 1 > /sys/class/pwm/pwmchip0/pwm1/enable ``` ## GPIO LicheePi 4A 板载 2x10pin 插针，其中有 16 个原生 IO，包括 6 个普通 IO，3 对串口，一个 SPI。 > 注意：SOC的所有原生IO均是1.8V电平，请注意电平转换。 > 插针上的串口输入侧已经进行了1/2分压处理，可以接3.3V的串口。 TH1520 SOC 具有4个GPIO bank，每个bank最大有32个IO： Bank Address kernel io num GPIO0 0xffec005000 456 487 GPIO1 0xffec006000 424 455 GPIO2 0xffe7f34000 392 423 GPIO3 0xffe7f38000 360 391 AO_GPIO 0xfffff41000 328 359 AO_GPIO4 0xfffff52000 296 327 AUDIO_GPIO0xffcb013000 其中 0x0 偏移处的 4Byte（32bit）是 GPIO 数据寄存器，0x4 偏移处的 4Byte（32bit）是 GPIO 方向寄存器 SOM 上的 GPIO 对应表格为： 名称 GPIO 01 GPIO0_27 02 GPIO0_28 03 GPIO2_0 04 AOGPIO4 05 GPIO2_1 06 GPIO1_22 07 GPIO0_24 08 GPIO0_25 09 GPIO3_2 10 GPIO3_3 11 GPIO1_3 12 GPIO1_4 13 GPIO1_5 14 GPIO1_6 LicheePi 4A上的插针的 GPIO 对应关系为： ![io_map](./../../../../zh/lichee/th1520/lpi4a/assets/peripheral/io_map.png) > 以文档的标注为准，内测版的丝印标注可能有误 GPIO 操作： > 注意，可能需要事先设置 pinmux ```bash num xxx echo ${num} > /sys/class/gpio/export echo out>/sys/class/gpio/gpio${num}/direction echo 1 > /sys/class/gpio/gpio${num}/value echo 0 > /sys/class/gpio/gpio{num}/value ``` 也可以直接操作寄存器： > devmem 可以从此处下载编译：https://github.com/VCTLabs/devmem2/blob/master/devmem2.c ```bash ./devmem 0xffe7f38000 w ``` 系统内GPIO信息查看： ```bash sipeed@lpi4a:~$ sudo cat /sys/kernel/debug/gpio ``` 下面是示例结果: ![peripheral_gpio_information](./../../../../zh/lichee/th1520/lpi4a/assets/peripheral/peripheral_gpio_information.png) <! ```bash sipeed@lpi4a:~$ sudo cat /sys/kernel/debug/gpio gpiochip8: GPIOs 296 327, parent: platform/fffff52000.gpio, fffff52000.gpio: AO_GPIO4 gpiochip7: GPIOs 328 359, parent: platform/fffff41000.gpio, fffff41000.gpio: AO_GPIO gpio 332 ( hubswitch ) out hi gpiochip6: GPIOs 360 391, parent: platform/ffe7f38000.gpio, ffe7f38000.gpio: GPIO3 gpiochip5: GPIOs 392 423, parent: platform/ffe7f34000.gpio, ffe7f34000.gpio: GPIO2 gpio 395 ( cs ) out hi ACTIVE LOW gpio 406 ( aon:soc_vdd5v_se_en ) out lo gpio 407 ( spi0 CS0 ) out hi ACTIVE LOW gpio 417 ( Volume Up Key ) in lo IRQ ACTIVE LOW gpio 421 ( aon:soc_wcn33_en ) out lo gpiochip4: GPIOs 424 455, parent: platform/ffec006000.gpio, ffec006000.gpio: GPIO1 gpio 443 ( Volume Down Key ) in hi IRQ ACTIVE LOW gpio 446 ( aon:soc_vbus_en ) out hi gpiochip3: GPIOs 456 487, parent: platform/ffec005000.gpio, ffec005000.gpio: GPIO0 gpio 457 ( spi2 CS0 ) out hi ACTIVE LOW gpio 486 ( aon:soc_vdd_3v3_en ) out hi gpiochip2: GPIOs 488 495, parent: i2c/3 0018, 3 0018, can sleep: IO expend 3 gpio 490 ( regulator hub vdd12 ) out hi gpio 491 ( regulator hub vcc5v ) out hi gpio 492 ( regulator pwr en ) out hi gpio 493 ( aon:soc_lcd0_vdd33_e) out hi gpio 494 ( aon:soc_lcd0_vdd18_e) out hi gpio 495 ( reset ) out hi ACTIVE LOW gpiochip1: GPIOs 496 503, parent: i2c/1 0018, 1 0018, can sleep: IO expend 2 gpio 496 ( aon:soc_cam2_dvdd12_) out lo gpio 501 ( wlan_default_wlan_po) out hi gpio 502 ( bt_default_poweron ) out lo gpiochip0: GPIOs 504 511, parent: i2c/0 0018, 0 0018, can sleep: IO expend 1 gpio 504 ( aon:soc_dvdd12_rgb ) out lo gpio 505 ( aon:soc_avdd28_rgb ) out lo gpio 506 ( aon:soc_dovdd18_rgb ) out lo gpio 507 ( aon:soc_dovdd18_ir ) out lo gpio 508 ( aon:soc_dvdd12_ir ) out lo gpio 509 ( aon:soc_avdd25_ir ) out lo gpio 510 ( aon:soc_cam2_dovdd18) out lo gpio 511 ( aon:soc_cam2_avdd25_) out lo ``` > ## UART ### 系统串口 LicheePi 4A 的系统串口是 UART0,在侧边插针中有引出。 你可以使用 USB 转串口模块连接该串口，即 `U0 RX` 和 `U0 TX`，注意交叉连接，以及 GND 连接。 ![ttl_link](./../../../../zh/lichee/th1520/lpi4a/assets/peripheral/ttl_link.png) 连接完成后，即可使用串口工具进行通信，Windows 下推荐 `XShell`，`mobaterm`，Linux下推荐 `minicom` 设置串口波特率为 `115200`，即可在串口终端下登录并进行指令操作： > 注：刚连接后可以敲几个回车查看是否有反应，如果没有反应则检查接线或者串口配置 ![ttl_login](./../../../../zh/lichee/th1520/lpi4a/assets/peripheral/ttl_login.png) ### 一般串口 LicheePi 4A的侧边插针中还引出了 UART1/2/3, 同样可以操作。 默认镜像中仅使能了 UART1, 其它串口可能需要重新配置设备树操作。 > 注意：SOC串口电平为1.8V，刚好处于3.3V的高电平阈值附近，可能某些串口模块无法正确输入输出，建议使用我们提供配套串口模块，或者微调其他串口模块的3.3V电压到2.8V #### 查看串口设备 ```bash ls /dev/ttyS* ``` #### 查看串口的波特率等信息 ```bash stty F /dev/ttyS1 a ``` #### 设置串口波特率、数据模式 ```bash stty F /dev/ttyS1 ispeed 115200 ospeed 115200 cs8 ``` #### 查看串口数据 ```bash cat /dev/ttyS1 ``` #### 发送串口数据 ```bash echo \"12345\" > /dev/ttyS1 ``` #### 其它方法 也可以使用`minicom`，或者pyserial库进行串口操作，请用户自行查找相关资料使用。 ## I2C LicheePi 4A 上有多个 I2C 设备（I2C0/1/2/3），其中 0/1/3 用于连接 I2C IO 扩展芯片，I2C2 预留在对外插针上。 这里我们使用 i2c tools 来进行 i2c 验证操作，镜像默认预装了 i2c tools: ```bash sipeed@lpi4a:/usr$ ls /sbin/i2c* /sbin/i2c stub from dump /sbin/i2cdetect /sbin/i2cdump /sbin/i2cget /sbin/i2cset /sbin/i2ctransfer ``` 列出所有I2C总线： ```bash sipeed@lpi4a:~$ /sbin/i2cdetect l i2c 0 unknown Synopsys DesignWare I2C adapter N/A i2c 1 unknown Synopsys DesignWare I2C adapter N/A i2c 2 unknown Synopsys DesignWare I2C adapter N/A i2c 3 unknown Synopsys DesignWare I2C adapter N/A i2c 4 unknown Synopsys DesignWare I2C adapter N/A i2c 5 unknown Synopsys DesignWare I2C adapter N/A i2c 6 unknown Synopsys DesignWare I2C adapter N/A i2c 7 unknown DesignWare HDMI N/A ``` 检测 I2C 总线上的设备，可见 PCA9557PW 的 I2C 地址为 0x18，与原理图相符： ```bash sipeed@lpi4a:~$ sudo /sbin/i2cdetect r y 0 0 1 2 3 4 5 6 7 8 9 a b c d e f 00: 10: UU 20: 30: 40: 50: 60: 70: ``` ![i2c_io](./../../../../zh/lichee/th1520/lpi4a/assets/peripheral/i2c_io.png) 此外还可以使用 `i2cdump` 来 dump 指定 i2c 地址的所有寄存器，用 `i2cget` 来读出指定 i2c 地址的指定寄存器值，用 `i2cset` 来写入指定 i2c 地址的指定寄存器值。 不过由于 IO 扩展芯片已经被内核使用，所以无法直接使用这些命令验证。用户可以自行在 I2C2 上外接外设来验证。 ## SPI LicheePi4A上预留了两路SPI，一路是背面空贴的SPI Flash焊盘，一路是插针上的SPI。 ```bash sipeed@lpi4a:~$ ls /dev/spidev2.0 /dev/spidev2.0 ``` TODO ## USB TODO ### USB SSD ### USB 网卡 ### USB 摄像头 ### USB 声卡 ## ETH LicheePi4A 具有双千兆网口，其中 Eth0 还具备 PoE 功能。 TODO ### PoE TODO ## Audio LicheePi 4A 上有两个模拟硅麦，使用 ES7210 CODEC，以及有一路板载的扬声器，和立体声耳机，使用 ES8156 CODEC。 > 注：板载扬声器与立体声耳机使用了互斥设计，插入耳机后，音频输出自动切换到耳机，板载扬声器失能。 使用 aplay 和 arecord 可以进行简易录放测试， 注意板载扬声器是右声道。 ```bash #!/bin/bash echo \"Play Test Audio\" aplay /usr/share/sounds/alsa/Side_Right.wav # Record Audio echo \"Start record auido, auto replay after 3 seconds\" arecord Dhw:0,1 d 3 r 48000 f S16_LE t wav test.wav & > /dev/null & sleep 4 # Play Audio aplay test.wav echo \"Start Play\" ``` 你还可以使用alsa相关工具，如`alsamixer`，进行音量调整等操作。 ## HDMI > 注：早期镜像的HDMI音频不生效，请升级到较新版本使能HDMI音频功能。 ## MIPI CSI LicheePi 4A 具有 CAM0/CAM1/CAM2 三个摄像头接口， CAM0 最大 4lane，CAM1/2 为 2lane，默认使用 CSI0 接口，接 OV5693 摄像头。 TODO ## MIPI DSI LicheePi 4A 具有 MIPI DSI0 接口，支持 4K 视频输出，可以选配 10.1 寸 1280x800 或者 1920x1200 的屏幕。 TODO ## GPU `sudo watch cat /sys/kernel/debug/pvr/status` TODO ## NPU TODO ## 其它 欢迎投稿～ 投稿接受后可得￥5～150（$1~20）优惠券！"},"/hardware/en/lichee/th1520/lpi4a/10_test_report.html":{"title":"板卡性能测试","content":" title: 板卡性能测试 keywords: Linux, Lichee, TH1520, SBC, RISCV, report update: date: 2023 05 08 version: v1.0 author: wonder content: Release docs ## 功耗测试 ### 静态功耗 场景(静态) 电压 电流 功耗 备注 待机 5.11V 0.46A 2.35W 开启风扇，后续所有测试中风扇均不关闭 单网口连接网线 5.06V 0.52A 2.63W 双网口连接网线 5.08V 0.53A 2.69W 连接 HDMI 显示器 5.04V 0.53A 2.67W ### 动态功耗 场景(动态) 电压 电流 功耗 备注 待机 5.04V 0.71A 3.58W 连接显示器、键盘、鼠标 使用一个网口 STRESS NG 压测<br>( CPU 矩阵运算) 4.95V 1.22A 6.04W CPU 频率上限 1.845GHz，电压 1V 浏览器播放视频 4.96V 1.06A 5.26W 使用 GPU、无硬件解码, firefox 浏览器 ## eMMC ```bash #4k写入 dd if /dev/zero of test bs 4k count 100000 oflag direct #4k读取 dd if test of /dev/null bs 4k count 100000 iflag direct #删除测试文件 rm test #连续写入(4MB) dd if /dev/zero of test bs 4096k count 100 oflag direct #连续读取(4MB) dd if test of /dev/null bs 4096k count 100 iflag direct #删除测试文件 rm test #连续写入(64MB) dd if /dev/zero of test bs 65536k count 10 oflag direct #连续读取(64MB) dd if test of /dev/null bs 65536k count 10 iflag direct #删除测试文件 rm test ``` **8GB eMMC** Test Item Result 4KB W 22.4 MB/s 4KB R 22.4 MB/s 4MB W 53.9 MB/s 4MB R 296 MB/s 64MB W 229 MB/s 64MB R 298 MB/s **32/128GB eMMC** Test Item Result 4KB W 24.0 MB/s 4KB R 40.3 MB/s 4MB W 209 MB/s 4MB R 296 MB/s 64MB W 229 MB/s 64MB R 298 MB/s ## LPDDR4X ![lpddr4x](./../../../../zh/lichee/th1520/lpi4a/assets/test_report/lpddr4x.png) ## GbE `iperf3 c 192.168.3.18 t 15` ![iperf](./../../../../zh/lichee/th1520/lpi4a/assets/test_report/iperf.png) ## 温度 散热器: 风扇+铝散热片(25*25*5) 硅脂垫: Laird 500 待机状态： ![temp_idle](./../../../../zh/lichee/th1520/lpi4a/assets/test_report/temp_idle.png) 压测结束： ![temp_press](./../../../../zh/lichee/th1520/lpi4a/assets/test_report/temp_press.png) ## 其它 欢迎投稿～ 投稿接受后可得￥5～150（$1~20）优惠券！"},"/hardware/en/lichee/th1520/lpi4a/7_develop_other.html":{"title":"系统开发","content":" title: 系统开发 keywords: Linux, Lichee, TH1520, SBC, RISCV, Kernel, SDK, Develop update: date: 2023 05 12 version: v1.0 author: wonder content: Release docs "},"/hardware/en/lichee/th1520/lpi4a/7_develop.html":{"title":"System Development","content":" title: System Development keywords: Linux, Lichee, TH1520, SBC, RISCV, Kernel, SDK, Develop update: date: 2023 05 08 version: v1.0 author: wonder content: Release docs ## Yocto Linux The official development environment is based on yocto and customized by T head, which could be obtained here: https://gitee.com/thead yocto/ This section gives a brief introduction of setuping uilding Linux Yocto environment and use it to build the full image able to run on the development board. ### Setup Yocto Compilation Environment Linux SDK uses Yocto to build images, which runs under Ubuntu 18.04. It is recommended to deploy Yocto under Linux with Docker. Yocto could also be deployed under Ubuntu18.04 directly. (Refer to [T Head曳影1520Yocto用户指南.pdf](https://gitee.com/thead yocto/documents/blob/master/zh/user_guide/T Head%E6%9B%B3%E5%BD%B11520Yocto%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf)2.2) This section includes the guide to deploy with Docker only. **It is recommended to reserve 200G disk space and more than 4G memory on the machine. The time cosumed varies because of network situation. Building with a typical Linux configuration (mininal system plus essential basic components) takes about 1.5 hours. (with i5 11400, as only a reference) Install docker with official script \t```bash \tcurl fsSL https://get.docker.com bash s docker mirror Aliyun \t``` Download dockerfile and modify username and ID \tClick here to download [linux dev master.7z](https://gitee.com/thead yocto/documents/blob/master/linux dev master.7z) ，enter `linux dev master` after decompressing，open `Dockerfile` and find following instructions \t```bash \tENV DOCKER_USER2 \"your the same user name asyour host\"` \tENV USER2_ID \"your user id\" \t``` \tChange \"your the same user name as your host\" to the name of user on host OS, \"your user id\" to the corresponding password Setup Docker image environment \t```bash \tdocker build t linux dev base:base . \t``` \tSome errors may occur during downloading packages in this step. You could modify Dockerfile and put off downloading to successfully logining. This Docker image is able to build Linux SDKs released by T Head, such as buildroot, yocto and so on. The default password is `123`. Startup Docker \t```bash \tdocker run u thead dt name linux dev {your_name} v {your_lock_home}:{your_home} linux dev base:base /bin/bash \t``` \t{your\\_name} is the name of your container. Remember not to reuse an existing name. \tIt is possible mount a directory in host with option ` v`, which could serve as a way to share files. {your\\_lock\\_home} is the local path under host, {your\\_home} is the path mounted in Docker. Check started Docker containers. \t```bash \tdocker ps grep linux dev base \t``` then started Docker containers are shown, Login Docker \t```bash \tdocker exec it linux dev {your_name} /bin/bash \t``` Download open source packages (only needed at the first time of building SDK) \tPackages will be downloaded during building the firmware, which could take a long time with a poor network connection. To speed up the process, you could download the packages from Gitee ahead of time. \t```bash \tcd ~ \tgit clone https://gitee.com/thead yocto/yocto downloads.git \t``` Download Yocto building packages \t```bash \tgit clone https://gitee.com/thead yocto/xuantie yocto.git b Linux_SDK_V1.1.2 \t``` Load configuration of targeted device and environment variables (remember to check before building) \t```bash \tcd xuantie yocto \tsource openembedded core/oe init build env thead build/light fm \t``` Create a softlink to downloaded packages in directory downloads in SDK directory. \t```bash \tln s ~/yocto downloads ../downloads \t``` Now the building environment is ready. ### Supported List of Machine/Target In the step above (load environment variables), following message is shown after successfully setuping. ```bash ### Shell environment set up for builds. ### You can now run 'bitbake <target>' Common targets are: thead image linux thead image multimedia thead image gui machines: light beagle light b product light a val light lpi4a ``` Here is the description: target (List of images supported by the SDK): NameDescription thead image linuxTypical configuration of Linux, mininal system with essential basic components thead image multimediaTypical configuration of Linux with video & CV support, mininal system with components of video subsystem (GStreamer etc.) thead image guiAll of above with GUI related components, full image, including applications like Gnome desktop, weston, QT and so on. machines (Board level configuration supported by the SDK): NameDescription light a valTH1520 A EVB Board light b productTH1520 B EVB Board light beaglebeagleV Ahead Development Board light lpi4aLichee Pi 4A Development Board ### Building images Building commands are like following: ```bash MACHINE {machine} bitbake {target} ``` Replace {machine} and {target} with corresponding names in tables above. For example, the command to build a typical Linux image running on LicheePi 4A development board is: ```bash MACHINE light lpi4a bitbake thead image linux ``` #### Problems while building images Caused by poor network, downloading may be slow and even fails at this step. Recommend proxies if possible. Error message: \t```bash \tPlease use a locale setting which supports utf 8. \tPython can't change the filesystem locale after loading so we need a utf 8 when python starts or things won't work. \t``` \tRun following commands first \t```bash \tsudo apt get install locales \tsudo dpkg reconfigure locales \t``` \tThen find `en\\_US.UTF8` in the printed list (approximately the 158th). Type its ID and then press enter. Select this option also in the next step. \tThen run following commands (it is worth adding to `.bashrc` in Docker) \t```bash \tsudo locale gen en_US.UTF 8 \tsudo update locale LC_ALL en_US.UTF 8 LANG en_US.UTF 8 \texport LANG en_US.UTF 8 \t``` \tAfter finishing, there will not be errors during building. Error message: \t```bash \tplease install them in order to proceed: lz4c pzstd zstd \t``` \tSimply install corrsponding dependencies. \t```bash \tsudo apt update && sudo apt install y zstd liblz4 tool \t``` ### Packaging images This repository [light\\_deploy\\_images](https://gitee.com/thead yocto/light_deploy_images/tree/master/tarball) contains serveral pre released images. `sdk.sh` in the repository is suitable to package new built images. Enter `light fm` directory in the built image and move `sdk.sh` here. Run it with `./sdk.sh` and the corresponding image is generated after packaging. For file paths and directory structure of the image, refer to repository [light\\_deploy\\_images](https://gitee.com/thead yocto/light_deploy_images/tree/master/tarball). Finally, copy the built image and related files to the shared directory mounted with option ` v` and the file could be used for burning. Now we have finished building and packaging, resulting with an image able to burn into and run in the development board. ### Build Separately How to build official components released by T head separately OpenSBI Uboot \t```bash \tgit clone https://gitee.com/thead yocto/u boot \tcd u boot \tmake CROSS_COMPILE riscv64 unknown linux gnu ARCH riscv light_lpi4a_defconfig \tmake CROSS_COMPILE riscv64 unknown linux gnu ARCH riscv \t``` \tThe generated firmware is u boot with spl.bin, which could be burnt with fastboot. Kernel ### Device Tree Analysis TODO ### Other References **light_deploy_images Repository：** Includes pre built and burnable Linux images, packaging scripts and other reletive tools. Refer to the repository for more information. Repository Address: [https://gitee.com/thead yocto/light_deploy_images](https://gitee.com/thead yocto/light_deploy_images) **documents Repository: ** Includes all released documentation related to SDK Repository Address: [https://gitee.com/thead yocto/documents](https://gitee.com/thead yocto/documents) ## Mainline How to build mainline version (under developing) ### OpenSBI Download and build ```bash \tgit clone https://github.com/riscv software src/opensbi \tcd opensbi \tmake CROSS_COMPILE riscv64 unknown linux gnu PLATFORM generic \t``` \tGenerated firmware is build/platform/generic/firmware/fw\\_dynamic.bin. Copy it to /boot ### U boot Download and build \t```bash \tgit clone b th1520 https://github.com/dlan17/u boot.git \tcd u boot \tmake CROSS_COMPILE riscv64 unknown linux gnu ARCH riscv light_lpi4a_defconfig \tmake CROSS_COMPILE riscv64 unknown linux gnu ARCH riscv \t``` \tGenerated firmware is u boot dtb.bin. Copy it to /boot Boot mainline U boot (under developing) with on board U boot \tPre burnt U boot has supported Ethernet already, which makes it possible to obtain new U boot image through tftp protocol. \tStartup a tftp instance on the developing machine. Taking Alpine for example, install package `tftp hpa` and enable corresponding service. \t```bash \tapk add tftp hpa \trc update add in.tftp \trc service in.tftp start \t``` \tBy default tftp uses `/var/tftpboot` as the root directory, so copy the new built U boot `u boot dbt.bin` to `/var/tftpboot`. \tConnect UART and Ethernet on LicheePi 4A development board, power it and press any key when following message is shown in serial \t``` \tPress any key to stop autoboot \t``` \tto enter U boot shell. \tType `dhcp` to configure Ethernet card with DHCP protocol. Mainline U boot is expected to be loaded at 0x1c00000, so type \t``` \ttftp 0x1c00000 TFTP_SERVER_IP:u boot dtb.bin \tgo 0x1c00000 \t``` \tin U boot shell to load the new built U boot into 0x1c00000 and jump to it. ### Linux ## OpenWRT TODO ## Andriod TODO ## OpenHarmony TODO ## Others 欢迎投稿～ 投稿接受后可得￥5～150（$1~20）优惠券！"},"/hardware/en/lichee/th1520/lm4a.html":{"title":"LicheePi Module 4A","content":" title: LicheePi Module 4A keywords: LicheePi, Sodimm, TH1520, RISCV, SBC update: date: 2023 03 31 version: v0.1 author: wonder content: Create file ## Introduction LicheePi Module 4A is the Core Module using the [T Head](https://www.t head.cn/) RISC V [TH1520](https://www.t head.cn/product/yeying) SOC, containing 4 Risc V C910 cores and 4TOPS@int8 AI NPU inside, supports 16GB LPDDR4X ram and 128GB eMMC storage, supports double gigabit Ethernet and maximum 4K resolution video output. The core also contains an additional C906 processor for audio processing. Because of the SODIMM style package, the LicheePi Module 4A can be used in various scenarios and is suitable for various types of baseboards. ## Parameters <table> <thead> <tr> <th colspan 2>Main Chip</th> </tr> </thead> <tbody> <tr> <td>Name</td> <td>TH1520</td> </tr> <tr> <td>CPU</td> <td>RISC V 64GCV C910*4@2GHz <br>· Each core contains 64KB I cache amd 64KB D Cache <br>· Shared 1MB L2 Cache <br>· Support TEE and REE, configered at core booting<br>· Support multi core debugging framework of custom and RISC V compatible interface<br>· Independent power domain, supports DVFS</td> </tr> <tr> <td>GPU</td> <td>· OpenCL 1.1/1.2/2.0<br>· OpenGL ES 3.0/3.1/3.2<br>· Vulkan 1.1/1.2<br>· Android NN HAL</td> </tr> <tr> <td>NPU</td> <td>Support 4TOPS@INT8, up to 1GHz <br>· Support TensorFlow、ONNX、Caffe <br>· Support CNN、RNN、DNN </td> </tr> <tr> <td>Decode</td> <td>Real time decoder, support H.265/H.264/VP9/8/7/6/AVS/AVS+/AVS2.0/VC1/MPEG4 <br>· Support H.264 BP/MP/HP@level 5.1 decoding, up to 4K resolution<br>· Support H.265/HEVC Main Profile@level 5.1 decoding, up to 4K resolution<br>· Support VP9 Profile 2 decoding, up to 4K resolution<br>· Support AVS2.0 decoding, up to 4K resolution<br>· Support VP6/7/8/AVS/AVS+/VC1/MPEG4 decoding, up to 1920x1080 resolution<br>· Decoding at 4K@75fps maximum</td> </tr> <tr> <td>Encode</td> <td>· Support H.264 BP/MP/HP@level4.2 encoding, up to 4K resolution<br>· Support H.265/HEVC Main Profile encoding, up to 4K resolution<br>· Only support I frame and P frame<br>· Encoding at 4K@40fps maximum</td> </tr> <tr> <th colspan 2>Hardware information</th> </tr> <tr> <td>RAM</td> <td>· 8GB 64bits LPDDR4<br>· 16GB 64bits LPDDR4<br></td> </tr> <tr> <td>ROM</td> <td>eMMC: <br>· 0G<br>· 8G<br>· 32G<br>· 128G</td> </tr> <tr> <td>Ethernet</td> <td> Gigabit PHY x 2</td> </tr> </tbody> </table> ## Links [Github](https://github.com/sipeed/LicheePi4A) [Sipeed Download station(Blank now)]()"},"/hardware/en/lichee/Nano/Nano.html":{"title":"Lichee Nano","content":"# Lichee Nano ## 概述 Lichee Nano是基于全志科技的F1C100s(ARM 926EJS内核)高性能soC芯片设计的迷你开发板。开发板设计小巧精致，将芯片的所有资源都引出，板载USB、Flash、TF卡、4OP LCD接口等，并把所有IO资源引出，方便开发者拓展使用，非常适合初学者学习linux或者商用于产品开发。 <img src \"./../assets/Nano/Nano_2.png\" width 400> <img src \"./../assets/Nano/Nano_3.png\" width 400> ## 参数 ### F1C100s参数 Lichee Nano开发板板载的F1C100s芯片功能很强大，芯片内置32MBDDR，拥有SDIO、SPI、UART、Speaker、Mic等接口，支持外挂 8~32MB SPI Nor Flash;在视频处理方面表现出现，支持720P视频输出，支持H.264、MJPEG等高清格式的解码。 ![](./../assets/Nano/F1C100s.png) 项目 参数 CPU •ARM9 CPU architecture<br>•16KByte D Cache<br>•32KByte I Cache Memory •SIP 32MB DDR1<br>•SD2.0,eMMC 4.41 Video •H.264 1280x720@30fps decoding<br>•MPEG1/2/4 1280x720@30fps decoding<br>•MJPEG 1280x720@30fps encoding<br>•JPEG encode size up to 8192x8192 Camera •8 bit CMOS sensor interface<br>•CCIR656 protocol for NTSC and PAL Audio •Integrated analog audio codec with two DAC channels and one ADC channel,maximum 192kHz DAC sample rate and 48kHz ADC sample rate<br>•One I2S/PCM interface Display •LCD RGB interface up to 1280x720@60fps<br>•TV CVBS output, support NTSC/PAL, with auto plug detecting Connectivity •USB OTG, SDIO,IR, 3 x TWI, 2 x SPI, 3 x UART ### 开发板参数 项目 参数 CPU 全志 F1C100s， ARM 926EJS , 主频 408MHz， 可超频至 600Mhz 内存及存储 集成 32MB DDR<br>板载 16MB NOR FLASH， 可从 FLASH 启动<br>板载 TF 卡座，可从 TF 启动 显示 通用 40P RGB LCD FPC 0.5mm 座子<br>可直接使用常见的 40P 4.3/5/7 寸屏幕（板载背光驱动）<br>支持常见的 272x480, 480x800, 1024x600 等分辨率<br>板载电阻式触摸屏芯片 视频处理能力 H.264 1280x720@30FPS 解码<br>MPEG1/2/4 1280x720@30FPS 解码<br>MJPEG 1280x720@30 FPS 解码<br>JPEG encode size up to 8192x8192 通信接口 SDIO，可搭配配套 SDIO WiFi+BT 模块<br>SPI x2<br>TWI x3<br>UART x3<br>OTG USB x1<br>TV out 其它接口 PWM x2<br>LRADC x1<br>Speakerx2 + Mic x1 ![](./../assets/Nano/Nano_pin.png) ### 软件参数 开发环境 参数 Linux 支持3.10 BSP Linux<br>支持4.19 主线 Linux 裸机 Xboot 裸机 RT Thread ## 使用教程 [Lichee Nano](/soft/Lichee/zh/Nano Doc Backup/index.md) ## 产品技术支持 Lichee Zero 开发板可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务 <support@sipeed.com>。"},"/hardware/en/lichee/ZeroPlus/ZeroPlus.html":{"title":"Lichee ZeroPlus","content":"# Lichee ZeroPlus ## 概述 Lichee Zero Plus是基于全志科技的S3 (ARM Cortex A7内核)的高性能CPU芯片设计的高集成度核心板。 使用双NGFF金手指设计，引出134pin引脚，方便开发者拓展使用。S3是V3s的升级版，1.2GHz主频，内置128MB ddr3内存，引脚相对V3s全很多。 支持MIPI摄像头，普通并口摄像头，RGB屏幕，内置ePHY. <img src \"./../assets/Zero Plus/Plus_1.jpg\" width 400> ## 参数 ### 芯片 S3芯片架构 ![](./../assets/Zero Plus/Plus_2.png) 项目 参数 CPU • ARM® Cortex™ A7 @1.2GHz GPU • Supports 1080p@60fps or 2 channel 1080p@30fps H.264 video encoding, supports 8M JPEG encoding <br>• Supports H.264 1080p@60fps decoding, MJPEG 1080@30fps decoding ISP • Integrated ISP up to 8M pixels<br>• Supports two channel outputs for display and encoding respectively<br>• Supports various input and output formats<br>• Supports AE/AF/AWB<br>• Supports saturation adjustment/ noise reduction/ defect pixel correction/distortion correction Video Input/Output • Supports 8/10/12 bit parallel CSI and 4 lane MIPI CSI2<br>• Supports BT1120 input<br>• Supports up to 8M CMOS sensor<br>• Supports RGB/i80/LVDS LCD up to 1024x768 resolution<br>• Supports Allwinner's next gen SmartColor display technology for better visual effects for images & videos Memory • SIP 16 bit DDR3, up to 1333Mbp Audio Codec • Integrated 92dB audio codec<br>• Supports two ADC channels and two DAC channels<br>• Supports 3 MIC in, a stereo Line in, a headphone output and a stereo line out output Security Engine • Supports AES/DES Connectivity • 3 x SD card controllers<br>• LRADC/SPI/TWI/UART/PWM<br>• USB, EMAC+PHY ### 核心板 项目 参数 CPU ARM Cortex A7 处理器(1.2Ghz)， VFPv4 浮点处理器 内存 芯片内置 128Mbyte DDR3 内存 (时钟频率最高 672MHz) 存储 可选 SPI Nor Flash(8/16/32MB)，SD Nand(128/512MB)，eMMC(4/8GB)<br>Micro SD 卡 电源 5V 电源输入， 3 路 DCDC 稳压输出 (1.2,1.5,3.3) 复位 板载复位芯片 晶振 板载 24M 主晶振， 32.768KHz RTC 晶振 接口 NGFF M.2 B KEY x 2 共引出 67x2 134pin<br>板载 micro usb 接口和系统串口，可供下载固件及调试 系统支持 支持最新 Linux 5.2 mainline kernel, Linux 3.4 bsp kernel<br>支持 debian 发行版 ## 使用教程 [Lichee Zero](/soft/Lichee/zh/Zero Doc/Start/intro_cn.md) ## 产品技术支持 Lichee ZeroPlus 开发板可以在多种场景实现客户不同方面的需要，在 AIoT 上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务 <support@sipeed.com>。"},"/hardware/en/maixII/M2A/flash_system.html":{"title":"Burn image","content":"# Burn image ## System introduction There are 2 system images for Lichee MaixSense(which will be called R329 below) Image name armbian Tina : : : Description A lightweight Debian for arm development board Linux system created by Allwinner Based on OpenWRT1404 Feature Linux mainline, mutiple contents Tiny os Target users Geeker, or newer Customization requirements developer For armbian system image it's required to use sdcard over than 4GBi For Tina os it needs sdcard over than 512MBi Low speed sdcard will lead a bad experience ## Get image ### armbian system image Download armbian system image from MEGA ：https://mega.nz/folder/1B4RFKpK#X0tMwHLHFQJvJ9POt_lXtg The image named with maixpy3 means this image has installed MaixPy3 and its related drivers This image file is created by [dd](https://en.wikipedia.org/wiki/Dd_(Unix)). So we use [Etcher](https://www.balena.io/etcher/ \"Etcher\") to burn our image card. ### Tina system image Tina os need to be compiled by yourself, visit [https://github.com/sipeed/R329 Tina jishu](https://github.com/sipeed/R329 Tina jishu) for imformation. ## Burn system ### Burn armbian image #### Get software [Etcher](https://www.balena.io/etcher/ \"Etcher\") #### Burn steps Extract your downloaded image file to get the `.img` file, run Etcher, click `Flash from file`, choose the extracted .img file, click `Select target` and choose your sdcard, click `Flash` to burn your sdcard, wait it for finishing. ![burn](./../../maixII/M2A/assets/95133.gif) If failed burning, try to format your sdcard. For Windows and macos users we suggest use [SD Card Formatter](https://www.sdcard.org/downloads/formatter/eula_windows/SDCardFormatterv5_WinEN.zip \"SDCardFormatter\") to format sdcard, while for linuc users can try [Gparted](https://gparted.org/). ### Burn Tina image Its burning steps are the same as MaixII Dock, visit [Buring MaixII Dock OS](./../M2/flash.html#Buring system) for detailed steps."},"/hardware/en/maixII/M2A/config_system.html":{"title":"Config system","content":"# Config system Here is the pinmap of Lichee MaixSense <img src \"./../../assets/../maixII/M2A/assets/R329 pin.jpg\" alt \"pinmap\" width 60%> ## Connect the serial port Connect the serial port to communicate to the board. Steps: Use type C cable connect computer with the board marked TTYS0, then do following steps depending on your computer OS. ### Linux & macOS For linux OS, use command `ls /dev/ttyUSB*` to see your device COM number, then use serial application to connect the board. ### Windows Lichee MaixSense equips with CH340 as serial chip, but we need install its driver to use it. Click this to download the driver for this serial chip, after installing [ch340 ch341 driver](https://api.dl.sipeed.com/shareURL/MAIX/tools/ch340_ch341_driver), you can find your `device serial port` from `Device manager`. ## Config Tina OS We suggest beginners use armbian OS because there are many informations about it on internet, and for Tina OS suits those who are good at Linux. The Tina OS configuration steps of Lichee MaixSense are similar to [M2dock](./../M2/usage.html), so here will not retell its usages. <! You can use type c cable connecting computer with Lichee MaixSense type c port marked with DEBUG, then use serial software application like [Mobaxterm](./../M2/tools/mobaxterm.html) to operate it. Besides, Lichee MaixSense with Tina OS can be operated by [adb shell](https://developer.android.google.cn/studio/releases/platform tools), if it's connected with computer by its type c port, which connects a USB camera by default, marked with OTG. > ## Config armbian OS After connecting computer with this board, we can use serial application to control this board, and the baudrate is 115200. We provide 2 armbian image, their login steps are different, so here we tell how to login ths OS. ### Image containing MaixPy3 The username and password are all `root`. Be sure not input any wrong word when logging. The log is as following if you succeed logging.\\ ```bash Armbian 21.08.0 trunk Bullseye ttyS0 maixsense login: root Password: __ __ _ ____ \\/ __ _(_)_ __/ ___ ___ _ __ ___ ___ \\/ / _` \\ \\/ /\\___ \\ / _ \\ '_ \\/ __/ _ \\ (_ > < ___) __/ \\__ \\ __/ _ _\\__,__/_/\\_\\____/ \\____ ____/\\___ Welcome to Armbian 21.08.0 trunk Bullseye with bleeding edge Linux 5.14.0 rc7 sun50iw11 No end user support: built from trunk & unsupported (bullseye) userspace! System load: 133% Up time: 0 min Memory usage: 53% of 231M Zram usage: 23% of 115M IP: 192.168.0.251 CPU temp: 50°C Usage of /: 77% of 2.9G [ 0 security updates available, 66 updates total: apt upgrade ] Last check: 2022 08 31 01:45 [ General system configuration (beta): armbian config ] Last login: Tue Aug 30 10:34:06 UTC 2022 on ttyS0 root@maixsense: ``` ### Image without MaixPy3 The first time to start this system we need to set password. If you didn't set the password at the first time, there is no way to login anymore, only reburn system you can get the chance to set the password again. If the password you set at the first time is complex enough, the system wil not accept the password and you need reset your password. ```bash New to Armbian? Documentation: https://docs.armbian.com Support: https://forum.armbian.com New root password: ********** Repeat password: ********** ``` After setting the password, we need to choose our shell, normally we use bash. ```bash Choose default system command shell: 1) bash 2) zsh Shell: BASH ``` Then it asked to add a new user to avoid us only using root username, which is a good way to help us not destroying the system. Set the username and password by yourself. ```bash Creating a new user account. Press <Ctrl C> to abort Please provide a username (eg. your forename): ll Create password: ********* Repeat password: ********* ``` The new creater user is granted root permission by default, and we can use this identity to login this board and control this system. We can use command `passwd` to change the password or delete the password. For example, we can use `passwd d root` to delete the root password which we create at the beginning. We also can use `passwd root` to reset password of root. The following log are examples about `passwd` ```bash root@maixsense:~# passwd d root passwd: password expiry information changed. root@maixsense:~# passwd root New password: Retype new password: passwd: password updated successfully ``` Here are part of example: ![](./../assets/../M2A/assets/2021080511 46 52.gif)"},"/hardware/en/maixII/M2A/usages.html":{"title":"Basic usage","content":"# Basic usage After finishing [config system](./config_system.html), we have logged in the board and we can use command to control the board. ## Expand system capacity The system not containing MaixPy3 will auto expand the capacity to the maximum at your first start up. System containing MaixPy3 will not auto expand the capacity, so we need to run this command `/usr/lib/armbian/armbian resize filesystem start` to expand the capacity to the maximum, this will take a while, and don't cancel this when running this command. After finishing this work it will be back to the console for us to control it. ## Connect network Here we use `nmtui` to connect network. ![](./../../zh/../maixII/M2A/assets/202108051626.gif) <details> <summary><font color \"#4F84FF\">Click to see graphic steps</font></summary> <p>Enter nmtui to open NetworkManager TUI</p> <img src \"./../../../zh/maixII/M2A/assets/wifi/nmtui.png\" alt \"nmtui\"> <img src \"./../../../zh/maixII/M2A/assets/wifi/active_wifi.png\" alt \"active_wifi\"> <p>We choose Activate a connection</p> <p>Choose your target wifi </p> <img src \"./../../../zh/maixII/M2A/assets/wifi/choose_wifi.png\" alt \"choose_wifi\"> <img src \"./../../../zh/maixII/M2A/assets/wifi/input_password_1.png\" alt \"input_password_1\"> <p>Input the correct password</p> <img src \"./../../../zh/maixII/M2A/assets/wifi/input_password_2.png\" alt \"input_password_2\"> <p>It will display connecting</p> <img src \"./../../../zh/maixII/M2A/assets/wifi/connect_wifi.png\" alt \"connect_wifi\"> <p>The active on the right change into Deactive if succeed connecting wifi</p> <p>If failed connecting wifi, please retry and input the correct password</p> <img src \"./../../../zh/maixII/M2A/assets/wifi/succeed_connecting.png\" alt \"succeed_connecting\"> <p>Then we back to the command console</p> <img src \"./../../../zh/maixII/M2A/assets/wifi/quit_connecting.png\" alt \"quit_connecting\"> <img src \"./../../../zh/maixII/M2A/assets/wifi/quit_nmtui.png\" alt \"quit_nmtui\"> <img src \"./../../../zh/maixII/M2A/assets/wifi/back_terminal.png\" alt \"back_terminal\"> <p>Use command ifconfig to get the IP of this board</p> <img src \"./../../../zh/maixII/M2A/assets/wifi/ifconfig.png\" alt \"ifconfig\"> <img src \"./../../../zh/maixII/M2A/assets/wifi/see_ip.png\" alt \"see_ip\"> <p>If we see the IP(marked with red box), we have succeed connecting the network</p> </details> ## Add user Normally we use another user to use linux system instead of root user, because root user can break the system the easily. Here we tell how to create a new user by `adduser` command. Add a user named `xxx` ```bash adduser xxx ``` After some log shows up, we need to set the password. ```bash New password: Retype new password: ``` The following log shows up if we succeed setting password. ```bash passwd: password updated successfully ``` Then we press `Enter` for all following settings by default. ```bash Enter the new value, or press ENTER for the default Full Name []: Room Number []: Work Phone []: Home Phone []: Other []: Is the information correct? [Y/n] ``` Then we succeed creating the user named `xxx`. We can use command `login` to use our new created user: ```bash login xxx ``` Use command `logout` to sign out. ```bash logout ``` ### Grant administrator privilege The new created user may need administrator privilege to do finish some work, so here we tell how to grant administrator privilege. To grant administrator privilege, we just neet to edit a file named `sudoers` in `/etc`. ```bash sudo nano /etc/sudoers ``` Find following content in this file. ```vim # User privilege specification root ALL (ALL:ALL) ALL ``` Add `xxx ALL (ALL:ALL) ALL` in that file (`xxx` is the username to be grant administrator privilege) ```vim # User privilege specification root ALL (ALL:ALL) ALL xxx ALL (ALL:ALL) ALL ``` Then save this file and quie editing. ## Install application Here we take install `armbian config` as example, just run following command: ```bash sudo apt install armbian config y ``` The above command means to install armbian config by running the apt application with root privileges and that everything whichi needs to be selected is the yes option ## Config Timezone Just use `armbian config` to change timezone. Here we take change to Shanghai time as example. `armbian config` > `Presonal` > `Timezone` > `Asia` > `Shanghai` to set Shanghai time as timezone, then use keyboard `Tab` switch to OK to finish our settings. ![202108062005](./../../../zh/maixII/M2A/assets/202108062005.gif) ## Config language We also use `armbian config` to change language. Just `armbian config` > `Personal` > `Locales`, and select your target language, then choose the default sustem language. Dont't forget to download your language font to avoid wrong display. ## Use Bluetooth Use `armbian config`. `armbian config` > `Network` > `BTinstall` to install bluetooth support package. ![](./../../../zh/maixII/M2A/assets/202108071034.gif) Then we can use `bluetoothctl` to use the bluetooth. ```bash root@maixsense:~# bluetoothctl Agent registered [CHG] Controller XX:XX:XX:XX:XX:XX Pairable: yes [bluetooth]# help Menu main: Available commands: advertise Advertise Options Submenu scan Scan Options Submenu gatt Generic Attribute Submenu list List available controllers show [ctrl] Controller information select <ctrl> Select default controller devices List available devices paired devices List paired devices system alias <name> Set controller alias reset alias Reset controller alias power <on/off> Set controller power pairable <on/off> Set controller pairable mode discoverable <on/off> Set controller discoverable mode discoverable timeout [value] Set discoverable timeout agent <on/off/capability> Enable/disable agent with given capability default agent Set agent as the default one advertise <on/off/type> Enable/disable advertising with given type set alias <alias> Set device alias scan <on/off> Scan for devices info [dev] Device information pair [dev] Pair with device cancel pairing [dev] Cancel pairing with device trust [dev] Trust device untrust [dev] Untrust device block [dev] Block device unblock [dev] Unblock device remove <dev> Remove device connect <dev> Connect device disconnect [dev] Disconnect device menu <name> Select submenu version Display version quit Quit program exit Quit program help Display help about this program export Print environment variables ``` ### Connect to Bluetooth device Use `bluetoothctl` to connect to bluetooth device. ```bash scan on scan off trust XX:XX:XX:XX pair XX:XX:XX:XX connect XX:XX:XX:XX ``` ![202108071610](./../../../zh/maixII/M2A/assets/202108071610.gif) ### Set bluetooth audio in/out To start this, we need install `pulseaudio` and bluetooth modules ```bash sudo apt install pulseaudio sudo apt install pulseaudio module bluetooth ``` Then use pactl command to see whether there is device for bluetooth audio output. ```bash pactl list short sinks ``` Switch audio output to bluetooth, the `<dev>` in the following command should be `2`. ```bash pactl set default sink <dev> ``` The log is as following： ```bash maixsense:~:# apt install pulseaudio maixsense:~:# apt install pulseaudio module bluetooth maixsense:~:# pactl list short sinks 0\talsa_output.platform 7032000.codec.stereo fallback\tmodule alsa card.c\ts16le 2ch 44100Hz\tSUSPENDED 2\tbluez_sink.00_26_04_00_73_B1.a2dp_sink\tmodule bluez5 device.c\ts16le 2ch 44100Hz\tSUSPENDED maixsense:~:# pactl set default sink 2 ``` ![202108071726](./../../../zh/maixII/M2A/assets/202108071726.gif) Then we can play audio to a Bluetooth device or connect the phone via Bluetooth to use as a Bluetooth speaker. ## Change volume Here we use `alsamixer` to change volume ![202108071440](./../../../zh/maixII/M2A/assets/202108071440.gif) Use keyboard `H` to see help. ![alsamixer](./assets/alsamixer.png) To change Bluetooth volume, we use `pactl`. Besides, we can also use `pactl` to change the volume of onboard speaker. ```bash ## See the input/output device index pactl list short sources/sinks ## Sets the input/output volume pactl set source/sink volume index volume pactl set default source/sink ## Set the default input/output ``` For example, set the Bluetooth headset as the output device, the volume is 10%, then increased by 20%, and finally reduced by 30% ```bash maixsense:~:# pactl list short sinks 0\talsa_output.platform 7032000.codec.stereo fallback\tmodule alsa card.c\ts16le 2ch 44100Hz\tSUSPENDED 2\tbluez_sink.00_26_04_00_73_B1.a2dp_sink\tmodule bluez5 device.c\ts16le 2ch 44100Hz\tRUNNING ## The bluetooth normally is bluez_sink maixsense:~:# pactl set default sink 2 maixsense:~:# pactl set sink volume 2 10% maixsense:~:# pactl set sink volume 2 +8192 maixsense:~:# pactl set sink volume 2 0x3000 ##Optional number, Percentage, Decimal, Hexadecimal control, same resule, and can exceed 100% ``` ## Media player Normally we use `mplayer` for media play. Install mplayer ```bash sudo apt install mplayer y ``` Then transfer the media file to the board. The media file can be downloaded from our [Download station](https://dl.sipeed.com/shareURL/MaixII/MaixII Dock/example) We can use [mobaxterm](https://mobaxterm.mobatek.net/) connect the board by SSH protocol, then use [mobaxterm](https://mobaxterm.mobatek.net/) to transfer the media file to the board. Drag your media file to the red box in the left of the following picture. ![mobaxterm_ssh_transfer](./assets/mobaxterm_ssh_transfer.png) Use command `sudo mplayer badapple_240_60fps.mp4 vo fbdev2` to play video or `sudo mplayer Short.mp3` to play audio. ```bash mplayer badapple_240_60fps.mp4 vo fbdev2 ``` Use onboard `Ctrl+C` to exit the media playing. We can also add `< /dev/null > /dev/null 2>1 &` in the end of the command to play the media background. ```bash mplayer badapple_240_60fps.mp4 vo fbdev2 < /dev/null > /dev/null 2>1 & ``` The command above plays media background, if you wang to stop it, you need to use `fg` command to switch the background application to the front, then use `Ctrl+C` to stop it. ![202108091128](./../../../zh/maixII/M2A/assets/202108091128.gif) If it didn't play media correctly, try to increase the media volume by `alsamixer` application or check the media file path whether matchs the command. ## Program C code Here we use `vim` as the editor. You can learn many skills about from Internet. Use command `sudo apt install vim y` to install `vim`. Then create a file named `helloworld.c` by vim. ```bash vim helloworld.c ``` There are 3 modes in vim: `Command mode`, `Insert mode` and `Last line mode`. The default mode after creating a new file is `Command mode`, we press the 'i' on the keyboard to enter `Insert mode`. Then we input the following codes as the content in the new created file. ```c #include <stdio.h> int main() { printf(\"Hello, world\\n\"); return 0; } ``` We use keyboard `esc` to quit `Insert mode` to `Command mode`. Then use `:` to `Last line mode`, use command `wq` wo save and quit editing. Then we use gcc to compile our code. If there ie no gcc, install it by apt. The detailed usage about gcc can be searched from Internet. ```bash gcc hello.c o hello.o ``` After finishing compiling our code, run it. ```bash ./hello.o ``` ![202108091201](./../../../zh/maixII/M2A/assets/202108091201.gif) ## Prepare python code See [Program C code](#program c code) to get explaination. ```bash vim helloworld.py i print(\"hello world!\\n\") esc :wq python3 helloworld.py ``` ![202108091339](./../../../zh/maixII/M2A/assets/202108091339.gif) ## Light an led by python Install the python GPIO library first. ```bash pip install gpiod ``` Then insert the led positive electrode into PH5, and negative electrode into GND. Cerate `led.py` file. ``` bash vim led.py ``` Then we input the following codes as the content in the new created file. ```python import time import gpiod as gpio PH_BASE (8 1)*32 # \"PH\" gpiochip1 gpio.chip(\"gpiochip1\") led gpiochip1.get_line((PH_BASE + 5)) # \"PH5\" config gpio.line_request() config.request_type gpio.line_request.DIRECTION_OUTPUT led.request(config) while led: led.set_value(0) time.sleep(1) print(\"led on\") led.set_value(1) time.sleep(1) print(\"led off\") ``` Save it and quit editing, run the code in terminal. ```bash python3 led.py ``` Result: ![202108091956](./../../../zh/maixII/M2A/assets/202108091956.gif) ## Running at startup Scripting language skill is required. First enable the boot auto start script, here we can modify the relevant settings by editing the relevant files to. ```bash vim /lib/systemd/system/rc local.service ``` Then we add following content in the end of the file. ```bash [Install] WantedBy multi user.target Alias rc.local.service ``` Up to now we have succeed enable auto start script. Then we just need to add what we want to run at startup to the rc.local file to achieve startup start. Edit the auto start script. ```bash vim /etc/rc.local ``` Add the operations you want to do at startup before ``exit 0`. ```bash echo \"hello world!\" ``` Then restart the board. For example, after editing the auto start script, it executs before user logs in, and the execution example log is as follows. ```bash [ OK ] Finished Permit User Sessions. [ 38.569457] rc.local[1322]: hello world! ``` It's suggested not to use serial port ar startup, this will make us unable to use the board by serial port. ## More usage Visit [MaixPy3](/soft/maixpy3/zh/readme.md)(English docs will be updated soon)"},"/hardware/en/maixII/M2A/maixsense.html":{"title":"MaixSense","content":"# MaixSense This board is different from Maix I series, it's main chip not only incorporates AI acceleration hardcore, but also supports running armbian operating systems. ## M2A core board M2A core board use R329 as main chip, and also contains components like power management chip, fel burn key, wifi module, storge pad reserved and RMGII interface. ![M2A](./../../maixII/M2A/assets/M2A.jpg) ### R329 chip R329 is a 64 bits processor designed by Allwinner containing dual Cortex A53 inside, with 2 HIFI4 DSP used for audio pre processing and post processing, containing an extremely low energy consumption AIPU (Artificial intelligence processing unit) whose hash rate over 0.256 TOPS designed by ARM China, can be used to accelerate neural network, dealing with the 720P image captured by camera. ![R329_function_block](./../assets/../M2A/assets/R329_1.png) Item Specs CPU Dual core ARM Cortex™ A53@1.5GHz<br>32KB L1 I cache + 32KB L1 D cache per core<br>256KB L2 cache DSP Dual core HiFi4@400MHz<br> 32KB L1 I cache + 32KB L1 D cache per core<br> 2MB SRAM NPU zhouyi™Z1 AIPU，0.25TOPS@600MHz RAM 256MB DDR3 inside Storge Support SPI Nand/Nor/eMMC Audio Supports 5 audio ADC and 2 audio DAC<br>Supports 5 analog audio inputs and 2 analog audio output<br>Up to 3 I2S/PCM controllers for Bluetooth and external audio codec<br>Integrated digital microphone, supports up to 8 digital microphones Enthernet 10/100/1000 Mbps USB OTG \\* 1<br>Host \\* 1 SDIO SDIO 3.0 * 2 I2S I2S*3(I2S0, I2S1, S I2S0) SPI SPI*2(SPI0, SPI1) TWI TWI*3(TWI0, TWI1, S TWI0) GPADC 4 ch SCR SCR*1 PWM PWM*15(PWM[8:0], S PWM[5:0]) ### MaixSense MaixSense is a really small Linux card computer. Its package contains a SOM based on R329, and a multifunction IO expansion bottom board. Running Linux OS, it can be used for personal server, Intelligent voice assistant or robotis. Because of the AIPU npu core, this board can also be used for intelligent voice and video image processing, and AI model like CV , NLP can also run on it. **Tina Linux**：Tina Linux is an embedded system built for intelligent hardware products by Allwinner based on openwrt 14.07. Kernel source code, drivers, toolchain, system middleware and application packages can be found @ [https://github.com/sipeed/r329 linux 4.9](https://github.com/sipeed/r329 linux 4.9) MaixSense not only can run Tina os, but also can run **armbian**, which is built based on debian/ubuntu, is a really full linux os. Name armbian Tina : : : Description A `Debian OS` for `arm` devices An OS modified from OpenWRT1404 Feature Linux mainline, with many advantages Deeply modified, well fits hardware Target user New Linux user Linux developer, custome design ## Maixsense appearance <div align \"center\"> <img src \"./../../maixII/M2A/assets/M2A 1.gif\" alt \"Maixsense outlook\" > </div> ## MaixSense Specs <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\">MaixSense Specs</th> </tr> </thead> <tbody float:left> <tr> <td>CPU</td> <td>Dual ARM CortexTM A53™ </td> </tr> <tr> <td>AIPU(NPU)</td> <td>TZ1AIPU，Supports up to 0.25TOPS@600MHz max</td> </tr> <tr> <td>DRAM</td> <td>SIP 256MB DDR3</td> </tr> <tr> <td>Memory</td> <td>SPI NAND pad(Default blank)<br>SD card slot on bottom board</td> </tr> <tr> <td>Video Encoder</td> <td>H264/5 &JPEG,supports up to 720p@30fps</td> </tr> <tr> <td>Camera</td> <td>Default equipped with OV9732，720P@30fps HD.<br>Connected by USB C connector, supports front or back insertion (can be used as front or rear cameras)</td> </tr> <tr> <td>Microphone</td> <td>2 Analog MEMS microphones，average sensitivity 91dB SPL@1kHz</td> </tr> <tr> <td>Screen</td> <td>1.5 inch SPI screen, with 0.5mm 12P FPC interface，240*240 resolution</td> </tr> <tr> <td>Key</td> <td>1 reset key and 4 user keys(ADC keys)，1 download key(FEL)</td> </tr> <tr> <td>Ethernet</td> <td>24P 0.5mm FPC connector，for connecting PHY</td> </tr> <tr> <td>IO Routed</td> <td>3*10P 2.54mm IO pads<br>4P* 1.25 male connectors(Used for usart1)<br>See following pinout for more help</td> </tr> </tbody> </table> ## Pinout ![R329 pin](./../../maixII/M2A/assets/R329 pin.jpg) Camera Port pin： ![camera_pin_order](./../../../zh/maixII/M2A/assets/camera_pin_order.png) ## Others [MaixSense other related information](https://dl.sipeed.com/shareURL/MaixII/MaixII A) ## Support Email to support@sipeed.com for business cooperation or leave messge in this page for help."},"/hardware/en/maixII/index.html":{"title":"Maix-II series hardware products","content":"Maix II series hardware products ## Maix II brief Following the classic K210 Maix I series AIOT boards, Sipeed continues to launch a number of edge computing boards that can run a complete Linux system, which will be named MAIX II and MAIX III in order of performance. The MAIX II series includes a variety of hardware products currently: * **Maix II Dock**: **Recommended products in this series**, the chip is Allwinner V831, a cost effective SOC that can run Linux, and supports hardware AI acceleration (0.2Tops computing power), currently have the best software support in Maix II series, provide C SDK and Python SDK, and online model training service ([MaixHub](https://maixhub.com)) * **MaixSense**: The chip is Allwinner R329, which also provides hardware AI acceleration, 0.25Tops computing power. * **Maix II S**: The chip is Allwinner V833, an upgraded version of V831, which is mainly used for commercial customization, and individual users should choose carefully. ## MaixII Dock The chip is Allwinner V831, single core Cortex A7 800MHz, 64MiB on chip DDR2 memory, cost effective SOC that can run Linux, and supports hardware AI acceleration (0.2Tops computing power), which can be used as a common Linux SOC or used for Edge AI applications. **This series of recommended products**, the most cost effective, the current software support is the easiest to get started, supports C language development, provides C SDK ([libmaix](http://github.com/sipeed/libmaix)); also provides [ MaixPy3](/maixpy3) support, you can use Python language to develop, you can directly use a large number of Python libraries, and supporting jupyter IDE, and [MaixHub](https://maixhub.com) fully supports this device * Quick overview of product features <p align \"center\"> <iframe src \"//player.bilibili.com/player.html?aid 298543445&bvid BV1sF411u7xb&cid 586467021&page 1\" scrolling \"no\" border \"0\" frameborder \"no\" framespacing \"0\" allowfullscreen \" true\"> </iframe> </p> * Real pictures: ![m2dock](../../assets/maixII/m2dock.jpg) * Purchase link: [sipeed.aliexpress.com](https://www.aliexpress.com/item/1005002538932487.html) * Details: [MaixII Dock](./M2/resources.html) ## MaixSense The chip is Allwinner R329, dual core A53@1.5GHz, on chip 256MiB DDR3 memory, dual core HiFi4@400MHz also provides hardware AI acceleration, 0.25Tops computing power, more good at audio field, support armbian system. There are many official open materials, and it is more suitable for developers with strong hands on ability at present. ![](./M2A/assets/M2A 1.gif) * Purchase link: [sipeed.aliexpress.com](https://www.aliexpress.com/item/1005003152376519.html) * Details: [MaixSense](./M2A/maixsense.html) ## MaixII S It can be understood as a performance upgrade version of V831. Programs on V831 can be directly run on V833. This development board only supports commercial users. Personal users are recommended to choose Maix II Dock development board. <img style \"max height: 300px\" src \"./M2S/assets/M2s_Dock.jpg\" alt \"M2s_Dock\"/> * Details: [MaixII S](./M2S/V833.html)"},"/hardware/en/maixII/M2/no_sd_flash.html":{"title":"","content":""},"/hardware/en/maixII/M2/resources.html":{"title":"Maix-II-Dock(M2dock) introduction","content":" title: Maix II Dock(M2dock) introduction keywords: MaixII, MaixPy3, Python, Python3, M2dock desc: maixpy Onboard resources Maix II Dock is positioned as a cost effective AIOT development board. While supporting conventional Linux development, it also has a unique AI hardware acceleration feature. With the complete software ecosystem provided by Sipeed, you can quickly realize your edge AI application. * **Hardware**, based on the Allwinner V831 chip, the development board is formed in the form of [core board] + [ext board]. You can use the development board directly, or you can use only the core board to design your own ext board according to your needs, which is convenient and fast to complete the development. * **Software**, in addition to directly using the datasheet provided by Allwinner for development (some satasheet may need to be obtained from Allwinner), Sipeed provides a very convenient Python SDK ([MaixPy3](/maixpy3)) and C SDK ([libmaix](https://github.com/sipeed/libmaix)). It also provides an online model training service ([MaixHub](https://maixhub.com), which is more convenient for beginners to quickly train their usable AI models. * **Purchase**: [sipeed.aliexpress.com](https://www.aliexpress.com/item/1005002538932487.html) <p align \"center\"> <iframe src \"//player.bilibili.com/player.html?aid 298543445&bvid BV1sF411u7xb&cid 586467021&page 1\" scrolling \"no\" border \"0\" frameborder \"no\" framespacing \"0\" allowfullscreen \"true\"> </iframe> </p> ## M2 core board <img style \"max height: 260px\" src \"./../../../zh/maixII/M2/asserts/maix_v831.jpg\" alt \"core_board\"/> > Download hardware reference data from [Sipeed_Maix_II_3101](https://api.dl.sipeed.com/shareURL/MaixII/MaixII Dock/HDK/Sipeed_MaixII_V831/Sipeed_Maix_II_3101) ### V831 chip brief Allwinner V831, single core Cortex A7 800MHz, 64MiB on chip DDR2 memory, cost effective SOC that can run Linux, and supports hardware AI acceleration (0.2Tops computing power), can be used as a normal Linux SOC, and can also be used for edge AI application. See the manual below for more detailed parameters. Dataset: [V833／V831 Datasheet V1.0.pdf](https://linux sunxi.org/images/b/b9/V833%EF%BC%8FV831_Datasheet_V1.0.pdf) Chip structure: <img style \"max height: 400px\" src \"./../../../zh/maixII/M2/asserts/V831_struct.png\" alt \"V831 structure\"/> ### M2 core board details Compared with Maix I generation Item Maix I (K210) Maix II (V831) Main frequency 400~600Mhz 800~1000Mhz Video encoder None H.264, up to 1080p@30fps<br>H265, up to 1080p@30fps<br>JPEG, up to 1080p@30fps NPU 0.23TOPS<br>support Conv+BN+ACT+POOL 0.2TOPS<br>support Conv,Inner_Product,Pool,Eltwise,ACT,BN,Split,Concat Memory 8MB SRAM SIP 64MB DDR2 Storage 16MB SPI Nor Flash Choosable 16M flash(Blank default) Camera DVP, support 30W pixels max 2lane MIPI, Up to 1080P@60fps Display 8bit MCU LCD 8bit MCU LCD, can use other screen by convert board SDIO None SMHC x2 (SDC0, SDC1) SPI SPIx3 SPI x2 (SPI0, SPI1) I2C I2C x3 I2C x4 (TWI0, TWI1, TWI2, TWI3) I2S 8bit I2S I2S x1 (I2S0) Ethernet None 10/100 Mbit/s Ethernet port with RMII interface ADC None 1 ch 6bit LRADC for key Audio None LINEOUTP + MICIN1P/N Development environment Maixpy/C MaixPy3/linux ## Bottom board Normally we think the screen panel is the front and camera is back. ![m2dock](./../../../assets/maixII/m2dock.jpg)no > Download dock board hardware data [Click me](https://api.dl.sipeed.com/shareURL/MaixII/MaixII Dock/HDK/Sipeed_MaixII_Dock_V831) > Thanks for net users sharing the [NGFF M.2 B key footprint for Maix II module](https://bbs.elecfans.com/jishu_2036119_1_1.html) ### Dock board Specs ![Dock board](./../../../zh/maixII/M2/asserts/M2Dock_pin.jpg) Number Maix II Part Function Note 1 M.2 B KEY female slot*1 Used for connect V831 core board Have connectted with core board when sold 2 Core board M2 copper column nuts*1 Fix core board with bottom board Have been fixed when sold 3 Power LED*1 Show power state 4 State LED*1 User programmable led 5 CPU Reset button*1 Reset V831 chip 6 User button*2 Change IO voltage value，custome usage 7 Wi Fi module*1 RTL8189FTV，adds Wi Fi function for this board SDIO Interface 8 BTB camera interface*1 Connect BTB camera module Have connectted with bottom board when sold 9 Camera M2 copper column nuts*2 Fix BTB camera with bottom board Have been fixed when sold 10 FHD camera*1 Default SP2305 Sensor BTB style, 1080P Default 6mm focal length M12 lens，can use other Suitable camera 11 USB to UART chip*1 Provide serial port communication 12 Type C interface(USB OTG) *1 Used for V831 otg function Can be used for power supply 13 Type C interface(UART) *1 Used for V831 uart debugging Can be used for power supply 14 Three axis accelerometer*1 I2C interface，can read 3 axes acceleration data 15 MicroSD card slot*1 Connect microSD card Default boot from SD card 16 LCD interface*1 FPC0.5mm 24Pin，MCU interface 17 IPS HD screen\\*1 1.3 inch IPS screen，resolution 240\\*240 Have connectted with core board when sold 18 IPEX Wi Fi antenna connector IPEX(first generation) Wi Fi antenna 19 Extension female header Route V831 general IO，used for connecting peripheral 20 Speaker connector*1 MX1.25 2P interface（1.25mm pitch） 21 Loudspeaker*1 8Ω1W 1609 composite aluminum membrane speakers Have connectted with core board when sold 22 Microphone*1 Analog electret microphone ## Resource summary Hardware: [MaixII Hardware Library](https://api.dl.sipeed.com/shareURL/MaixII/MaixII Dock/HDK) software: * Python SDK: [MaixPy3 software documentation](/maixpy3) * C SDK: [libmiax](https://github.com/sipeed/libmaix) * MaixHub model platform (AI model download, online training, project sharing): [MaixHub](https://maixhub.com) * Allwinner tina V83x SDK: [Tina Linux/tina V83x](https://github.com/Tina Linux/tina V83x) * Toolchain: [dl.sipeed.com](https://dl.sipeed.com/shareURL/MaixII/MaixII Dock/SDK/Toolchain) or [github](https://github.com/sipeed/libmaix /releases/download/v0.1.0/toolchain sunxi musl pack 2021 01 09.tar.xz) ## Maix II Dock Getting Started Development Route Guide * Because Maix II Dock runs linux system (tina linx), so we need to learn to burn the system image first, just like learning how to reinstall the computer system, which helps us start over if you encounter problems, find the \"Burn image\" article in the left directory to view <! There is no link to the burning system, let users learn to view the left directory > * Learn basic Linux operations, such as how to open a terminal, basic terminal commands, and how to transfer files to the development board, such as serial port usage, adb usage, and other basic operations * Select your development language: * If you are familiar with C and have some development experience, you can choose to use [libmaix](https://github.com/sipeed/libmaix) * If you want to get started quickly and develop in Python, please use [MaixPy3](/maixpy3) and read its documentation carefully * If you need to use AI functions, you can use it with the [MaixHub](https://maixhub.com) online training platform, this platform provides AI model and project sharing function, save users's time."},"/hardware/en/maixII/M2/usage.html":{"title":"Usage","content":" title: Usage keywords: MaixII, MaixPy3, Python, Python3, M2dock, Tina, Openwrt desc: maixpy MaixII M2dock start to use ## Introduct openwrt > Allwinnner V831 use Tina Linux, which is created from [OpenWrt](https://openwrt.org). The OpenWrt is a Linux operating system targeting embedded devices. Visit [official website](https://openwrt.org) and [official open repository](https://github.com/openwrt/openwrt) for more details. For V831 we use adb shell to control it. Connect otg interface marked on board with computer. Fow Windows users, download the latest adb, add its path into system path and save it then use command `adb shell` to connect V831. For linux we need to install adb first, then run command `adb shell` to connect V831. ## Wireless connection There is a 2.4G wireless module on M2Dock, with which we can connect to wireless network. Because of the change of different system image, the ways to connect to wireless network on V0.5.4 system version and system version before V0.5.4 are different. ### V0.5.4 In this system version, we remove the way to connect wireless network by editting `wpa_supplicant.conf` file of the u disk, and we use commands to connect wireless network. We can see there are many linux commands about wifi in this system. ![wifi_test_command_list](./../../../zh/maixII/M2/asserts/usage/wifi_test_command_list.jpg) Here we use `wifi_connect_ap_test` to connect wireless network, and we can use `wifi_scan_results_test` to scan the wireless network to see whether M2Dock detects your target network. We use following command connect wireless network named `Sipeed_Guest` and its password is `qwert123`. ```bash wifi_connect_ap_test Sipeed_Guest qwert123 ``` Change `Sipeed_Guest` into your target wireless network name and change `qwert123` into your target wireless network password. ![wifi_test_connect_wireless](./../../../zh/maixII/M2/asserts/usage/wifi_test_connect_wireless.jpg) From the connection message, we can see `192.168.3.158`, this is the IP address of M2Dock in this network enviroment. We can run `ifconfig` on M2Dock to see the ip address, from which we see that the ip address is the same as the wireless network connection message. ![wifi_test_ifconfig](./../../../zh/maixII/M2/asserts/usage/wifi_test_ifconfig.jpg) ### V0.5.4 and previous image Connect M2Dock USB OTG port to computer, there is a u disk in your computer. Edit the `wpa_supplicant.conf` file which is in the u disk, ![wap_conf_png](./../../../zh/maixII/M2/asserts/usage/wap_conf.png) Change `yourWIFIname` and `yourWIFIpassword` into your target wireless network name and password. Then remove the u disk from your system, use your operating system command to remove the u disk, otherwise this file will be damaged. After removing the u disk, reboot M2Dock by press RST KEY. ![wap_conf_gif](./../../../zh/maixII/M2/asserts/usage/wap_conf.gif) ### Update MaixPy3 Download MaixPy3 manually: https://pypi.org/project/maixpy3/#history ![maixpy3_download](./../../../zh/maixII/M2/asserts/usage/maixpy3_download.png) Download the file whose name incorporates `cp38`, then rename it into `maixpy3 9.9.9 cp38 cp38 linux_armv7l.whl`, save it into the u disk of M2Dock, reboot your board and maixpy3 will update automatically at boot up. ![maixpy3_install](./../../../zh/maixII/M2/asserts/usage/maixpy3_install.png) Do Not Do Any Operation When Updating. ### Okpg package management The opkg utility is the lightweight package manager used for upgrading the functionality of the system rather significantly by downloading and installing pre made packages from package repositories. #### Related commom commands opkg update # Update the updatable utility opkg upgrade # Upgrade the upgradable utility opkg list # list all utility opkg install # install target utility opkg remove # remove target utility For example： ```bash root@sipeed:/# opkg list MaixPy3 0.2.5 1 alsa lib 1.1.4.1 1 busybox 1.27.2 3 busybox init base files 167 1612350358 ca certificates 20160104 curl 7.54.1 1 dropbear 2015.71 2 e2fsprogs 1.42.12 1 eyesee mpp external 1.0 1 eyesee mpp middleware 1.0 1 eyesee mpp system 1.0 1 ``` ## Test screen There is a flushing on screen after power on. this means the board is well working, and the flushing is caused by the system reset. We can use command `cat /dev/urandom > /dev/fb0` to test the screen. <center><img src \"./../../../zh/maixII/M2/asserts/lcd_test.jpg\" width \"400\"></center> ## Run python3 We can type `python3` in adb shell to run python3 in interative mode on V831. ```python import platform print(platform.uname()) ``` Actual operation on 2022.07.06 ```bash __ _ / / (_)__ __ ____ __ / /__/ / _ \\/ // /\\ \\ / sipeed.com (Neptune) /____/_/_//_/\\_,_//_\\_\\ root@sipeed:/# python3 Python 3.8.5 (default, Jun 14 2022, 09:51:56) [GCC 6.4.1] on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> import platform >>> print(platform.uname()) uname_result(system 'Linux', node 'sipeed', release '4.9.118', version '#3242 PREEMPT Tue Jun 28 04:03:38 UTC 2022', machine 'armv7l', processor '') ``` ## Test camera We use MaixPy3 to test camera, let's run python3 first. ```python from maix import camera, display, image display.show(camera.capture()) ``` <center><img src \"./asserts/hello_world.jpg\" width \"500\"></center> > If your screen doesn't display anything, make sure your mirror is the latest one and your drivers are correct. ## How to use USB camera There are 2 USB Type C ports on M2Dock. One is masked UART for the serial communication between this board and computer, another port masked with OTG is used for user defined functions. We set it's `usb_device` so that we can use `adb` to control this board by default. To connect USB camera, we need to set the OTG port to be the usb_host. Run the following command on M2Dock to change its function. ```bash echo \"usb_host\" > /sys/devices/platform/soc/usbc0/otg_role ``` Then we can control the USB camera device which is in the /dev directory. ## How to set USB OTG port usb_device mode The OTG port is usb device mode by default, by which we can control this board via `adb`. And maybe we changed its function to be a USB host for some reason and now we want to change it back to being a USB device. Just run the following command on M2Dock(You can run the following command on M2Dock via UART with 115200 baudrate). ```bash echo \"usb_device\" > /sys/devices/platform/soc/usbc0/otg_role ``` ## ToolChain [Here](https://dl.sipeed.com/shareURL/MaixII/MaixII Dock/SDK/Toolchain) is a toolchain for V831, it can be run in linux system. ## MaixPy3 For this device we suggest you use [Maixpy3] to develop , and its English documents will come out soon. ## SDK development Now we have open V831 source sode here, use this https://github.com/Tina Linux/tina V83x if you need."},"/hardware/en/maixII/M2/PhoenixSuit.html":{"title":"","content":""},"/hardware/en/maixII/M2/tools/vscode.html":{"title":"如何使用 vscode","content":" title: 如何使用 vscode keywords: vscode, MaixPy3, Python, Python3 desc: maixpy 如何使用 vscode ## 前言 它是微软出品的一款可扩展的轻量级开源编辑器，并且支持全平台系统。这些特性使得 VSCode 颇受欢迎，这也使其成为了一个很棒的 Python 开发平台。 关于如何安装和使用它的教程已经数不胜数，这里只推荐[【用 VSCode 愉快地写 Python 代码】](https://zhuanlan.zhihu.com/p/66157046)。 ## 为什么要使用它？ 除了专业 Python 代码开发环境，它还支持打开 jupyter notebook 文档运行代码。 与浏览器运行的 jupyter notebook 一样，执行 Python 代码的时候要选择对应的执行核心，如 [ipython/ipykernel](https://github.com/ipython/ipykernel) 或者 [rpyc_ikernel](https://github.com/sipeed/rpyc_ikernel) 的核心。 下面就来说说如何使用它。 ### 创建 notebook 文档 ![](https://tukuimg.bdstatic.com/scrop/abb1e4146fb8679109fa99aa0b03f59f.gif) ### 运行 Python 代码 ![](https://tukuimg.bdstatic.com/scrop/a1e2381bfac1a332a323774ee1b49c9f.gif) ### 运行后预览图表 ![](https://tukuimg.bdstatic.com/scrop/9c5bf21507c776f98d55bcfc0e51c5ff.gif) ## 你可以学到什么？ 在 VS Code 中使用 Jupyter 笔记本时需要进行的基本操作。如果您使用 VS Code 来满足其他开发需求，那么在 VS Code 中尝试使用 Jupyter Notebook 是非常方便的，这样您就可以只使用一个 IDE。特别是其代码自动补齐的功能可以让你的开发更快捷。 > 需要注意的是，截止 2021年3月3日 在 VSCODE 里的 jupyter notebook 文档进行中断存在一些问题，并不是很流畅，如果出现了运行无响应的问题可以重新打开文档解决问题。"},"/hardware/en/maixII/M2/tools/mobaxterm.html":{"title":"如何使用 mobaxterm","content":" title: 如何使用 mobaxterm keywords: Jupyter, MaixPy3, Python, Python3 desc: maixpy 如何使用 mobaxterm ## mobaxterm 是什么？ 这是在 Windows 下使用的全能终端管理软件，对开发与运维人员必备，可以在 [mobaxterm.mobatek.net/download](https://mobaxterm.mobatek.net/download.html) 获取免费版本使用，在国内网站上有中文版。 ![](https://mobaxterm.mobatek.net/img/moba/features/feature terminal.png) 主要通过它提供的下列功能： serial 通过串口连接 Linux 系统的终端 ssh 远程登录 Linux 系统的终端 ftp 远程访问文件服务上的资源 ## 连接 Serial 开源硬件产品大多都会预留串口（Serial）用作 Linux 系统的终端交互接口，下面介绍串口【session】的创建。 ![](./asserts/mobaxterm serial 4.png) 在「session setting」 对话框里选择【serial】，再选好串口号及波特率，点击【OK】就完成连接了。 ![](./asserts/mobaxterm serial 5.png) 同样【session】会保存在左侧的【session】标签页里，方便下次连接。 ## 连接 SSH 除了有线串口的方式，还可以通过无线访问 SSH 登录 Linux 系统，如一般的家用路由器。 在 Linux 系统输入 ifconfig 查看自己 ip 地址（192.168.1.185），然后输入自己名称和密码，常见有 root / root 。 > 如果没有设置密码，root 的连接密码是 root 。输入密码的时候是看不到的，在输入结束之后，按回车即可 ![](./asserts/mobaxterm_ssh.jpg) 就可以看到 Linux 的登录会话终端了。 ![](./asserts/mobaxterm_ssh_view.jpg) > 以下连接方式只是合适在 MaixII Dock 上使用的，需要使用 MaixPy3 IDE 版本 0.4.2以上的版本 MaixII Dock 可以通过 OTG 接口转发到 127.0.0.1 的 22 端口，但是每次使用之前，都需要通过运行 IDE 来进行配置，进行 ssh 端口转发服务的开启。 具体的连接方式和上面的 ssh 方式一样，只需要将 ip 地址修改成 127.0.0.1 即可，默认用户名和密码都是 root。 ## 连接 FTP 与 SSH 同理。 ![](./asserts/mobaxterm_ftp.png) 进入后就可以看到文件夹了。 ![](./asserts/mobaxterm_ftp.jpg) 可以拖拽文件上传和下载。 ![](./asserts/mobaxterm_ftp_ud.png) ## 如何进行编程 除了使用串口进行 Python 代码的复制粘贴运行，还可以通过在 FTP 文件管理获取下图的代码编辑器，编辑后保存就会自动同步上传（下图为 C 代码参考，其他代码同理）。 ![](https://mobaxterm.mobatek.net/img/moba/features/feature mobatexteditor.png) 这时候再拿到终端里运行 Python 脚本即可。 ```bash python xxxx.py ```"},"/hardware/en/maixII/M2/tools/adb.html":{"title":"adb 操作介绍","content":"# adb 操作介绍 ADB.exe 在 MaixPy3 IDE 中的 maixpy3_examples 和 PhoenixSuit 文件夹下 ## 链接开发板 将开发板上的 OTG 接口接上电脑， 然后再命令行中输入 adb shell，会自动进入到开发板的 linux 系统中 ```shell BusyBox v1.27.2 () built in shell (ash) run profile file __ ___ _ __ _ / / /__ _(_)_ __ / / (_)__ __ ____ __ / /_/ / _ `/ /\\ \\ / / /__/ / _ \\/ // /\\ \\ / /_/ /_/\\_,_/_//_\\_\\ /____/_/_//_/\\_,_//_\\_\\ root@sipeed:/# ``` 这时可以开始使用 MaixPy3 进行开发了"},"/hardware/en/maixII/M2/introduce.html":{"title":"Chip introduction","content":" title: Chip introduction keywords: MaixII, MaixPy3, Python, Python3, M2dock desc: maixpy About V831 In the last year or so, we’ve started to see several camera SoCs with a built in NPU or SIMD instructions to accelerate face detection, objects detection and so on, starting with the low resolution Kendryte K210 processor to the 2.5K Ingenic T31 MIPS video processor, or even the 4K capable iCatch V37 camera SoC. Allwinner introduces several camera processors (V3, V316, S3…) in the past, but none of them included an NPU aka AI accelerator. This has now changed with Allwinner V831 Cortex A7 Full HD camera SoC also including a small 200 GOPS NPU. > Copied from [allwinner v831 ai full hd camera soc powers sochip v831 development board](https://www.cnx software.com/2020/04/28/allwinner v831 ai full hd camera soc powers sochip v831 development board/) ## v831 Chip ![V831_struct.png](./../../../zh/maixII/M2/asserts/V831_struct.png) ## Parameters Item Specs Addition CPU Up to 800Mhz Video encoder H.264, up to 1080p@30fps</br>H265, up to 1080p@30fps</br>JPEG, up to 1080p@30fps NPU 0.2T EISE Up to 1080p@30fps SDRAM SIP 64MB DDR2 SIP(System In a Package) SMHC SMHC x2 (SDC0, SDC1) SD MMC Host controller SPI SPI x2 (SPI0, SPI1) LCD Serial RGB, i8080 DSPO BT656 I2S I2S x1 (I2S0) Parallel CSI No support Ethernet 10/100 Mbit/s Ethernet port with RMII TWI TWI x4 (TWI0, TWI1, TWI2, TWI3) RSB No support GPADC 1 ch Audio codec Output: LINEOUTP</br>Input: MICIN1P/N MIPI CSI 2 lane, up to 1080p@60fps MIPI DSI No support Package QFN88 Click to download [V833／V831 Datasheet V1.0.pdf](https://linux sunxi.org/images/b/b9/V833%EF%BC%8FV831_Datasheet_V1.0.pdf) ## Support M2dock meets customer's needs in varieties of scenarios, and has been widely used in AIoT. It also has gained a very good reputation in the industry with its quality and performance. Contact support@sipeed.com for more business help."},"/hardware/en/maixII/M2/other.html":{"title":"Others","content":" title: Others keywords: MaixII, MaixPy3, Python, Python3, M2dock desc: maixpy Others > Edit on 2022.08.23 This essay tells additional usages about V831 development board. After replacing device, the app application in Maixhub image can't be used anymore. ## Replace screen Up to now this development board supports 1.3 inch, 2.4 inch and 2.8 inch IPS screen, they can be bought from aliexpress in our [shop](https://sipeed.aliexpress.com/store/1101739727?spm a2g0o.detail.100005.2.54df59cebhGZrI), consult the sale support for more information. And if you need to use other size of screen, you can email to support@sipeed.com for Commercial customization. ### Prepare The replace screen and its convert board (Consult sale support for more information) M2 Dock Latest system image ### Connect board This board can connect 1.3 inch screen directly, but it can't connect with 2.4 inch or 2.8 inch screen directly because of different line sequence, so it's required to use convert board. There is a mark 1 on convert board, which notes the direction to connect lcd screen and development board. The mark 1 on screen is as below: <div> <img src \"./../../../zh/maixII/M2/asserts/other/1.3.png\" width 350> <img src \"./../../../zh/maixII/M2/asserts/other/2.4.jpg\" width 350> </div> The mark 1 on convert board is shown as below: <img src \"./../../../zh/maixII/M2/asserts/other/change.jpg\" width 600> The mark 1 on development board is shown as below: <img src \"./../../../zh/maixII/M2/asserts/other/V831.jpg\" width 600> Connect them as what is shown below <html> <img src \"./../../../zh/maixII/M2/asserts/other/not connected.jpg\" width 350> <img src \"./../../../zh/maixII/M2/asserts/other/connected.jpg\" width 350> </html> ### Change device tree update_dtb application is for Allwinner tina linux The compiled dtb file can be download from [Download station](https://dl.sipeed.com/shareURL/MaixII/MaixII Dock/SDK/Toolchain) This dtb file is compiled from kernel, and it's not suggested to be compiled by users because it's a bit difficult. The rule of dtb file name is shown as following: File name Fit screen Fit camera : : : : : : sipeed_2.8_240x320_vs3205.dtb 2.8 inch vs3205 sipeed_2.8_240x320_sp2305.dtb 2.8 inch sp2305 sipeed_2.4_240x320_vs3205.dtb 2.4 inch vs3205 sipeed_2.4_240x320_sp2305.dtb 2.4 inch sp2305 sipeed_1.3_240x240_vs3205.dtb 1.3 inch vs3205 sipeed_1.3_240x240_sp2305.dtb 1.3 inch sp2305 Copy the compiled dtb file into the virtual U disk, then run following commmand in adb shell. ```bash sync #Refresh contents update_dtb /dev/mmcblk0 /root/sipeed_240x240_vs3205.dtb reboot #Restart to apply ``` Then we succeed changing device tree. If your screen displays incorrectly, this means you choose wrond dtb file, just reupdate it to fix this. Here is a correct display picture. ![correct display](./../../../zh/maixII/M2/asserts/show.jpg) ## Replace camera Up to now MaixII Dock development board support sp2305 and vs3205 these two cameras, and they are being sold in our online [store](https://sipeed.aliexpress.com/store/1101739727?spm a2g0o.detail.100005.2.54df59cebhGZrI), consult our salers for help. If you want to use other camera, we can do commercial customization for you, or you can adapt the drivers by yourself. Same as replacing screen, we need to update device tree to change driver. ### Prepare The replace camera MaixII Dock Latest system mirror ### Connect camera > Be careful of your camera direction, if you connect if in a wrong direction, your camera may burn out. Just make sure the white point in the same place <html> <div class \"imbox\"> <img src \"./../../../zh/maixII/M2/asserts/other/camera_outlook_1.jpg\" width 350 alt \"camera top\"> <img src \"./../../../zh/maixII/M2/asserts/other/camera_outlook_2.jpg\" width 350 alt \"camera bottom\"> </div> </html> ### Update device tree > update_dtb is a tiny tool for Allwinner tina linux Put your downloaded dtb file into the virtual disk created bu development board. Then run following commands in adb shell ```bash sync #Refresh content update_dtb /dev/mmcblk0 /root/sipeed_240x240_vs3205.dtb reboot #Reboot to apply ``` Then we succeed changing camera. This dtb file is compiled from kernel, and it's not suggested to be compiled by users because it's a bit difficult. File name Fit screen Fit camera : : : : : : sipeed_2.8_240x320_vs3205.dtb 2.8 inch vs3205 sipeed_2.8_240x320_sp2305.dtb 2.8 inch sp2305 sipeed_2.4_240x320_vs3205.dtb 2.4 inch vs3205 sipeed_2.4_240x320_sp2305.dtb 2.4 inch sp2305 sipeed_1.3_240x240_vs3205.dtb 1.3 inch vs3205 sipeed_1.3_240x240_sp2305.dtb 1.3 inch sp2305 sipeed_1.3_240x240_ov2685.dtb 1.3 inch ov2685 ## Toolchain There is a file name `toolchain sunxi musl pack 2021 01 09.tar.xz` in the [Download station](https://dl.sipeed.com/shareURL/MaixII/MaixII Dock/SDK/Toolchain), it's the toolchain for V831 in linux OS. You can try to use this if you need, but for V831 we suggest use MaixPy3 and Maixhub."},"/hardware/en/maixII/M2/flash.html":{"title":"Buring MaixII-Dock OS","content":" title: Buring MaixII Dock OS keywords: MaixII, MaixPy3, Python, Python3, M2dock desc: maixpy Buring MaixII Dock OS > Edit on 2022.06.27 ## Get system image file Download the newest V831 system image from Download website [SDK_MaixII/release](https://dl.sipeed.com/shareURL/MaixII/MaixII Dock/SDK/release), unpack the downloaded file to get the .img file, which is the system image file. > If it slows to download, you can use MEGA: https://mega.nz/folder/5dJSWJDD#nQmiOeJsX6pEl2Q0cBrj2A ## Image name rule For V831 there is name rule for all files. Here I take `v831 m2dock maixhub 0.5.1 20220701.zip` and ` v831 m2dock maixpy3 0.5.1 20220701.zip` these two image files for example. Name Meaning maixpy3 0.5.1 For [MaixPy3](https://wiki.sipeed.com/maixpy3) and its version is `0.5.1` , no maixhub app inside maixhub 0.5.1 For [MaixPy3](https://wiki.sipeed.com/maixpy3) and its version is `0.5.1` , incorporates maixhub app m2dock Image for MaixII Dock 20220701 Update date > These images is not the business edition, only can be burned into TF card. ## Buring System on Windows We use `PhoenixCard` and `PhoenixSuit` to burn image on Windows. The first one is used for burning image file into TF card, and PhoenixSuit is used for burning image file into onboard flash via USB. Only bussiness edition M2 model contains the Flash, so we need to start the system via TF card on OpenSource edition M2. ### Preparation Get burnning tool [PhoenixCard](https://dl.sipeed.com/shareURL/MaixII/MaixII Dock/SDK/tools) Get [image file](https://dl.sipeed.com/shareURL/MaixII/MaixII Dock/SDK/release) Get SD card Formatter Tool [SD Card Formatter](https://www.sdcard.org/downloads/formatter/eula_windows/SDCardFormatterv5_WinEN.zip) ### Burning system 1. Connect you sd card reader inserted with sd card with your computer, if following information comes out, click `Cancel` ![windows_format_tf](./assets/windows_format_tf.png) 2. Run `SD Card Formatter` to format your TF card: Click `Refresh` then choose your target `card`, click `Format` ![Format SD card](./../../../assets/maixII/V831/image 20210802102810041.png) 3. Run Follow the steps below to complete burning ![burn image](./../../lichee/assets/RV/flash.png) Run PhoenixCard Click `Image` marked with ① to choose your target firmware We choose `Start up` marked with ② Click `Burn` marked with ③ to burn your target firmware into tf card From `Status bar` marked with ④ to see your progress；If it's red when finishing this means it fails burning, then we should rerun `SD Card Formatter` to format the TF card to increase its success possibility. Click `Close` to close PhoenixCard ## Buring System on Windows(Ubuntu) ### Preparation Install Livesuit 1. Install dkms ```bash sudo apt install dkms ``` 2. Install libpng1.2(It must be this version) ```shell wget http://archive.ubuntu.com/ubuntu/pool/main/libp/libpng/libpng_1.2.54.orig.tar.xz tar xvf libpng_1.2.54.orig.tar.xz ``` ```shell cd libpng 1.2.54 ./autogen.sh ./configure make j8 sudo make install ``` update link binary: ```shell sudo ldconfig ``` 3. Install **livesuit** ```shell git clone https://github.com/linux sunxi/sunxi livesuite.git cd sunxi livesuite chmod +x LiveSuit.sh sudo ./LiveSuit.sh ``` ### Burning system Run command `sudo livesuit` to run livesuit software, then click the red box marked in the picture below to choose your image file. ![choose firmware](./../../../zh/maixII/M2/asserts/flash_15.png) Connect your computer with **OTG** interface on MaixII Dock without SD card in it, this software will show a dialog, then insert SD card into MaixII Dock and click yes to format SD card and burning system. ![format SD card](./../../../zh/maixII/M2/asserts/flash_17.png) Wait burning finished, then we can begin to use it. ![progress](./../../../zh/maixII/M2/asserts/flash_19.png) ![Finish](./../../../zh/maixII/M2/asserts/flash_21.png)"},"/hardware/en/maixII/M2S/reources.html":{"title":"M2S介绍","content":"# M2S介绍 MaixII S是基于 V833 芯片设计的一款【板卡】+【底板】的开发板产品。 ## 板卡 ![](./assets/M2s_Dock.jpg) > 资料[下载](https://dl.sipeed.com/shareURL/MaixII/MaixII A) ### 参数 项目 参数 CPU 全志 V833 Arm Cortex A7 1.2Ghz 主频 NPU 0.4TOPS 算力 内存 标配单片 16bit 128MB DDR3（可选最大 16bit 512MB DDR3） 存储核心板板载 128MB SD NAND（可选 512MB 和 4GB）底板板载 TF 卡座子，可扩展存储 摄像头接口MIPI：标配 200W 像素可见光摄像头(可选配宽动态摄像头)，76 度视场角<br>DVP：标配 30W 像素红外摄像头 补光灯接口 板载 2 个 DC DC 恒流降压驱动电路+2 个 2P 1.25mm 卧贴母座 <br>（每路最大驱动能力达到 5V 0.5A） 显示屏幕接口 MIPI：默认引出 4 lane MIPI 接口，已适配 5 寸和 7 寸屏 触摸屏接口 6P 0.5mm FPC 座子：可以连接电容触摸屏或者电阻触摸屏，目前已适配 GT911 音频接口 板载 3W 单声道音频功放，有 2P 1.25mm 卧贴母座可以连接喇叭 <br>板载驻极体麦克风电路，有 2P 1.25mm 卧贴母座可以连接麦克风 以太网 板载百兆 PHY 和百兆网口变压器，有 6P 1.25mm 卧贴母座可以连接以太网口 继电器 板载继电器，触电切换能力 2A 30VDC RTC 实时时钟 板载专用 RTC 芯片+1220 纽扣电池座子 按键 • 复位按键<br>• FEL 按键（进入下载模式）<br>• 2 个用户可编程按键（可以用作防拆报警键等自定义功能） 扩展接口 <br>• 4P 座子：1 组 UART、1 组 485、1 组 USB、1 组 IIC<br>• 9P 座子：2 个供电引脚+2 个继电器引脚+1 个按键的 2 引脚+2 个信号引脚<br>• 9P 座子：7 个信号引脚（可以复用为 1 组 SPI 总线+多个 CS 脚）+2 个电源引脚<br>• 9P 座子：6 个信号引脚+3 个电源引脚 ## 产品技术支持 M2S开发板可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"},"/hardware/en/maixII/M2S/V833.html":{"title":"M2S核心介绍","content":"# M2S核心介绍 ## V833 Chip V833智能视觉AI专用处理器是基于存算紧耦AI引擎的视频识别处理器，采用业界优秀的半导体工艺，创新突破了存算紧耦架构、神经网络权重量化技术、人脸检测技术和人脸图像质量评估技术、图像畸变矫正技术、图像防抖技术和可变帧率的编码技术等关键技术，有效地解决了神经网络计算复杂度高、网络性能差、人脸检测效率低和准确度不高、广角和鱼眼镜头的图像畸变、智能识别/安防产品功耗高等问题，综合技术水平达国内优秀水平，是一款能耗低、运算效率高、检测效率高、图像效果佳的人工智能视频识别处理器。 > 取至<http://www.elecfans.com/d/1557234.html> ![](./assets/V833.png) ## 参数 项目 参数 CPU 单核Cortex A7@1.2GHz Video encoder H.264, up to 5M@20fps<br>H.265, up to 5M@30fps <br>JPEG, up to 1080p@60fps NPU 0.4T EISE Up to 1080p@60fps SDRAM DDR2/DDR3/DDR3L SMHC SMHC x3 (SDcO, SDC1, SDC2) SPI SPI x3 (SPIO with 2 CS, SPIO supportsquad output/quad input SPl mode) LCD Parallel RGB, Serial RGB, i8080 DSPO BT1120,BT656 l2S l2S x2 (12S0,I2S1) Parallel CSI Support Ethernet 10/100/1000 Mbit/s Ethernet port with RGMll and RMll interfaces TWI TWI x5 (TWIO,TWI1,TWI2,TWI3,s_TwWIO) RSB support GPADC 2 ch Audio codec Output : LINEOUTP/N<br>Input: MICIN1P/N, LINEINL MIPI CSI 4 lane, up to 8M@30fps MIPI DSI Support Package LFBGA273 "},"/hardware/en/maix/index.html":{"title":"Sipeed Hardware","content":" title: Sipeed Hardware keywords: Sipeed, Hardware, Hardware Data, Documentation desc: Silicon Speed Technology's Hardware Information # Maix—I [English](./../../en/maix/index.html) ## K210 Core Module [M1/M1w](./core_module.html) [M1n](./core_modules/k210_core_modules.html) ## Maix Series Development Boards <table role \"table\" class \"center_table\"> <tbody> <tr> <th scope \"col\">Model</th> <th scope \"col\">Photo of device</th> </tr> <tr> <td> Maix Go</td> <td><a href \"./maixpy_develop_kit_board/maix_go.html\" target \"_blank\"><img src \"./assets/dk_board/maix_go/Go.jpg\" width \"260\"></a></td> </tr> <tr> <td>Maix Dock</td> <td><a href \"./maixpy_develop_kit_board/Maix_dock.html\" target \"_blank\"><img src \"./assets/dk_board/maix_dock/Dan_Dock.png\" width \"260\"></a></td> </tr> <tr> <td>Maix Duino</td> <td><a href \"./maixpy_develop_kit_board/maix_duino.html\" target \"_blank\"><img src \"./assets/dk_board/maix_duino/maixduino_0.png\" width \"260\"></a></td> </tr> <tr> <td>Maix Bit</td> <td> <a href \"./maixpy_develop_kit_board/maix_bit.html\" target \"_blank\"><img src \"./assets/dk_board/maix_bit/Bit.png\" width \"260\"></a> </td> </tr> <tr> <td>Maix Cube</td> <td><a href \"./maixpy_develop_kit_board/maix_cube.html\" target \"_blank\"><img src \"./assets/dk_board/maix_cube/maix_cube.png\" width \"260\"></a></td> </tr> <tr> <td>Maix Amigo</td> <td><a href \"./maixpy_develop_kit_board/maix_Amigo.html\" target \"_blank\"><img src \"./assets/dk_board/maxi_amigo/maix_amigo_0.png\" width \"260\"></a></td> </tr> <tr> <td>Maix nano</td> <td><a href \"./maixpy_develop_kit_board/maix_nano.html\"><img src \"./assets/dk_board/maix_nano/maix_nano.jpg\" width \"260\" alt \"Maxi nano\"></a></td> </tr> </tbody> </table> ## Product technical support Maix series of products can meet the different needs of customers in a variety of scenarios, and have been widely used in AIoT. The quality and performance have a very good reputation in the industry. The professional technical team solves hardware design and software functions for our customers. For professional technical support and more detailed information, please contact <support@sipeed.com>。"},"/hardware/en/maix/m1s/m1s_module.html":{"title":"M1s Module","content":" title: M1s Module keywords: M1s ,Module, bl808, BL808 update: date: 2022 11 14 version: v0.1 author: wonder content: Initialize Doc ## Summary Sipeed M1s module is an AIOT module based on BL808 of [Bouffalo Lab](https://en.bouffalolab.com/), it incorporates 3 cores inside, with WiFi/BT/BLE/Zigbee wireless units, including multiple cpus, audio encoder and decoder, video encoder and decoder and AI hardware accelerator (BLAI 100), suitable for a variety of high performance and low power applications. Buy one: [Aliexpress](https://www.aliexpress.com/item/1005004970779483.html) <img src \"./../../../zh/maix/m1s/assets/m1s_module/m1s_module_outlook.png\" alt \"m1s_module_outlook\" width 35%> ## Feature MainChip BL808 RV64 480MHz + RV32 320MHz + NPU BLAI 100GOPS Onboard SPI FLASH (16MByte default) Support 2.4G WIFI / BT / BLE Support IPEX I antenna and onboard PCB antenna Stamp package route all IO ## Parameter <table> <thead> <tr> <th colspan \"2\" > M1s Module </th> </tr> </thead> <tbody> <tr> <td rowspan \"8\" style \"white space:nowrap\">Main Chip BL808</td> </tr> <tr> <td>Three RISC V CPUs：<br>· RV64GCV 480MHz <br>· RV32GCP 320MHz <br>· RV32EMC 160MHz</td> </tr> <tr> <td>AI NN general purpose hardware accelerator：<br>· BLAI 100, used for video/audio detection/identification，100GOPS hashrate</td> </tr> <tr> <td>768KB SRAM + 64MB UHS PSRAM</td> </tr> <tr> <td>Encode and Decode<br> MJPEG and H264(Baseline/Main)<br> 1920x1080@30fps + 640x480@30fps </td> </tr> <tr> <td>Interface：<br> Camera interface ：DVP and MIPI CSI<br> Display interface：SPI、DBI、DPI(RGB)</td> </tr> <tr> <td>Wireless：<br> Support Wi Fi 802.11 b/g/n<br> Support Bluetooth 5.x Dual mode(BT+BLE)<br> Support Wi Fi / BT co existence</td> </tr> <tr> <td>USB 2.0 HS OTG</td> </tr> <tr> <td rowspan \"3\" style \"white space:nowrap\">Onboard components</td> </tr> <tr> <td>Onboard SPI FLASH（Optional Capacity）</td> </tr> <tr> <td>Support IPEX I antenna and onboard PCB antenna</td> </tr> </tbody> <tr> <td rowspan \"6\" style \"white space:nowrap\"> Others </td> </tr> <tr> <td> Dimension ：31mm (L) x 18mm (W) </td> </tr> <tr> <td> 3D model file：<a href \"https://dl.sipeed.com/shareURL/MAIX/M1s/M1s/5_3D_file\">Click me</a> </td> </tr> <tr> <td>External power supply requirements：<br>VDDIO4/VDDIO3/VDDIO1/ and 3V3 these power supplys are required</td> </tr> <tr> <td>Temperature rise: &lt;30K</td> </tr> <tr> <td>Operating temperature: 10℃ ~ 65℃</td> </tr> </tbody> </table> <img src \"./../../../zh/maix/m1s/assets/m1s_module/m1s_module_size.png\" alt \"m1s_module_size\" width 35%> ## Chip Cores Three cores in chip: M0，D0，LP。 M0 D0 LP T HEAD E907@320MHz T HEAD [C906](https://xrvm.com/cpu details?id 4056751997003636736)@480MHz T HEAD [E902](https://xrvm.com/cpu details?id 4056758197145440256)@160MHz ## Pin map Visit Schematic for details：[Click me](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s/2_Schematic) <img src \"./../../../zh/maix/m1s/assets/m1s_module/m1s_pins.png\" alt \"m1s_pins\" width 55%> ## Comparison <table> <thead> <tr> <th style \"text align:left\">Item</th> <th style \"text align:left\">M1(K210)</th> <th style \"text align:left\">M1s(BL808)</th> <th style \"text align:left\">ESP32 S3 WROOM N16R8</th> </tr> </thead> <tbody> <tr> <td style \"text align:left\">CPU</td> <td style \"text align:left\">RV64@400MHz x2</td> <td style \"text align:left\">· RV64GCV@480MHz<br>· RV32GCP@320MHz<br>· RV32EMC@160MHz</td> <td style \"text align:left;white space:nowrap\">Xtensa LX7@240MHz x2</td> </tr> <tr> <td style \"text align:left\">RAM</td> <td style \"text align:left\">8MB SRAM</td> <td style \"text align:left;white space:nowrap\">· 768KB SRAM <br>· 64MB UHS PSRAM(2000MHz)</td> <td style \"text align:left\">· 512KB SRAM<br>· 8MB PSRAM</td> </tr> <tr> <td style \"text align:left\">Flash</td> <td style \"text align:left\">16MB</td> <td style \"text align:left\">16MB</td> <td style \"text align:left\">16MB</td> </tr> <tr> <td style \"text align:left\">OS</td> <td style \"text align:left\">· FreeRTOS<br>· No mmu Linux</td> <td style \"text align:left\">· FreeRTOS<br>· Linux</td> <td style \"text align:left\">RTOS</td> </tr> <tr> <td style \"text align:left\">NPU</td> <td style \"text align:left;white space:nowrap\">230GOPS with limited OPS</td> <td style \"text align:left;white space:nowrap\">100GOPS with rich OPS</td> <td style \"text align:left\"></td> </tr> <tr> <td style \"text align:left\">Camera</td> <td style \"text align:left\">DVP, up to VGA</td> <td style \"text align:left\">MIPI + DVP, up to 1080P h264</td> <td style \"text align:left\">DVP</td> </tr> <tr> <td style \"text align:left\">Display</td> <td style \"text align:left\">· SPI<br>· 8bits MCU LCD</td> <td style \"text align:left\">· SPI<br>· 8bits MCU LCD<br>· RGB LCD</td> <td style \"text align:left\">· SPI<br>· 8bits MCU LCD</td> </tr> <tr> <td style \"text align:left\">Audio</td> <td style \"text align:left\">I2S</td> <td style \"text align:left\">· I2S<br>· Analog Audio Input/Output</td> <td style \"text align:left\">I2S</td> </tr> <tr> <td style \"text align:left\">Wireless</td> <td style \"text align:left\"></td> <td style \"text align:left\">WIFI+BLE+Zigbee</td> <td style \"text align:left\">WIFI + BLE</td> </tr> <tr> <td style \"text align:left\">USB</td> <td style \"text align:left\"></td> <td style \"text align:left\">USB2.0 OTG HS</td> <td style \"text align:left\">USB1.1 OTG</td> </tr> <tr> <td style \"text align:left\">Accelerator</td> <td style \"text align:left\">FFT</td> <td style \"text align:left\">· Scaler<br>· OSD<br>· MJPED<br>· G2D<br>· H264</td> <td style \"text align:left\"></td> </tr> <tr> <td style \"text align:left\">Perpheral</td> <td style \"text align:left\">UART, SPI, IIC</td> <td style \"text align:left\">UART, SPI, IIC, SDIO ETH(RMII), ADC/DAC</td> <td style \"text align:left\">UART, SPI, IIC, SDIO, ADC</td> </tr> <tr> <td style \"text align:left\">Size</td> <td style \"text align:left\">25.4 x 25.4 mm</td> <td style \"text align:left\">31 x 18 mm</td> <td style \"text align:left\">25.5 x 18 mm</td> </tr> <tr> <td style \"text align:left\">Price</td> <td style \"text align:left\">$6</td> <td style \"text align:left\">$6</td> <td style \"text align:left\">$4.3(digikey)</td> </tr> </tbody> </table> ## Software <table> <thead> <tr> <th colspan \"2\" > M1s Module </th> </tr> </thead> <tbody> <tr> <td>OS</td> <td>· Full support for FreeRTOS<br>· Basic support for Linux</td> </tr> <tr> <td>Developments</td> <td>· C SDK<br>· MaixHAL C <br>· PikaPython </td> </tr> <tr> <td>Burn Firmware</td> <td>· Burn from uart<br>· Virtual disk drag and drop burn</td> </tr> <tr> <td>AI Framework</td> <td> · Support BLAI accelerated inference engine with native SDK<br> · Suppory universal TinyMaix inference</td> </tr> <tr> <td>AI model store</td> <td>· Download from <a href \"https://maixhub.com/\">MaixHub</a>. Support Face detection and recognition, posture detection and gesture detection, etc.</td> </tr> <tr> <td>Sipeed examples</td> <td>· https://github.com/sipeed/M1s_BL808_example</td> </tr> </tbody> </table> ## Operators list <table> <thead> <tr> <th>Type</th> <th>Operators</th> <th>Applicable Subset Spec.</th> <th>Processor</th> </tr> </thead> <tbody> <tr> <td rowspan \"10\">Convolution</td> <td rowspan \"4\">Conv </td> <td>Kernel: 1x1,3x3,5x5,7x7</td> <td rowspan \"4\">:strong:<code>NPU</code></td> </tr> <tr> <td>Stride: 1x1, 2x2</td> </tr> <tr> <td>Dilation: 1x1, 2x2</td> </tr> <tr> <td>Pad: same</td> </tr> <tr> <td rowspan \"4\">Depthwise Conv</td> <td>Kernel: 1x1,3x3 (5x5, 7x7 TBD)</td> <td rowspan \"4\">:strong:<code>NPU</code></td> </tr> <tr> <td>Stride: 1x1, 2x2</td> </tr> <tr> <td>Dilation: 1x1 (2x2 TBD)</td> </tr> <tr> <td>Pad: same</td> </tr> <tr> <td rowspan \"2\">Transpose Conv</td> <td>Kernel: 3x3</td> <td rowspan \"2\">strong:<code>NPU</code></td> </tr> <tr> <td>Stride: 2x2</td> </tr> <tr> <td rowspan \"4\">Pooling</td> <td rowspan \"2\">MaxPool (NPU TBD)</td> <td>Kerenl: 2x2</td> <td rowspan \"2\">DSP</td> </tr> <tr> <td>Stride: 2x2</td> </tr> <tr> <td rowspan \"2\">MaxPool</td> <td>Kerenl: 3x3</td> <td rowspan \"2\">:strong:<code>NPU</code></td> </tr> <tr> <td>Stride: 1x1, 2x2</td> </tr> <tr> <td rowspan \"2\">Activation</td> <td>Relu</td> <td></td> <td>:strong:<code>NPU</code></td> </tr> <tr> <td>Relu 6</td> <td></td> <td>:strong:<code>NPU</code></td> </tr> <tr> <td rowspan \"5\">Other processing</td> <td>BatchNormalization</td> <td>fused with conv</td> <td>:strong:<code>NPU</code></td> </tr> <tr> <td>Add (shortcut)</td> <td></td> <td>:strong:<code>NPU</code></td> </tr> <tr> <td>Concat (route)</td> <td>Channel wise (AXIS 3 in BHWC)</td> <td>:strong:<code>NPU</code></td> </tr> <tr> <td>Fully Connected</td> <td></td> <td>:strong:<code>NPU</code></td> </tr> <tr> <td>Upsample</td> <td>Nearest</td> <td>:strong:<code>NPU</code></td> </tr> </tbody> </table> ## Links [Module Datasheet](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s/1_Specification) [Module Schematic](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s/2_Schematic) [Module Package](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s/7_Package) [Module Bit map](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s/3_Bit_number_map) [Module Dimension](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s/4_Dimensional_drawing) [3D model file](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s/5_3D_file) [Module Chip manual](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s/6_Chip_Manual) [Bouffalolab official document](https://dev.bouffalolab.com/home/) [BL808 DataSheet](https://github.com/bouffalolab/bl_docs/tree/main/BL808_DS/en) (github) [BL808 Reference Manual](https://github.com/bouffalolab/bl_docs/tree/main/BL808_RM/en) (github) [Sipeed SDK](https://github.com/sipeed/M1s_BL808_SDK) (Github) [Sipeed Examples](https://github.com/sipeed/M1s_BL808_example)（Github） [Bouffalolab SDK](https://github.com/bouffalolab/bouffalo_sdk)（Github） [Linux SDK](https://github.com/sipeed/M1s_BL808_Linux_SDK)（Github） [Telegram](https://t.me/sipeed) [Twitter](https://twitter.com/SipeedIO) [Reddit](https://www.reddit.com/r/Sipeed/) [Online model platform](https://maixhub.com/) ## Attention <table> <tr> <th>Item</th> <th>Attention</th> </tr> <tr> <td>Electrostatic protection</td> <td>Avoid static electricity hitting the PCBA. Release the static electricity of hand before touching the PCBA</td> </tr> <tr> <td>Operating voltage</td> <td>The operating voltage of each GPIO has been marked in the schematic. Please do not allow the actual operating voltage of the GPIO to exceed the rated value, otherwise the PCBA will be permanently damaged</td> </tr> <tr> <td>FPC Connector</td> <td>When connecting FPC cable，make sure that the row is completely inserted into the row without bias</td> </tr> <tr> <td>Plug and Remove</td> <td>Power off completely before plugging or removing it</td> </tr> <tr> <td>Avoid short circuit</td> <td>During the power on, avoid any liquid or metal touching PCBA components，otherwise the PCBA will be damaged even burn</td> </tr> <tr> <td>Suggestion for Design</td> <td>Before hadrware design, see this post <a href \"https://bbs.sipeed.com/thread/1721\">https://bbs.sipeed.com/thread/1721</a> (Use Web Translation)<br> The attached file can be download from <a href \"https://dl.sipeed.com/shareURL/MAIX/M1s/M1s/\">Download station</a></td> </tr> <tr> <td>BANK</td> <td> VDDIO1：GPIO 0 8，1.8V/3.3V<br> VDDIO2：GPIO 11 15，GPIO 40 41, 3.3V only<br> VDDIO3：GPIO 16 23，1.8V/3.3V<br> VDDIO4：GPIO 24 39，1.8V/3.3V<br> </td> </tr> <tr> <td>BOOT Mode</td> <td> When powered on, the chip starts depending on the voltage level of the BOOT pin: <br> · BOOT is 1 ：Start from flash<br> · BOOT is 0 ：Download from uart </td> </tr> </table> ## Contact M1s Dock meets different needs of customers in various scenarios. Please contact email [support@sipeed.com](support@sipeed.com) for technical support and business cooperation."},"/hardware/en/maix/m1s/other/others.html":{"title":"M1s DOCK Install shell","content":" title: M1s DOCK Install shell keywords: M1s DOCK ,BL808, M1s update: date: 2022 12 04 version: v0.1 author: wonder content: Create file Here are some steps on how to remove or install the camera or screen. And how to use the shell. ## Remove the screen The camera and screen are oriented in the same direction by default, we may need to remove the screen for some reason, here are the steps to do this and matters need attention. Camera and screen in the same direction Camera and screen in the opposite direction ![screen_camera_same](./../../../../zh/maix/m1s/other/assets/others/screen_camera_same.jpg) ![camera_in_back](./../../../../zh/maix/m1s/other/assets/others/camera_in_back.jpg) Screen and board are fixed together, so when removing the screen, we need to force the metal on the back of the screen, not the edge of the screen. Be careful when doing this, otherwise your screen will be damaged. <table> <tr> <td><img alt \"sponge_glue_strip\" src \"./../../../../zh/maix/m1s/other/assets/others/sponge_glue_strip.jpg\" width \"150%\"></td> <td><img alt \"sponge_glue_strip_top\" src \"./../../../../zh/maix/m1s/other/assets/others/sponge_glue_strip_top.jpg\" width \"150%\"></td> <td> Here we can see screen and board are fixed together</td> </tr> </table> <table> <tr> <td><img alt \"screen_back_plane\" src \"./../../../../zh/maix/m1s/other/assets/others/screen_back_plane.png\" width \"150%\"></td> <td> The center is the metal layer on the back of screen, where we force on when removing screen, and the black parts is the edge of the screen. </td> </tr> </table> <table> <tr> <td><img alt \"screen_connector\" src \"./../../../../zh/maix/m1s/other/assets/others/screen_connector.jpg\" ></td> <td>Note the connection between board and screen, DO NOT CONNECT THEM WRONG</td> </tr> </table> ## Change camera direction After removing the screen, we can change camera direction. Make sure your connection is not wrong. <table> <tr> <td><img alt \"camera_direction_connector\" src \"./../../../../zh/maix/m1s/other/assets/others/camera_direction_connector.jpg\" ></td> <td>Make sure the 1 on board and 1 on the camera is in the same direction</td> </tr> </table> ## Install shell We sell shell for M1s Dock, here is the assembly tutorial. You can decide the camera direction. To begin this, depart the board into following parts. ![parts](./../../../../zh/maix/m1s/other/assets/others/parts.jpg) The camera can be assembled in two directions: the camera shooting direction is the same to the screen or the camera shooting direction is opposite to the screen. ### Same to the screen <table> <tr> <td><img alt \"insert_camera_front_1\" src \"./../../../../zh/maix/m1s/other/assets/others/insert_camera_front_1.jpg\" ></td> <td><img alt \"insert_camera_front_2\" src \"./../../../../zh/maix/m1s/other/assets/others/insert_camera_front_2.jpg\" ></td> <td>First, insert the camera into the shell, and the camera will be slightly fixed in the shell, ensuring that the inserting is not offset and the camera is centered. </td> </tr> </table><br> <table> <tr> <td><img alt \"insert_screen_side_1.jpg\" src \"./../../../../zh/maix/m1s/other/assets/others/insert_screen_side_1.jpg\" ></td> <td><img alt \"insert_screen_side_2.jpg\" src \"./../../../../zh/maix/m1s/other/assets/others/insert_screen_side_2.jpg\" ></td> <td>Connect board with screen, and make the screen through shell</td> </tr> </table><br> <table> <tr> <td>Rotate the shell to make the TF card slot on the board is in the same direction as the SiPEED logo on the shell</td> <td>Align the two TypeC ports with the holes in the shell to prepare for inserting the board into the shell</td> <td>Press where the arrow points at, it's a bit difficult for first time inserting, make sure the two TypeC ports align with the holes. Inster board into the shell</td> </tr> <tr> <td><img alt \"insert_screen_direction_1\" src \"./../../../../zh/maix/m1s/other/assets/others/insert_screen_direction_1.jpg\" ></td> <td><img alt \"insert_screen_direction_2\" src \"./../../../../zh/maix/m1s/other/assets/others/insert_screen_direction_2.jpg\" ></td> <td><img alt \"insert_screen_direction_3\" src \"./../../../../zh/maix/m1s/other/assets/others/insert_screen_direction_3.jpg\" ></td> </tr> </table><br> <table> <tr> <td><img alt \"insert_camera_interface\" src \"./../../../../zh/maix/m1s/other/assets/others/insert_camera_interface.jpg\" ></td> <td><img alt \"insert_camera_interface_1\" src \"./../../../../zh/maix/m1s/other/assets/others/insert_camera_interface_1.jpg\" ></td> <td>Bend not fold the camera cable through the hole on the board to connect to the connector</td> </tr> </table><br> <table> <tr> <td>Use the reserved double sided tape on the shell to fix the screen, the back panel is also fixed on the shell by double sided tape, and note that the reserved camera hole on the back panel and the M1s module should be in the same direction. </td> <td><img alt \"fix_screen\" src \"./../../../../zh/maix/m1s/other/assets/others/fix_screen.jpg\" ></td> <td><img alt \"fix_panel\" src \"./../../../../zh/maix/m1s/other/assets/others/fix_panel.jpg\" ></td> </tr> </table><br> Up to now we have finished installing shell. ### Opposite to the screen <table> <tr> <td><img alt \"opposite_screen\" src \"./../../../../zh/maix/m1s/other/assets/others/opposite_screen.jpg\" ></td> <td><img alt \"opposite_cam\" src \"./../../../../zh/maix/m1s/other/assets/others/opposite_cam.jpg\" ></td> <td> Connect camera and screen with board first, and camera should be on the M1s module</td> </tr> </table><br> <table> <tr> <td>Make the board through shell</td> <td>Then it should be like this</td> <td>Change the board direction to make the TF card slot on the board is in the same direction as the SiPEED logo on the shell</td> </tr> <tr> <td><img alt \"opposite_insert_screen_1\" src \"./../../../../zh/maix/m1s/other/assets/others/opposite_insert_screen_1.jpg\" ></td> <td><img alt \"opposite_insert_screen_2\" src \"./../../../../zh/maix/m1s/other/assets/others/opposite_insert_screen_2.jpg\" ></td> <td><img alt \"opposite_insert_screen_3\" src \"./../../../../zh/maix/m1s/other/assets/others/opposite_insert_screen_3.jpg\" ></td> </tr> </table><br> <table> <tr> <td>Align the two TypeC ports with the holes in the shell to prepare for inserting the board into the shell</td> <td>Press where the arrow points at, it's a bit difficult for first time inserting, make sure the two TypeC ports align with the holes. Inster board into the shell</td> </tr> <tr> <td><img alt \"insert_screen_direction_2\" src \"./../../../../zh/maix/m1s/other/assets/others/insert_screen_direction_2.jpg\" ></td> <td><img alt \"insert_screen_direction_4\" src \"./../../../../zh/maix/m1s/other/assets/others/insert_screen_direction_4.jpg\" ></td> </tr> </table><br> <table> <tr> <td colspan \"3\">Make the camera through the back panel, slide the panel to change the camera into the right position</td> </tr> <tr> <td><img alt \"opposite_fix_cam_1\" src \"./../../../../zh/maix/m1s/other/assets/others/opposite_fix_cam_1.jpg\" ></td> <td><img alt \"opposite_fix_cam_2\" src \"./../../../../zh/maix/m1s/other/assets/others/opposite_fix_cam_2.jpg\" ></td> <td><img alt \"opposite_fix_cam_3\" src \"./../../../../zh/maix/m1s/other/assets/others/opposite_fix_cam_3.jpg\" ></td> </tr> </table> Up to now we have finished installing shell. ![opposite_fix_screen](./../../../../zh/maix/m1s/other/assets/others/opposite_fix_screen.jpg) ## Remove shell First, use tweezers or other tools to remove the back panel of the fixed shell. ![disassemble_shell](./../../../../zh/maix/m1s/other/assets/others/disassemble_shell.jpg) Use tweezers to push this board out through the hole which is in the same direction as Logo on the shell <img src \"./../../../../zh/maix/m1s/other/assets/others/disassemble_hole.jpg\" alt \"disassemble_hole\" width \"45%\"> <img src \"./../../../../zh/maix/m1s/other/assets/others/disassemble_hole_1.jpg\" alt \"disassemble_hole_1\" width \"45%\"> Push on the metal panel of the screen to make the screen out of the shell. ![disassemble_remove_screen](./../../../../zh/maix/m1s/other/assets/others/disassemble_remove_screen.jpg) Now we have finished removing the shell."},"/hardware/en/maix/m1s/other/start.html":{"title":"M1s DOCK guides","content":" title: M1s DOCK guides keywords: M1s DOCK ,BL808, M1s update: date: 2023 05 09 version: v0.5 author: wonder content: Change default firmware Edit start guide Latest firmware is not provided date: 2023 03 06 version: v0.4 author: wonder content: Add wifi stream demo usage date: 2022 12 20 version: v0.3 author: wonder content: Add contents about blai <! date: 2022 12 13 version: v0.1 author: wonder content: Add content date: 2022 12 03 version: v0.1 author: wonder content: Create file The M1s Dock can be used for a variety of interesting things by its delicate design. Here we tell the usages of this device. Note that the default baudrate is 2000000. There are two Converter devices in `Windows` device manager if you connect the computer with the UART port of M1s Dock. ![start_bl808_uart_converter](./../../../../zh/maix/m1s/other/assets/start/start_bl808_uart_converter.png) > ## Open the box Here we open the box which contains M1S Dock with camera and screen. Open the box, these things are shown: One USB cable One M1S Dock Two pin headers <img src \"./../../../../zh/maix/m1s/other/assets/start/unbox_m1s_dock.jpg\" alt \"unbox_m1s_dock\" width \"50%\"> ## Hardware preparation Two TypeC Cables One M1s Dock One Computer There are two TypeC Ports on M1s Dock. The UART TypeC Port is for serial communication between M1s Dock and computer. The OTG Port is designed for burning firmware of the C906 Core in BL808 chip, and you can change its function by programming it as if you want to learn USB protocol. <img alt \"m1s_doc_pin_map\" src \"./../../../../zh/maix/m1s/assets/m1s_dock/m1s_doc_pin_map.png\"> 1. We can see there are `S1_Button` and `S2_button`, and there are also `BOOT` key and `RST` key. 2. There is a `UART` on the left bottom, it's used for communication with two cores of BL808. 3. A `OTG` port is on the tighe bottom, we use burn the C906 Core firmware of BL808 bia this port. ## Power guide ![m1s_dock_power_supply](./start/m1s_dock_power_supply.png) ## First time boot ### Board state Power the M1s Dock，Click the RST (reset) key。 ![m1s_dock_rst_key_position](./../../../../zh/maix/m1s/other/assets/start/m1s_dock_rst_key_position.png) And it will be as follows： ![default_firmware](./../../../../zh/maix/m1s/other/assets/start/default_firmware_20230509.png) Click the ① key, the btn marked ④ turns green, and the number marked ⑥ increases, maximum number is 100. ② is the camera, and screen shows what the camera captures Click the ③ key, another btn on the screen turns green, and the number marked ⑥ decreases, minimum number is 100. ⑤ is the wifi test and its intensity.The user will not see this result as there is no this corresponding wifi test. ⑦ is the test of the onboard microphone, which is in the symmetrical position with the led on the back The LED on the back blinks. ![led_brghtness](./../../../../zh/maix/m1s/other/assets/start/led_brghtness.jpg) ### OTG PORT > A virtual removable disk with 3MB storage capacity is on your computer if you connect this board with your computer via TypeC OTG port on this board. Because the driver is not compatible well with some computers, we can flash the firmware via [UART](https://wiki.sipeed.com/hardware/en/maix/m1s/other/start.html#Burn with UART) to solve this problem. ![default_udisk](./../../../../zh/maix/m1s/other/assets/start/default_udisk.jpg) And there is USB Mass Storge Device in `Windows` device manager, in `Linux` there is also a removable device. ![udisk_device_manager](./../../../../zh/maix/m1s/other/assets/start/udisk_device_manager.jpg) If there is no USB Mass Storge Device in Windows device manager, try to use other USB TypeC cable or connect with other USB port of computer, if this problem remains, read [Burn with UART](https://wiki.sipeed.com/hardware/en/maix/m1s/other/start.html#Burn with UART) to flash M1s Dock to solve this problem. Make sure you have choose `partition table`, `boot2`, `firmware` these three files, after finishing burning, reconnect the board with computer. ### UART PORT Two serial devices will be shown in your computer if you connect this board with your computer by TypeC UART port on this board. ![dual_uart](./../../../../zh/maix/m1s/other/assets/start/dual_uart.jpg) There are two Converter devices in Windows device manager. ![start_bl808_uart_converter](./../../../../zh/maix/m1s/other/assets/start/start_bl808_uart_converter.png) If there is no serial device，try to use other USB TypeC cable or use other USB port of computer. If this problem remains, visit [Burn onboard bl702](https://wiki.sipeed.com/hardware/en/maix/m1s/other/start.html#Burn onboard bl702) to reburn the download debugger firmware. we set a BL702 on M1s Dock, and use it as USB to two uart convertor. If there is only one serial device, visit [Burn onboard bl702](https://wiki.sipeed.com/hardware/en/maix/m1s/other/start.html#Burn onboard bl702) to reflash the download debugger firmware Set baudrate to 2000000，open the two serial ports, you will see different information. Open the small serial port and you can see that the messages are being printed: ![start_smaller_uart](./../../../../zh/maix/m1s/other/assets/start/start_smaller_uart.jpg) Open the big serial port for command line interaction: ![start_bigger_uart](./../../../../zh/maix/m1s/other/assets/start/start_bigger_uart.jpg) ## Burn firmware To run our program on M1s Dock, we should know how to burn the firmware into M1s Dock first. ### Burn via u disk To make it easier to burn firmware, we design u disk burning method to burn the program for C906 core of BL808 in the chip. Connect this board by its TypeC OTG port with computer, hold the 2 sides keys (which have been marked on the following figure) of M1s Dock, then press RST button to make this board into u disk burn mode. <table> <tr> <td><img src \"./../../../../zh/maix/m1s/other/assets/start/udisk_burn.png\" alt \"udisk_burn\" style \"transform:rotate(0deg);\"></td> <td>Hold 2 side keys and press RST，make M1s Dock into u disk burn mode</td> </tr> </table> Besides, when 2 side keys are being pressed, power on this board can make this board into u disk burn mode too. <img src \"./../../../../zh/maix/m1s/other/assets/start/udisk_in_computer.png\" alt \"udisk_in_computer\" style \"transform:rotate(0deg);\"> A removable disk with tiny storage capacity will be shown on your computer if this board is in u disk burn mode. Just drag the firmware <a href \"https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/7_Firmware/demo_bin\"> Here are some demo bins </a> into the removable disk to burn the firmware. <img src \"./../../../../zh/maix/m1s/other/assets/start/udisk_burn.gif\" alt \"udisk_burn\" style \"transform:rotate(0deg);\"> After succeed dragging the firmware bin into removable disk, the board will reboot and the u disk is removed. Because of the different bl702 firmwares, clicking the RST key to boot M1S Dock maybe necessary. [Click me](https://wiki.sipeed.com/hardware/en/maix/m1s/other/start.html#bl702 firmware difference) to see the differences between BL702 firmwares. ### Burn via UART The u disk burning method above is used to burn firmware for C906 core of BL808. If we want to burn other firmware for other cores or when we need to upgrade the whole firmware of BL808, we need to burn M1s Dock via UART. Connect this board by its TypeC UART port with computer, 2 serial ports will be shown on your computer (If your mouse doesn't work after connecting board with computer, please disconnect board with computer and visit [Burn onboard bl702](https://wiki.sipeed.com/hardware/en/maix/m1s/other/start.html#Burn onboard bl702) to solve this problem). #### Get the burn software To burn for M1s, we need bouffalolab official burning application, visit https://dev.bouffalolab.com/download and download the file named `Bouffalo Lab Dev Cube`. Decompress the downloaded file then we get the application to burn the board. ![bouffalo_cube](./../../../../zh/maix/m1s/other/assets/start/bouffalo_cube.png) Backup download: [Sipeed Download Station](https://dl.sipeed.com/shareURL/others/BouffaloLabDevCube) We mainly use `BLDevCube`, `BLDevCube macos` and `BLDevCube ubuntu` these three files, by which to burn our board with graphical interface on different OS. ![application](./../../../../zh/maix/m1s/other/assets/start/application.png) And there are `bflb_iot_tool`、`bflb_iot_tool macos`、`bflb_iot_tool ubuntu` three applications, with which we can burn this board via commad line. #### Burn via graphical interface Run the software based on your operating system, choose bl808, then we put this [partition file](https://dl.sipeed.com/fileList/MAIX/M1s/M1s_Dock/7_Firmware/partition/partition_cfg_16M_m1sdock.toml) in partition table (marked with ②) in IOT page. <table> <tr> <td><img src \"./../../../../zh/maix/m1s/other/assets/start/chip_selection.png\" alt \"chip_selection\" style \"transform:rotate(0deg);\"></td> <td><img src \"./../../../../zh/maix/m1s/other/assets/start/choose_partition.png\" alt \"choose_partition\" style \"transform:rotate(0deg);\" width \"70%\"></td> </tr> </table> After selecting the partition file, we have more choice in this page. We just need `boot2`, `firmware` and `d0fw` these options. <img src \"./../../../../zh/maix/m1s/other/assets/start/firmware_choose.png\" alt \"firmware_choose\" style \"transform:rotate(0deg);\"> In the picture above, `boot2` stays the same, and it's in this directory: `BLDevCube\\chips\\bl808\\builtin_imgs\\boot2_isp_bl808_xxxx_xxx`, under where the path if this burning application is, and make sure your choosing file named with `debug`. `firmware` is the firmware file for E907 core, and `d0fw` is C906 core file, the previous [Burn via u disk](https://wiki.sipeed.com/hardware/en/maix/m1s/other/start.html#Burn via u disk) operation can also burn firmware for this core. The firmware file for E907 or C906 can be gotten by compiling [M1s_dock example](https://gitee.com/sipeed/M1s_BL808_example). First time burning, both `firmware` and `boot2` are needed, after this you just need tick what you want to burn not all. The default old firmware can be downloaded [here](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/7_Firmware/factory), and the newest firmware is not frovided any more. [Click me](https://wiki.sipeed.com/hardware/en/maix/m1s/other/start.html#Old firmware test) to see the old factory firmware details. After choose the firmware, click the `Refresh` in the righr to refresh the serial port, then we can see 2 serial ports. If there are not 2 serial ports, visit [Burn onboard bl702](https://wiki.sipeed.com/hardware/en/maix/m1s/other/start.html#Burn onboard bl702) to solve this. We choose the bigger number serial port, and set uartrate 2000000 . ![burn_steps](./../../../../zh/maix/m1s/other/assets/start/burn_steps.png) Press BOOT key and RST key on the board, then release RST key first, then release BOOT key in order to make M1s Dock into UART burning mode. <img src \"./../../../../zh/maix/m1s/other/assets/start/boot_rst.jpg\" alt \"boot_rst\" style \"transform:rotate(0deg);\" width \"40%\"> Click `Create & Download`, then we can see the following message where the arrow points at, before this we should make M1s Dock into UART burning mode. ![burn_press_boot](./../../../../zh/maix/m1s/other/assets/start/burn_press_boot.jpg) It will burn M1s Dock if it shows `shake hand success` <img src \"./../../../../zh/maix/m1s/other/assets/start/burn_press_boot_success.jpg\" alt \"burn_press_boot_success\" style \"transform:rotate(0deg);\" width \"70%\"> <img src \"./../../../../zh/maix/m1s/other/assets/start/finish_burning.png\" alt \"finish_burning\" style \"transform:rotate(0deg);\" width \"70%\"> Reburn this if it `SHAKEHAND FAIL`. Try to release the keys in order (Release RST key first then release BOOT key, I mean when release RST key, the BOOT key is being pressed) to make the board into UART burning mode, otherwise the burning software will show error because of timeout burning. <img src \"./../../../../zh/maix/m1s/other/assets/start/burn_press_boot_failed.jpg\" alt \"burn_press_boot_failed\" style \"transform:rotate(0deg);\" width \"70%\"> #### Burn via command line We can burn M1s Dock by command line through serial port on this board. In `BLDevCube` folder, there is `bflb_iot_tool` application, `bflb_iot_tool`、 `bflb_iot_tool macos` and `bflb_iot_tool ubuntu` are used for different OS to burn the bouffalolab chip. Here I take Windows command line as example to burn M1s Dock, and for other OS you need to change the commands by yourself. ```bash .\\bflb_iot_tool.exe chipname bl808 port COM38 baudrate 2000000 firmware \"firmware_20221212.bin\" pt \"M1s_BL808_example\\partition\\partition_cfg_16M_m1sdock.toml\" boot2 \"BLDevCube\\chips\\bl808\\builtin_imgs\\boot2_isp_bl808\\boot2_isp_debug.bin\" ``` In this command, `firmware` is the bin file for E907 Core, the default old bin file can be downloaded from [here](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/7_Firmware/factory). `pt` is the partition file, it's in the `M1s_BL808_example\\partition` folder, you can also [Click me](https://dl.sipeed.com/fileList/MAIX/M1s/M1s_Dock/7_Firmware/partition/partition_cfg_16M_m1sdock.toml) to get it.`boot2` is in `BLDevCube\\chips\\bl808\\builtin_imgs\\boot2_isp_bl808` folder, and is named with `debug`. Set baudrate 2000000 to burn this board fast. `port` is the bigger port number. Of course, make sure you have made this board into UART burning mode: Press BOOT key and RST key, then release RST key first then release BOOT key. ![command_burn_flash](./../../../../zh/maix/m1s/other/assets/start/command_burn_flash.jpg) After burning these, you can burn the bin file for C906 core according to [Burn via u disk](https://wiki.sipeed.com/hardware/en/maix/m1s/other/start.html#Burn via u disk). You can also burn this board based on the adderss, from `partition_cfg_16M_m1sdock.toml` file you can know the burn address and modify it. ### Troubles when burning #### BFLB IMG LOAD SHAKEHAND FAIL This means M1s Dock is not at the burning state. Make sure you have held the RST key and BOOT key together when M1s Dock is powered on, then release RST key first, and then release BOOT key. When release RST key, the BOOT key is being pressed to make the board into UART burning mode. ![uart_burn_bl808_shakehand_fail](./../../../../zh/maix/m1s/other/assets/start/uart_burn_bl808_shakehand_fail.jpg) Make sure you choose the bigger COM port to burn M1s Dock, not the smaller COM port. ![uart_burn_bl808_shakehand_fail_com_port](./../../../../zh/maix/m1s/other/assets/start/uart_burn_bl808_shakehand_fail_com_port.jpg) #### Only one COM port This means you are in the bl702 burning mode. Make sure power on this board before pressing BOOT key. ![uart_burn_bl808_only_one_port](./../../../../zh/maix/m1s/other/assets/start/uart_burn_bl808_only_one_port.jpg) #### No COM port Make sure you connected the computer and M1s Dock UART port, not that OTG port. #### Burn single firmware In the burning software, we need to tick and choose `partition table`, `boot2`, `firmware`, `d0fw` for the first time burning. If we want to burn only one firmware not all firmware, tick your target firmware and burn it. `firmware` can be compiled out via e907_demo. `d0fw` can be compiled out via c906_demo. `partition table` and `boot2` are needed to burn every time. <table> <tr> <td>Burn c906_demo firmware</td> <td>Burn e907_demo firmware</td> </tr> <tr> <td><img src \"./../../../../zh/maix/m1s/other/assets/start/uart_burn_c906.jpg\" alt \"uart_burn_c906\"></td> <td><img src \"./../../../../zh/maix/m1s/other/assets/start/uart_burn_e907.jpg\" alt \"uart_burn_e907\"></td> </tr> </table> ## Burn examples There are some demos compiled from M1s_BL808_example, with which you can have a test on M1s Dock. ### lvgl_demo [LVGL](https://lvgl.io/) (Light and Versatile Graphics Library) is a free open source graphics library suitable for mcu graphical interfaces. Demo File: [Click me](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/7_Firmware/demo_bin/lvgl_demo) After burning into M1s Dock, the screen displays the lvgl test. And then sets the baudrate to 2000000, the serial port with the smaller serial port number prints the last touch screen position. <img src \"./../../../../zh/maix/m1s/other/assets/start/example_lvgl.gif\" alt \"example_lvgl\" width \"45%\"> <img src \"./../../../../zh/maix/m1s/other/assets/start/example_lvgl.jpg\" alt \"example_lvgl\" width \"45%\"> ### image_processing_demo A simple image processing example. Demo File: [Click me](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/7_Firmware/demo_bin/image_processing_demo) Burning into M1s Dock, screen displays what the camera captured, press the side key to change image operator. Set the baudrate to 2000000, to see the image operator state by the small serial port. Click the RST key to reset the bl808, and we can see the information about the camera from the small serial port when the board boots, to know if there is some error with the camera. <img src \"./../../../../zh/maix/m1s/other/assets/start/example_image_processing_demo.jpg\" alt \"example_image_processing_demo\" width \"45%\"> <img src \"./../../../../zh/maix/m1s/other/assets/start/example_image_processing_demo_uart.jpg\" alt \"example_image_processing_demo_uart\" width \"45%\"> ### tinymaix_mnist_demo [TinyMaix](https://github.com/sipeed/TinyMaix) is a tiny inference Neural Network library specifically for microcontrollers (TinyML), can run lightweight deep learning model on any Single Chip Microcomputer. Demo File: [Click me](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/7_Firmware/demo_bin/tinymaix_mnist_demo) Burning into M1s Dock, recognizing number through the red box in the center of screen. Set the baudrate to 2000000, to see the process and result by the small serial port. <img src \"./../../../../zh/maix/m1s/other/assets/start/example_tinymaix_mnist_demo.jpg\" alt \"example_tinymaix_mnist_demo\" width \"45%\"> <img src \"./../../../../zh/maix/m1s/other/assets/start/example_tinymaix_mnist_demo_uart.jpg\" alt \"example_tinymaix_mnist_demo_uart\" width \"45%\"> ### pikascript_demo [PikaScript](http://pikascript.com/) is a cross platform, ultra lightweight embedded Python engine. Demo File: [Click me](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/7_Firmware/demo_bin/pikascript_demo) Burning into M1s Dock, the screen is white. Set the baudrate to 2000000, open the small serial port for command line interaction: Use these commands: ```bash arc lv.arc(lv.scr_act()) arc.set_end_angle(200) arc.set_size(150, 150) arc.center() ``` ![example_pikascript_demo_uart](./../../../../zh/maix/m1s/other/assets/start/example_pikascript_demo_uart.jpg) Then the screen displays as shown(Ignore the bad shoot): ![example_pikascript_demo_screen](./../../../../zh/maix/m1s/other/assets/start/example_pikascript_demo_screen.jpg) ## SDK Compile M1s can be compiled in Linux. ### Preparation We need `git` to get the SDK complie envorioument, and use `make` to compile SDK, `tree` is also need to be installed to check the directory structure. The following command can be used in debian Linux distribution like Ubuntu to install the three softwares mentioned above. ```bash sudo apt get install git make tree ``` For the command of other Linux distribution to install the three softwares mentioned above can be searched on the Internet by yourself. ### Get example ```bash git clone https://github.com/Sipeed/M1s_BL808_example.git ``` Then the file tree should be like this: ```bash sipeed@DESKTOP:~$ tree L 1 M1s_BL808_example/ M1s_BL808_example/ ├── LICENSE # License file ├── assets # folder for assets for readme.md ├── c906_app # folder for C906 core example ├── e907_app # folder for E907 core example ├── partition # folder for partition file └── readme.md # guide ``` ### Get SDK It's about 120MB memory storage. ```bash git clone https://github.com/sipeed/M1s_BL808_SDK.git ``` Then the file tree should be like this: ```bash sipeed@DESKTOP:~$ tree L 1 . ├── M1s_BL808_example # Folder of example └── M1s_BL808_SDK # Folder of SDK ``` ### Get toolchain According to the `readme.md` in example folder, we need to put the toolchain in M1s_BL808_SDK/toolchain ```bash mkdir p M1s_BL808_SDK/toolchain cd M1s_BL808_SDK/toolchain git clone https://github.com/wonderfullook/m1s_toolchain.git ``` Rename the toolchain folder name to `Linux_x86_64`, and return to the previous two levels of directories. ```bash mv m1s_toolchain Linux_x86_64 cd ../../ ``` Then the file tree should be like this(The main folder and files): ```bash sipeed@DESKTOP:~$ tree L 2 . ├── M1s_BL808_example # Folder of example │ ├── LICENSE # License file │ ├── assets # folder for assets for readme.md │ ├── c906_app # folder for C906 core example │ ├── e907_app # folder for E907 core example │ ├── partition # folder for partition file │ └── readme.md # guide └── M1s_BL808_SDK # Folder of SDK ├── toolchain # Folder of toolchain ... ``` ### Set toolchain path Everytime compling for M1s, we need to set toolchain path once. First we need to know the path of `M1s_BL808_SDK`: ```bash sipeed@DESKTOP:~$ cd M1s_BL808_SDK sipeed@DESKTOP:~/M1s_BL808_SDK$ pwd /home/lee/bl808/M1s_BL808_SDK ``` We copy the result (the result of everyone is different) of `pwd` command, then run following commamd to set toolchain path. ```bash export BL_SDK_PATH /home/lee/bl808/M1s_BL808_SDK ``` Note that this is `M1s_BL808_SDK` ，not `M1s_BL808_SDK/`，normally this error is made by automatic string completion. ### Compile demo Run `build.sh` which is in the folder of M1s_BL808_example/c906_app, add the `demo` in the end you want to try to compile. Demos（Edited in 2022 12 13）： ```bash c906_app ├── audio_recording ├── blai_mnist_demo ├── camera_bypass_lcd ├── camera_dump ├── camera_streaming_through_wifi ├── cli_demo ├── flash_demo ├── gpio_demo ├── hello_world ├── i2c_touch ├── image_processing_demo ├── lfs_demo ├── lvgl_demo ├── pikascript_demo ├── proj_config.mk ├── pwm_demo ├── spi_lcd ├── tinymaix_mnist_demo └── uvc_demo ``` ```bash cd M1s_BL808_example/c906_app ./build.sh lvgl_demo ``` Then the compiled bin file is in M1s_BL808_example/c906_app/build_out folder, and its name is `d0fw.bin`, we can burn it by [u disk](https://wiki.sipeed.com/hardware/en/maix/m1s/other/start.html#Burn via u disk). ### Compile firmware Run `build.sh` which is in the folder of M1s_BL808_example/e907_app, add `firmware` in the end to compile. ```bash cd M1s_BL808_example/e907_app ./build.sh firmware ``` Then the compiled bin file is in M1s_BL808_example/e907_app/build_out folder, and its name is `firmware.bin`, we can burn it with the burning application provided by Bouffalo. ### Compile Questions 1. Run command `build.sh` and get error `Makefile:14: *** BL_SDK_PATH not found, please enter: export BL_SDK_PATH {sdk_path}. Stop.`, Visit [Set toolchain path](https://wiki.sipeed.com/hardware/en/maix/m1s/other/start.html#Set toolchain path) to set `BL_SDK_PATH` correctly. 2. Failed compiling When compiling your firmware, make sure your command is `./build.sh demo_name`, like `./build.sh hello_world`, not `./build.sh hello_world/` (pay atention to the end symbol `/`) ## WIFI stream DEMO An easy camera streaming demo. ### Preparation Network: PC and M1s Dock are in a same network, M1s Dock supports 2.4G wireless network. PC Software：`python3`， `OpenCV` M1s Dock firmware: Use this [Firmware](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/7_Firmware/factory) named with `firmware_20230227.bin`, burn it via [UART](https://wiki.sipeed.com/hardware/en/maix/m1s/other/start.html#Burn via UART). ![camera_stream_e907](./../../../../zh/maix/m1s/other/assets/start/camera_stream_e907.png) ### Edit Code Open the `main.c` which is in the `M1s_BL808_example/c906_app/camera_streaming_through_wifi` directory. ![camera_stream_original_source_code](./../../../../zh/maix/m1s/other/assets/start/camera_stream_original_source_code.png) Pay attention to `m1s_xram_wifi_connect()` 和 `m1s_xram_wifi_upload_stream()`. Edit `liuxo_desktop` into your wireless network, and change `12345678` into the wireless network password. Change `10.42.0.1` to your PC ip address. Here is an example, this computer connects to the network named `Test` and its ip address in this network is `192.168.43.183`, the password of the `Test` wireless work is `testtest`. ![camera_stream_source_code](./../../../../zh/maix/m1s/other/assets/start/camera_stream_source_code.png) Save `main.c` after editing it. ### Compile and burn Finishing editing the code, follow the [sdk compile](http://wiki.sipeed.com/hardware/en/maix/m1s/other/start.html#SDK Compile) steps to compile this `camera_streaming_through_wifi` demo. Burn the compiled out `d0fw.bin` firmware via u disk burn into M1s Dock, open the bigger COM port on your computer, press the RST ket on the M1s Dock. If M1s Dock succeeds in connecting the wireless work, its IP address is printed out via UART, and message `Socket connect` means it's waiting the computer to receive the data. ![camera_stream_socket_wait](./../../../../zh/maix/m1s/other/assets/start/camera_stream_socket_wait.png) ### PC show screen Run `python3 main.py` in the `M1s_BL808_example/c906_app/camera_streaming_through_wifi` directory to receive the data with opencv from M1s dock. ![camera_stream_success](./../../../../zh/maix/m1s/other/assets/start/camera_stream_success.png) ### Note 1. Make sure you use M1s Dock firmware named with [firmware_20230227.bin](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/7_Firmware/factory) 2. The IP address of M1s Dock is printed via bigger COM port if it succeeds in connecting the wireless work 3. Make sure computer and M1s Dock are in a same network, and the PC IP address has been edited in `main.c`. ## Linux Demo This is a basic Linux Demo to run on M1s Dock. [Click me](https://dl.sipeed.com/fileList/MAIX/M1s/M1s_Dock/7_Firmware/m1sdock_linux_20221116.zip) to download Linux demo, and following the `steps.md` in the compressed file to finish burning Linux image. ![linux_opensbi](./../../../../zh/maix/m1s/other/assets/start/linux_opensbi.jpg) Login in with `root` ![linux_login](./../../../../zh/maix/m1s/other/assets/start/linux_login.jpg) Visit CPU information ![linux_cpuinfo](./../../../../zh/maix/m1s/other/assets/start/linux_cpuinfo.jpg) ## Use Jtag The jtag debugger is sold in [Sipeed aliexpress store](https://sipeed.aliexpress.com/store/1101739727), you can buy one if you need. ![cklink_appearence](./../../../../zh/maix/m1s/other/assets/start/cklink_appearence.jpg) ### Connect to device Insert the jtag convertor board into the TF card slot on M1s Dock, then the convertor board is connected and fixed on the board. And it's look like as follows: ![cklink_connect_side](./../../../../zh/maix/m1s/other/assets/start/cklink_connect_side.jpg) ![cklink_connect_top](./../../../../zh/maix/m1s/other/assets/start/cklink_connect_top.jpg) Both jtag and M1s Dock are need to be connected with computer, and we need to make sure the UART port on M1s Dock is connected with computer, by which we can enable the core jtag and ensure that the jtag will not be very hot because of heavy power supply to M1s Dock. ### Install driver Visit [Download station](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/9_Driver/cklink) to download the driver for your OS. #### Windows Unzip `T Head DebugServer windows`, run `Setup` to install driver. ![cklink_windows_install_driver](./../../../../zh/maix/m1s/other/assets/start/cklink_windows_install_driver.jpg) It's suggested not to change the default installation path, to avoid it remove all child directory when uninstalling it. ![cklink_windows_driver_path](./../../../../zh/maix/m1s/other/assets/start/cklink_windows_driver_path.jpg) Install all compoents, which we may need in the future. ![cklink_windows_driver_components](./../../../../zh/maix/m1s/other/assets/start/cklink_windows_driver_components.jpg) Finish installing this, and we can see there is `CKlink Lite` in Windows device manager if we have connected the debugger. ![cklink_windows_driver_device_manager](./../../../../zh/maix/m1s/other/assets/start/cklink_windows_driver_device_manager.jpg) There is an icon of the debug software. ![cklink_windows_driver_desktop_icon](./../../../../zh/maix/m1s/other/assets/start/cklink_windows_driver_desktop_icon.jpg) #### Linux Download driver：[Click me](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/9_Driver/cklink) ![cklink_linux_list_file](./../../../../zh/maix/m1s/other/assets/start/cklink_linux_list_file.jpg) Unzip the downloaded file. ```bash tar xvf T Head DebugServer* ``` Then there is a new script file. ![cklink_linux_list_shell_file](./../../../../zh/maix/m1s/other/assets/start/cklink_linux_list_shell_file.jpg) Run this script, then its usages are shown, by which we can know that add with command ` i` to install driver or with ` u` to remove it in the end of command. ``` ./T Head DebugServer linux x86_64 V5.16.5 20221021.sh ``` ![cklink_linux_script_help](./../../../../zh/maix/m1s/other/assets/start/cklink_linux_script_help.jpg) Install driver： ``` sudo ./T Head DebugServer linux x86_64 V5.16.5 20221021.sh i ``` ![cklink_linux_installation](./../../../../zh/maix/m1s/other/assets/start/cklink_linux_installation.jpg) We need enter `yes` two times when installing it, and for as for `Set full installing path` we can just press Enter on the keyboard to use the default installation path or set your own installation path by yourself. Finishing installing the driver, use command `lsusb` to see there is `CKlink Lite` if we have connected the debugger. ![cklink_linux_lsusb](./../../../../zh/maix/m1s/other/assets/start/cklink_linux_lsusb.jpg) ### Debug device Before debugging, we need to enable core debug. Connect computer with UART port on M1s Dock, and open the bigger serial port. ![cklink_jtag_serial_choice](./../../../../zh/maix/m1s/other/assets/start/cklink_jtag_serial_choice.jpg) ![cklink_jtag_choice](./../../../../zh/maix/m1s/other/assets/start/cklink_jtag_choice.jpg) We can know there are two jtag choices, run command `jtag_cpu0` to debug C906 Core or run command `jtag_m0` to debug E907 Core. ![cklink_jtag_c906](./../../../../zh/maix/m1s/other/assets/start/cklink_jtag_c906.jpg) ![cklink_jtag_e907](./../../../../zh/maix/m1s/other/assets/start/cklink_jtag_e907.jpg) #### Windows Run T HeadDebugServer software on the desktop, if it shows following message, try following steps: Make sure you have enabled core debug in serial connection There is `CKlink Lite` in Windows device manager, if there is no `CKlink Lite`, check the connection of debugger or reinstall the driver Debugger is occupied by other T HeadDebugServer application ![cklink_jtag_windows_no_target](./../../../../zh/maix/m1s/other/assets/start/cklink_jtag_windows_no_target.jpg) Click the triangle icon to connect device. ![cklink_jtag_windows_run_debugger](./../../../../zh/maix/m1s/other/assets/start/cklink_jtag_windows_run_debugger.jpg) If there shows Failed about port, set another port and then rerun connecting device. ![cklink_jtag_windows_no_port](./../../../../zh/maix/m1s/other/assets/start/cklink_jtag_windows_no_port.jpg) Click Socket Setting, set a port. ![cklink_jtag_windows_set_socket](./../../../../zh/maix/m1s/other/assets/start/cklink_jtag_windows_set_socket.jpg) ![cklink_jtag_windows_set_socket_1](./../../../../zh/maix/m1s/other/assets/start/cklink_jtag_windows_set_socket_1.jpg) If succeed connecting, the triangle icon will change into circle icon. ![cklink_jtag_windows_success_connection](./../../../../zh/maix/m1s/other/assets/start/cklink_jtag_windows_success_connection.jpg) Up to now we have connected device, and the picture above is we usr command `jtag_m0` to debug E907 Core, you can also run `jtag_cpu0` to debug C906 Core. And we can use software like gdb to debug the chip. ![cklink_jtag_windows_gdb_debug](./../../../../zh/maix/m1s/other/assets/start/cklink_jtag_windows_gdb_debug.jpg) Besides, in the directory where we install this software, we can run `DebugServerConsole` to connect debugger by command line. ![cklink_jtag_windows_debugserverconsole](./../../../../zh/maix/m1s/other/assets/start/cklink_jtag_windows_debugserverconsole.jpg) Run it by command line to see its usages. ```bash .\\DebugServerConsole.exe h ``` ![cklink_jtag_windows_debugserverconsole_help](./../../../../zh/maix/m1s/other/assets/start/cklink_jtag_windows_debugserverconsole_help.jpg) ```bash .\\DebugServerConsole.exe port 65535 ``` ![cklink_jtag_windows_debugserverconsole_port](./../../../../zh/maix/m1s/other/assets/start/cklink_jtag_windows_debugserverconsole_port.jpg) Then we can debug it with port number 65535. #### Linux Run command`DebugServerConsole h` to see help. ![cklink_jtag_linux_debugserverconsole_help](./../../../../zh/maix/m1s/other/assets/start/cklink_jtag_linux_debugserverconsole_help.jpg) Run following command to debug M1s Dock with port number 12345. ```bash DebugServerConsole port 12345 ``` ![cklink_jtag_linux_debugserverconsole](./../../../../zh/maix/m1s/other/assets/start/cklink_jtag_linux_debugserverconsole.jpg) ## blai npu ### Supported operators <table> <thead> <tr> <th>Type</th> <th>Operators</th> <th>Applicable Subset Spec.</th> <th>Processor</th> </tr> </thead> <tbody> <tr> <td rowspan \"10\">Convolution</td> <td rowspan \"4\">Conv </td> <td>Kernel: 1x1,3x3,5x5,7x7</td> <td rowspan \"4\">:strong:<code>NPU</code></td> </tr> <tr> <td>Stride: 1x1, 2x2</td> </tr> <tr> <td>Dilation: 1x1, 2x2</td> </tr> <tr> <td>Pad: same</td> </tr> <tr> <td rowspan \"4\">Depthwise Conv</td> <td>Kernel: 1x1,3x3 (5x5, 7x7 TBD)</td> <td rowspan \"4\">:strong:<code>NPU</code></td> </tr> <tr> <td>Stride: 1x1, 2x2</td> </tr> <tr> <td>Dilation: 1x1 (2x2 TBD)</td> </tr> <tr> <td>Pad: same</td> </tr> <tr> <td rowspan \"2\">Transpose Conv</td> <td>Kernel: 3x3</td> <td rowspan \"2\">strong:<code>NPU</code></td> </tr> <tr> <td>Stride: 2x2</td> </tr> <tr> <td rowspan \"4\">Pooling</td> <td rowspan \"2\">MaxPool (NPU TBD)</td> <td>Kerenl: 2x2</td> <td rowspan \"2\">DSP</td> </tr> <tr> <td>Stride: 2x2</td> </tr> <tr> <td rowspan \"2\">MaxPool</td> <td>Kerenl: 3x3</td> <td rowspan \"2\">:strong:<code>NPU</code></td> </tr> <tr> <td>Stride: 1x1, 2x2</td> </tr> <tr> <td rowspan \"2\">Activation</td> <td>Relu</td> <td></td> <td>:strong:<code>NPU</code></td> </tr> <tr> <td>Relu 6</td> <td></td> <td>:strong:<code>NPU</code></td> </tr> <tr> <td rowspan \"5\">Other processing</td> <td>BatchNormalization</td> <td>fused with conv</td> <td>:strong:<code>NPU</code></td> </tr> <tr> <td>Add (shortcut)</td> <td></td> <td>:strong:<code>NPU</code></td> </tr> <tr> <td>Concat (route)</td> <td>Channel wise (AXIS 3 in BHWC)</td> <td>:strong:<code>NPU</code></td> </tr> <tr> <td>Fully Connected</td> <td></td> <td>:strong:<code>NPU</code></td> </tr> <tr> <td>Upsample</td> <td>Nearest</td> <td>:strong:<code>NPU</code></td> </tr> </tbody> </table> ### blai_mnist_demo Burning the compiled [blai_mnist_demo](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/7_Firmware/demo_bin/blai_mnist_demo) firmware into M1s Dock, we have told that the each compiled demo bin is named `d0fw.bin`, and it's in `M1s_BL808_example/c906_app/built_out` folder. ``` #c906_app ./build.sh blai_mnist_demo ``` ![udisk_burn](./../../../../zh/maix/m1s/other/assets/start/udisk_burn.gif) After burning this firmware (when the u disk is automatically removed it means we have finished burning this firmware), press RST key to reset M1s Dock and reload firmware, then open the smaller serial port (with baudrate 2000000) we can see it shows failed loading model. ![blai_mnist_demo_no_model](./../../../../zh/maix/m1s/other/assets/start/blai_mnist_demo_no_model.jpg) So we need upload model into M1s Dock, from source code we can know we need to save model in flash. ![blai_mnist_demo_fopen](./../../../../zh/maix/m1s/other/assets/start/blai_mnist_demo_fopen.jpg) Connect computer with OTG port of M1s Dock we can see there is a u disk with nearly 7M storage memory. ![blai_mnist_demo_flash_disk](./../../../../zh/maix/m1s/other/assets/start/blai_mnist_demo_flash_disk.jpg) Follow the source code, in the u disk (which is the flash of M1s Dock indeed), we create a folder named `models`, and save [mnist.blai](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/7_Firmware/demo_bin/blai_mnist_demo) into the newly created folder. ```bash models └── mnist.blai ``` ![blai_mnist_demo_model_path](./../../../../zh/maix/m1s/other/assets/start/blai_mnist_demo_model_path.jpg) Press onboard RST key to restart the M1s Dock to load the model Open the smaller serial port we can see we succeed loading model, and the recognition results are printed. Screen displays camera contents, and show recognition result. ![blai_mnist_demo_uart](./../../../../zh/maix/m1s/other/assets/start/blai_mnist_demo_uart.jpg) ![blai_mnist_demo_recognition](./../../../../zh/maix/m1s/other/assets/start/blai_mnist_demo_recognition.jpg) ### tom_and_jerry_classification_demo This ai model file can be downloaded from [MaixHub](https://maixhub.com/model/zoo/127). We can upload dataset, label and train out model file in this website. Here we tell how to deploy the detection model downloaded from [Maixhub](https://maixhub.com/) on M1s Dock. To start this, refer to the [SDK compile](https://wiki.sipeed.com/hardware/en/maix/m1s/other/start.html#SDK Compile) chapter and compile out the [tom_and_jerry_classification_demo](https://dl.sipeed.com/fileList/MAIX/M1s/M1s_Dock/7_Firmware/demo_bin/tom_and_jerry_classification_demo.bin) firmware first. ```bash #c906_app ./build.sh tom_and_jerry_classification_demo ``` Burn the compiled firmware into M1s Dock. ![udisk_burn](./../../../../zh/maix/m1s/other/assets/start/udisk_burn.gif) Form the source code of `main.c` in tom_and_jerry_classification_demo we can see that the ai model file is the the models folder in the Flash, and the ai model file name is `tj.blai`. ![tom_jerry_source_code](./../../../../zh/maix/m1s/other/assets/start/tom_jerry_source_code.jpg) We download the example ai model from [MaixHub](https://maixhub.com/model/zoo/127), and rename the file whose extended name is `.blai` into `tj.blai`. ![tom_jerry_model_rename](./../../../../zh/maix/m1s/other/assets/start/tom_jerry_model_rename.gif) Connect computer with OTG port of M1s Dock we can see there is a u disk with nearly 7M storage memory. ![blai_mnist_demo_flash_disk](./../../../../zh/maix/m1s/other/assets/start/blai_mnist_demo_flash_disk.jpg) According to the source code, we copy the renamed `tj.blai` ai model file to the models folder in the u disk: Create a folder named models in the u disk, and copy the renamed `tj.blai` ai model file into the created models folder. ![tom_jerry_model_path](./../../../../zh/maix/m1s/other/assets/start/tom_jerry_model_path.jpg) Finish there, we can use M1s Dock to distinguish Tom and Jerry. <img src \"./../../../../zh/maix/m1s/other/assets/start/tom_jerry_model_jerry.jpg\" alt \"tom_jerry_model_jerry\" width 42%> <img src \"./../../../../zh/maix/m1s/other/assets/start/tom_jerry_model_tom.jpg\" alt \"tom_jerry_model_tom\" width 42%> Because this ai model is a big one, it's heavy for M1s Dock. ## Questions ### Why there is a BL702 chip on M1s Dock? We use this chip as a USB to 2 UART convertor. If there is some problem with your serial COM port, you can burn its firmware to solve this problem. ### Why there are 2 serial COM ports on M1s Dock We can know there are 3 cores in BL808, and 2 serial COM ports are connecting with 2 different cores of BL808, with which you can see their own logs if you need. ### Why choose u disk burn This u disk is built on a firmware, via which user can burn demos and experience M1s Dock. If you full erase the flash, there is no u disk anymore. If you want to use this u disk again, reburn the default firmware into bl808 via serial burn. ### Why use serial burn U disk burn is based on firmware, we need a way to burn this firmware into M1s Dock when it's produced. So we use serial burn to flash the defaule firmware into M1s Dock. ### How to erase bl808 flash To erase the flash. we need [Bouffalo Lab Dev Cube](https://dev.bouffalolab.com/download), download and run it, choose Chip BL808. ![chip_selection](./../../../../zh/maix/m1s/other/assets/start/chip_selection.png) `Show advnaced Page` first. ![erase_advanede_mode](./../../../../zh/maix/m1s/other/assets/start/erase_advanede_mode.jpg) Do following steps: Choose Flash interface Make sure you have made M1s Dock in burning status(Hold BOOT ket and RST key, then relase RST key first, then release BOOT key.) Selest the bigger COM port Tick Whole Chip Click Erase Flash ![erase_configurations](./../../../../zh/maix/m1s/other/assets/start/erase_configurations.jpg) Then your M1s Dock is being erased, there is no progress bar, but `Success` shows when finishing erasing. ![erase_success](./../../../../zh/maix/m1s/other/assets/start/erase_success.jpg) ### BFLB IMG LOAD SHAKEHAND FAIL This means M1s Dock is not in burning mode. Hold BOOT ket and RST key, then relase RST key first, then release BOOT key to make it into burning mode. ![uart_burn_bl808_shakehand_fail](./../../../../zh/maix/m1s/other/assets/start/uart_burn_bl808_shakehand_fail.jpg) And Make sure you choose the bigger COM port. ![uart_burn_bl808_shakehand_fail_com_port](./../../../../zh/maix/m1s/other/assets/start/uart_burn_bl808_shakehand_fail_com_port.jpg) ### Only one COM port This means you are in the bl702 burning mode. Make sure power on this board before pressing BOOT key. ![uart_burn_bl808_only_one_port](./../../../../zh/maix/m1s/other/assets/start/uart_burn_bl808_only_one_port.jpg) ### Burn single firmware In the burning software, we need to tick and choose `partition table`, `boot2`, `firmware`, `d0fw` for the first time burning. If we want to burn only one firmware not all firmware, tick your target firmware and burn it. `firmware` can be compiled out via e907_demo. `d0fw` can be compiled out via c906_demo. `partition table` and `boot2` are needed to burn every time. <table> <tr> <td>Burn c906_demo firmware</td> <td>Burn e907_demo firmware</td> </tr> <tr> <td><img src \"./../../../../zh/maix/m1s/other/assets/start/uart_burn_c906.jpg\" alt \"uart_burn_c906\"></td> <td><img src \"./../../../../zh/maix/m1s/other/assets/start/uart_burn_e907.jpg\" alt \"uart_burn_e907\"></td> </tr> </table> ### Trouble about compiling SDK 1. Run command `build.sh` and get error `Makefile:14: *** BL_SDK_PATH not found, please enter: export BL_SDK_PATH {sdk_path}. Stop.`, Visit [Set toolchain path](https://wiki.sipeed.com/hardware/en/maix/m1s/other/start.html#Set toolchain path) to set `BL_SDK_PATH` correctly. 2. Failed compiling When compiling your firmware, make sure your command is `./build.sh demo_name`, like `./build.sh hello_world`, not `./build.sh hello_world/` (pay atention to the end symbol `/`) ### Old firmware test Power the M1s Dock, screen displays what the camera captures. Press `S1_Button` or `S2_button` the number on the right top of the screen changes, which is the brightness percentage of the LED. ![default_firmware](./../../../../zh/maix/m1s/other/assets/start/default_firmware.jpg) This is the state of 50% LED brightness. ![led_brghtness](./../../../../zh/maix/m1s/other/assets/start/led_brghtness.jpg) ### Burn onboard bl702 We do this only when there is some trouble with our board. Hold BOOT key and cold boot the board, the bl702 is into download mode, then we burn its firmware. Hold BOOT key before power this device, then connect this board ti with computer by the UART TypeC USB port, after this the onboard is in download mode. Run `BLDevCube`, choose `BL702`, then in MCU page, choose the firmware. Here we have provided the [firmware](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/7_Firmware), download the file whose name starts with `usb2dualuart_bl702`. Click [bl702 firmware difference](https://wiki.sipeed.com/hardware/en/maix/m1s/other/start.html#bl702 firmware difference) to find more information. <table> <tr> <td><img src \"./../../../../zh/maix/m1s/other/assets/start/select_bl702.png\" alt \"select_bl702\" style \"transform:rotate(0deg);\"></td> <td><img src \"./../../../../zh/maix/m1s/other/assets/start/mcu_mode.png\" alt \"mcu_mode\" style \"transform:rotate(0deg);\" width \"70%\"></td> </tr> </table> Click `Refresh`，choose the serial port (there is only one port, if you can't see this port, make sure you have hold BOOT key before powering this device), set UartRate 2000000, click `Create & Diwnload`. ![burn_bl702](./../../../../zh/maix/m1s/other/assets/start/burn_bl702.png) After finishing burning, repower this board to use the new firmware. ![finish_burn_702](./../../../../zh/maix/m1s/other/assets/start/finish_burn_702.png) ### No serial port when burn bl702 Make sure you hold BOOT key, then power up this board via UART port on M1s Dock. Windows user needs check whether there is a `Bouffalo CDC` device. If there is an error on this CDC device, search `Windows7 CDC` on the internet and find the answer. ![burn_bl702_cdc_error](./../../../../zh/maix/m1s/other/assets/start/burn_bl702_cdc_error.png) ### Failed booting device Different bl702 firmware causes this error. Here are two ways to solve this. Power this board, then click the RST key to boot M1S Dock Reflash the USB to dual serial port firmware for bl702 [Burn onboard bl702](https://wiki.sipeed.com/hardware/en/maix/m1s/other/start.html#Burn onboard bl702) ### bl702 firmware difference In [download site](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/7_Firmware)，there are two bl702 firmwares, and their differences are in the following: Firmware name usb2dualuart_bl702_221118 usb2dualuart_bl702_20230221 Author SIPEED Bouffalolab Detail Containing software reset, <br> boot M1S Dock without clicking RST key No software reset，<br>clicking RST key to boot BL808 Driver Some Windows computers require [Drivers](https://dl.sipeed.com/shareURL/MAIX/tools/driver) Don't require Driver [Click me](https://wiki.sipeed.com/hardware/en/maix/m1s/other/start.html#Burn onboard bl702) to see how to flash the firmware for BL702"},"/hardware/en/maix/m1s/other/get_key.html":{"title":"M1s Machine Code","content":" title: M1s Machine Code keywords: M1s DOCK ,BL808, M1s update: date: 2022 11 21 version: v0.1 author: wonder content: New file When we download models from [MaixHub](https://maixhub.com/), the machine code is required. Here we are talking about how to get the machine code. If you did not get your machine code after doing the following steps, just see the end [Questions](#questions) chapter at the end of this page. ## Brief steps Here are the steps: Connect the board with computer through USB UART port (2 UART Ports will appear in your computer) Run UART application to open the UART device, set the Baudrate 2000000 (one 2 and six 0), open the bigger UART port Press onboard `RST` key, and the log message is as following ```bash # logs [MTD] >>>>>> Hanlde info Dump >>>>>> name D0FW id 0 offset 0x00100000(1048576) size 0x00200000(2048Kbytes) xip_addr 0x580f0000 [MTD] <<<<<< Hanlde info End <<<<<< D0FW addr:0x580f0000 size:0x200000 MM CPU select PLL >MM CPU select 400Mhz UART CLK select MM XCLK >XCLK select XTAL I2C CLK select MM XCLK >XCLK select XTAL SPI CLK select 160Mhz MM BUS CLK select 160Mhz XCLK select XTAL irq handle: 3 reset ev CHIP KEY key:57F80642C3F97E2655772C48AF17455EC9E79BBF76C16EED4E0EC1096D664435 ``` We can see the `CHIP KEY` in the end, which is our machine code. > The `CHIP KEY` of each board is different, the actual `CHIP KEY` should be got by yourself ## Detailed Steps 1. Connect your board with your computer by Type C cable through USB UART port ![uart_connect](./../../../../zh/maix/m1s/other/assets/get_key/uart_connect.png) 2. Run the UART application, set Baudrate 2000000 (one 2 and six 0), choose the bigger UART port <img src \"./../../../../zh/maix/m1s/other/assets/get_key/baudrate_2000000.png\" width 45% alt \"baudrate_2000000\"> <img src \"./../../../../zh/maix/m1s/other/assets/get_key/bigger_com_port.png\" width 45% alt \"bigger_com_port\"> 3. Open Serial port; Press the `RST` key on your board, then you will see your `CHIP KEY` in the log. <table> <tr> <th>Click RST</th> <th>Chip KEY in logs</th> </tr> <tr> <td><img src \"./../../../../zh/maix/m1s/other/assets/get_key/rst_key.png\" alt \"rst_key\"></td> <td><img src \"./../../../../zh/maix/m1s/other/assets/get_key/chip_key.png\" alt \"chip_key\"></td> </tr> </table> The `CHIP KEY` is your machine code ## Questions ### Messy logs Make sure your Baudrate is 2000000 (2M) ### No CHIP KEY in logs This means you need upgrade your firmware, [Click me](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/7_Firmware/factory) to download the firmware, choose the file starts with `firmware`,and visit the **Download e907 firmware** [here](https://github.com/sipeed/M1s_BL808_example) (Github) to burn it. ### No two Serial port visit the **Download bl702 firmware** [here](https://github.com/sipeed/M1s_BL808_example) (Github) to burn the onboard serial chip, and the firmware can be downloaded [here](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/7_Firmware), choose the file starts with `usb2dualuart_bl702`. ### No Serial port Make sure you have connected the computer with the UART port on the board first, then try to burn the onboard serial chip by following [No two Serial port](#no two serial port)"},"/hardware/en/maix/m1s/other/questions.html":{"title":"M1s DOCK Questions","content":" title: M1s DOCK Questions keywords: M1s DOCK ,BL808, M1s update: date: 2022 12 03 version: v0.1 author: wonder content: Create file ## c906_app/build_out/xxxxx/.map:No such file or directory When compiling your firmware, make sure your command is `./build.sh demo_name`, like `./build.sh hello_world`, not `./build.sh hello_world/` (pay atention to the end symbol `/`)"},"/hardware/en/maix/m1s/m1s_dock.html":{"title":"M1s DOCK","content":" title: M1s DOCK keywords: M1s DOCK ,BL808, M1s, bl808 update: date: 2022 11 15 version: v0.1 author: wonder content: Initialize Doc ## Summary Sipeed M1s Dock is a development board designed based on [Sipeed M1s module](./m1s_module.html)，routes interface like MIPI CSI、SPI LCD and FPC connector, to get rid of worries about connecting cable. Designed with the most minimal design, for customers to evaluate the module, or hobbyists to play directly, etc. Buy one: [Aliexpress](https://www.aliexpress.com/item/1005004970779483.html) <td><img alt \"m1s_dock.jpg\" src \"./../../../zh/maix/m1s/assets/m1s_dock/m1s_dock.jpg\" width \"45%\"></td> ## Video Video of M1s Dock and M0Sense：M1s Dock is before 3:15，and time after 3:15 is M0Sense. <iframe width \"560\" height \"315\" src \"https://www.youtube.com/embed/hkSAW42Evl4\" title \"M1s Dock\" frameborder \"0\" allow \"accelerometer; autoplay; clipboard write; encrypted media; gyroscope; picture in picture\" allowfullscreen></iframe> ## Features MainChip BL808 RISC V 480Mhz + NPU BLAI 100 Onboard USB to UART debugger Onboard screen interface (Optional 1.69 inch 240x280 capacitor touch screen) Onboard MIPI camera interface (Optional 2M solution camera) Support 2.4G WIFI / BT / BLE Onboard 1 analog microphone、1 LED、1 TF card slot Route USB OTG to USB Type C port ### Parameters <table> <thead> <tr> <th colspan \"2\" > M1s Dock </th> </tr> </thead> <tbody> <tr> <td rowspan \"8\" style \"white space:nowrap\">M1s Module</td> </tr> <tr> <td>Three RISC V CPUs：<br>· RV64GCV 480MHz <br>· RV32GCP 320MHz <br>· RV32EMC 160MHz</td> </tr> <tr> <td>AI NN general purpose hardware accelerator：<br>· BLAI 100, used for video/audio detection/identification，100GOPS hashrate</td> </tr> <tr> <td>768KB SRAM + 64MB UHS PSRAM</td> </tr> <tr> <td>Encode and Decode<br> MJPEG and H264(Baseline/Main)<br> 1920x1080@30fps + 640x480@30fps </td> </tr> <tr> <td>Interface：<br> Camera interface ：DVP and MIPI CSI<br> Display interface：SPI、DBI、DPI(RGB)</td> </tr> <tr> <td>Wireless：<br> Support Wi Fi 802.11 b/g/n<br> Support Bluetooth 5.x Dual mode(BT+BLE)<br> Support Wi Fi / BT co existence</td> </tr> <tr> <td>USB 2.0 HS OTG</td> </tr> <tr> <td rowspan \"5\" style \"white space:nowrap\">Onboard components</td> </tr> <tr> <td>Onboard USB to UART debugger (Used for uart communication and burn firmware)</td> </tr> <tr> <td>Onboard screen interface (Optional 1.69 inch 240x280 capacitor touch screen)</td> </tr> <tr> <td>Onboard MIPI camera interface (Optional 2M solution camera)</td> </tr> <tr> <td>Onboard 1 analog microphone、1 LED、1 TF card slot</td> </tr> <tr> <td rowspan \"5\" style \"white space:nowrap\"> Others </td> </tr> <tr> <td> 3D model file：<a href \"https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/5_3D_file\">Click me</a> </td> </tr> <tr> <td>External TYPE C PORT power supply requirements：<br>5V±10% 0.5A</td> </tr> <tr> <td>Temperature rise: &lt;30K</td> </tr> <tr> <td>Operating temperature: 10℃ ~ 65℃</td> </tr> </tbody> </table> ### Chip Cores Three cores in chip: M0，D0，LP。 M0 D0 LP T HEAD E907@320MHz T HEAD [C906](https://xrvm.com/cpu details?id 4056751997003636736)@480MHz T HEAD [E902](https://xrvm.com/cpu details?id 4056758197145440256)@160MHz ### Function block <img alt \"m1s_dock_function_block_top\" src \"./../../../zh/maix/m1s/assets/m1s_dock/m1s_dock_function_block_top.jpg\" width 20%> <img alt \"m1s_dock_function_block_top\" src \"./../../../zh/maix/m1s/assets/m1s_dock/m1s_dock_function_block_top.jpg\" width 20%> ### Dimenssion <img alt \"m1s_dock_size\" src \"./../../../zh/maix/m1s/assets/m1s_dock/m1s_dock_size.png\" width 45%> ### Pinmap <img alt \"m1s_doc_pin_map\" src \"./../../../zh/maix/m1s/assets/m1s_dock/m1s_doc_pin_map.png\" width 45%> ## Comparison Item Maix Bit ESP32 cam M1s Dock : : : : MainChip K210 ESP32 M1s(BL808) Camera 0.3MP DVP GC0328 2MP DVP OV2640 with flash LED 2MP MIPI OV2685(two side) with flash LED Screen 2.4 inch 320x240 1.68 inch 280x240 capacitive touch screen Audio I2S MEMS MIC Analog MEMS MIC + LineOut SD Card Slot SPI mode SPI mode · SDHC mode <br>· JTAG mode Key Reset <br> Boot Reset · Reset <br>· Boot <br>· User x 2 USB USB to Serial x 1 · USB to Dual Serial x 1 <br>· USB OTG HS Other 4P x 1.25mm connector（UART port） Pin · 2 x 18 pins <br>· bread board friendly 2 x 8 pins · 2 x 16 pins<br>· bread board friendly JTAG Optional TF2JTAG Shell Optional Size 25 x 53 mm 27 x 41 mm 27 x 55 mm ## Software <table> <thead> <tr> <th colspan \"2\" > M1s Dock </th> </tr> </thead> <tbody> <tr> <td>OS</td> <td>· Full support for FreeRTOS<br>· Basic support for Linux</td> </tr> <tr> <td>Developments</td> <td>· C SDK<br>· MaixHAL C <br>· PikaPython </td> </tr> <tr> <td>Burn Firmware</td> <td>· Burn from uart<br>· Virtual disk drag and drop burn</td> </tr> <tr> <td>AI Framework</td> <td> · Support BLAI accelerated inference engine with native SDK<br> · Suppory universal TinyMaix inference</td> </tr> <tr> <td>AI model store</td> <td>· Download from <a href \"https://maixhub.com/\">MaixHub</a>. Support Face detection and recognition, posture detection and gesture detection, etc.</td> </tr> <tr> <td>Sipeed examples</td> <td>· https://github.com/sipeed/M1s_BL808_example</td> </tr> </tbody> </table> ## Operators list <table> <thead> <tr> <th>Type</th> <th>Operators</th> <th>Applicable Subset Spec.</th> <th>Processor</th> </tr> </thead> <tbody> <tr> <td rowspan \"10\">Convolution</td> <td rowspan \"4\">Conv </td> <td>Kernel: 1x1,3x3,5x5,7x7</td> <td rowspan \"4\">:strong:<code>NPU</code></td> </tr> <tr> <td>Stride: 1x1, 2x2</td> </tr> <tr> <td>Dilation: 1x1, 2x2</td> </tr> <tr> <td>Pad: same</td> </tr> <tr> <td rowspan \"4\">Depthwise Conv</td> <td>Kernel: 1x1,3x3 (5x5, 7x7 TBD)</td> <td rowspan \"4\">:strong:<code>NPU</code></td> </tr> <tr> <td>Stride: 1x1, 2x2</td> </tr> <tr> <td>Dilation: 1x1 (2x2 TBD)</td> </tr> <tr> <td>Pad: same</td> </tr> <tr> <td rowspan \"2\">Transpose Conv</td> <td>Kernel: 3x3</td> <td rowspan \"2\">strong:<code>NPU</code></td> </tr> <tr> <td>Stride: 2x2</td> </tr> <tr> <td rowspan \"4\">Pooling</td> <td rowspan \"2\">MaxPool (NPU TBD)</td> <td>Kerenl: 2x2</td> <td rowspan \"2\">DSP</td> </tr> <tr> <td>Stride: 2x2</td> </tr> <tr> <td rowspan \"2\">MaxPool</td> <td>Kerenl: 3x3</td> <td rowspan \"2\">:strong:<code>NPU</code></td> </tr> <tr> <td>Stride: 1x1, 2x2</td> </tr> <tr> <td rowspan \"2\">Activation</td> <td>Relu</td> <td></td> <td>:strong:<code>NPU</code></td> </tr> <tr> <td>Relu 6</td> <td></td> <td>:strong:<code>NPU</code></td> </tr> <tr> <td rowspan \"5\">Other processing</td> <td>BatchNormalization</td> <td>fused with conv</td> <td>:strong:<code>NPU</code></td> </tr> <tr> <td>Add (shortcut)</td> <td></td> <td>:strong:<code>NPU</code></td> </tr> <tr> <td>Concat (route)</td> <td>Channel wise (AXIS 3 in BHWC)</td> <td>:strong:<code>NPU</code></td> </tr> <tr> <td>Fully Connected</td> <td></td> <td>:strong:<code>NPU</code></td> </tr> <tr> <td>Upsample</td> <td>Nearest</td> <td>:strong:<code>NPU</code></td> </tr> </tbody> </table> ## Links [Board Datasheet](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/1_Specification) [Board Schematic](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/2_Schematic) [Board Bit map](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/3_Bit_number_map) [Board Dimensions](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/4_Dimensional_drawing) [3D model file](https://dl.sipeed.com/shareURL/MAIX/M1s_Dock/M1s/5_3D_file) [Board Chip manual](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/6_Chip_Manual) [Capacitive touch screen manual](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/6_Chip_Manual/touch_screen) [Bouffalolab official documents](https://dev.bouffalolab.com/home/) [BL808 DataSheet](https://github.com/bouffalolab/bl_docs/tree/main/BL808_DS/en) (github) [BL808 Reference Manual](https://github.com/bouffalolab/bl_docs/tree/main/BL808_RM/en) (github) [Sipeed SDK](https://github.com/sipeed/M1s_BL808_SDK) (Github) [Sipeed Examples](https://github.com/sipeed/M1s_BL808_example)（Github） [Bouffalolab SDK](https://github.com/bouffalolab/bouffalo_sdk)（Github） [Linux SDK](https://github.com/sipeed/M1s_BL808_Linux_SDK)（Github） [Telegram](https://t.me/sipeed) [Twitter](https://twitter.com/SipeedIO) [Reddit](https://www.reddit.com/r/Sipeed/) [Online model platform](https://maixhub.com/) ## Attention <table> <tr> <th>Item</th> <th>Attention</th> </tr> <tr> <td>Electrostatic protection</td> <td>Avoid static electricity hitting the PCBA. Release the static electricity of hand before touching the PCBA</td> </tr> <tr> <td>Operating voltage</td> <td>The operating voltage of each GPIO has been marked in the schematic. Please do not allow the actual operating voltage of the GPIO to exceed the rated value, otherwise the PCBA will be permanently damaged</td> </tr> <tr> <td>FPC Connector</td> <td>When connecting FPC cable，make sure that the row is completely inserted into the row without bias</td> </tr> <tr> <td>Plug and Remove</td> <td>Power off completely before plugging or removing it</td> </tr> <tr> <td>Avoid short circuit</td> <td>During the power on, avoid any liquid or metal touching PCBA components，otherwise the PCBA will be damaged even burn</td> </tr> </table> ## Contact M1s Dock meets different needs of customers in various scenarios. Please contact email [support@sipeed.com](support@sipeed.com) for technical support and business cooperation"},"/hardware/en/maix/M1n.html":{"title":"Sipeed M1n","content":" title: Sipeed M1n keywords: maixpy, k210, AIOT, 边缘计算, M1n desc: maixpy Sipeed M1/M1W ## M1n SiPEEDM1n是基于基于嘉楠堪智科技的边缘智能计算芯片K210(RISC v架构64位双核)设计的一款AIOT开发板。板载DVP双摄像头接口、Flash、并把大部分IO通过金手指方式引出，模块设计小巧精致、布局走线合理规范，用户可直接应用于商用产品，也可以通过转接板对此模块进行开发。 ![M1n](./assets/m1n/M1n_1.png) ## 应用 智能家居，机器人清洁器，智能扬声器，电子门锁，家庭监控等; 医学行业应用，如辅助诊断，医学图像识别; 智能工业应用，如工业机械，智能分拣，电气设备监控等; 教育机器人，智能互动平台，教育效率检查等教育应用; 农业应用，如农业监测，病虫害监测，自动控制等 ## M1n 参数 M1n模块以K210作为核心单元，功能非常很强大，芯片内置64位双核处理器，拥有8M的片上SRAM，在Al机器视觉、听觉性能方便表现突出，内置多种硬件加速单元(KPU、FPU，FFT等)，总算力最高可达1TOPs ,可以方便地实现各类应用场景的机器视觉/听觉算法,也可以进行语音方向扫描和语音数据输出的前置处理工作。 <p><img loading \"M1/M1W\" src \"./assets/m1n/M1n.png\" width 500 ></p> <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\">K210 芯片基本参数</th> </tr> </thead> <tbody> <tr> <td>内核</td> <td>RISC V Dual Core 64bit, with FPU</td> </tr> <tr> <td>主频</td> <td>400MHz （可超频至600MHz）</td> </tr> <tr> <td>SRAM</td> <td>内置8M Byte</td> </tr> <tr> <td>图像识别</td> <td>QVGA@60fps/VGA@30fps</td> </tr> <tr> <td>语音识别</td> <td>麦克风阵列(8mics)</td> </tr> <tr> <td>网络模型</td> <td><li>支持YOLOv3<li>Mobilenetv2<li>TinyYOLOv2<li>人脸识别等</td> </tr> <tr> <td>深度学习框架</td> <td>支持TensorFlow \\ Keras \\ Darknet \\ Caffe 等主流框架</td> </tr> <tr> <td>外设</td> <td>FPIOA、 UART、 GPIO、 SPI、 I2C、I2S、 TIMER</td> </tr> <tr> <td>视频处理</td> <td><li>神经网络处理器(KPU)<li>FPU满足IEEE754 2008标准<li>音频处理器(APU)<li>快速傅里叶变换加速器(FFT)</td> </tr> </tbody> </table> <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\">模块软件</th> </tr> </thead> <tr> <td>操作系统</td><td>FreeRtos and Standrad development ki</td> </tr> <tr> <td>编程语言</td><td>MicroPython</td> </tr> <tr> <td>机器视觉</td><td>支持卷积神经网络</td> </tr> <tr> <td>机器听觉</td><td>高性能音频处理器(APU)</td> </tr> <tr> <td>开发环境</td><td>串口终端、MaixPy IDE</td> </tr> </table> <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\">模块硬件</th> </tr> </thead> <tr> <td>尺寸</td><td>22.0*25.0mm</td> </tr> <tr> <td>引脚</td><td>部分引脚金手指引出</td> </tr> <tr> <td>供电电压</td><td>5.0V @ 300mA（供电电流需大于300mA)</td> </tr> <tr> <td>工作温度</td><td> 30°C ~85°C</td> </tr> </table> ## 资料下载 芯片 K210 Datasheet: [Kendryte 官网](https://canaan creative.com/) M1n 资料下载: [Click me](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed M1n) M1n 原理图下载：[Sipeed M1n Datasheet V1.0.pdf](https://dl.sipeed.com/fileList/MAIX/HDK/Sipeed M1n/Sipeed%20M1n%20Datasheet%20V1.0.pdf) ## 产品技术支持 Maix系列产品可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"},"/hardware/en/maix/modules_spmod/spmod_lora.html":{"title":"SPMOD - LoRa","content":"# SPMOD LoRa ## Overview <img src \"../../assets/spmod/spmod_lora/sp_lora.png\" align \"right\" width \"\" height \"500\" /> SPMOD_LoRa(LoRa Module) uses M XL8 module. ## SPMOD LoRa Introduction Using **Sipeed SPMOD** interface(2.54mm * 8PIN )，unified MaixPy board interface Using SP MOD SPI to communicate with LoRa module LoRa module:The SP_LoRa module uses M XL8 module with LoRaTM modem and LoRa module with adjustable power amplifier. It has high performance and reliability and is connected by SP_MOD. 370MHz 1200MHz, Maximum 20dBm (100mW) continuous transmit power Size:25.0\\*10.0\\*4.3mm ### M XL8 SX1276 LoRa module Introduction Features： Working frequency 370MHz 1200Mhz Transmission power 20dBm(Maximum) Communication interface SPI Supply voltage of external power supply 1.8V~6.3V Range of working temperature 40℃ 80℃ antenna external，IPEX Reception Sensitivity 148dbm RSSI value 127dB Maximum link budget 168dB Send and receive status of current 9.9mA Sleep status of current 50nA Modulation method FSK, GFSK, MSK, GMSK, LoRaTM及OOK > Built in LoRaTM modem, built in CRC, inherited +12dBm adjustable PA+LNA ### SPMOD_lora pin description: Pin Name Type Description 1 GND G Ground 2 CS I/O Chip Select input pin 3 SO I/O Master In Slave Out 4 RST I Reset (active low) 5 3V3 V Power supply(3.3V) 6 SCK I SPI clock pin 7 SI I/O Master Out Slave In 8 IRQ I Connected to DIO0 of the module,，Programmable decision function <img src \"../../assets/spmod/spmod_lora/back.png\" width \"300\" /> Mode of communication MCU:FUN(IO) SP_LCD : : : : GPIOHS7(IO_7) RST SPI:MISO(IO_15) SO SPI:SS0(IO_20) CS SPI:SCK(IO_21) SCK SPI:MOSI(IO_8) SI GPIOH(IO_6) IRQ 1.8 6.3V 3.3V GND GND <img src \"../../assets/spmod/spmod_lora//connection.png\" height \"250\"> ## Usage * Process 1. Create the LoRa object and initialize it 2. Send or receive data ### C : ```c fpioa_set_function(SPI_LoRa_SX127X_CS_PIN_NUM, FUNC_SPI1_SS0); // CS: 20 fpioa_set_function(SPI_LoRa_SX127X_SCK_PIN_NUM, FUNC_SPI1_SCLK); // SCLK: 21 fpioa_set_function(SPI_LoRa_SX127X_MOSI_PIN_NUM, FUNC_SPI1_D0); // MOSI: 8 fpioa_set_function(SPI_LoRa_SX127X_MISO_PIN_NUM, FUNC_SPI1_D1); // MISO: 15 fpioa_set_function(SPI_LoRa_SX127X_IRQ_PIN_NUM, FUNC_GPIOHS0 + SPI_LoRa_SX127X_IQR_GPIO_NUM); // IQR: 6 fpioa_set_function(SPI_LoRa_SX127X_RST_PIN_NUM, FUNC_GPIOHS0 + SPI_LoRa_SX127X_RST_GPIO_NUM); // RST: 7 spi_init(SPI_DEVICE_1, SPI_WORK_MODE_0, SPI_FF_STANDARD, DATALENGTH, 0); sx1278_begin(&SX1278, SX1278_433MHZ, SX1278_POWER_17DBM, SX1278_LoRa_SF_8, SX1278_LoRa_BW_20_8KHZ, 10); if (master 1) { printf(\" MASTER \\r\\n\"); ret sx1278_LoRaEntryTx(&SX1278, 16, 2000); } else { printf(\" SALAVE \\r\\n\"); ret sx1278_LoRaEntryRx(&SX1278, 16, 2000); } ``` ### MaixPy : ```python fm.register(20, fm.fpioa.GPIOHS20, force True) # RST fm.register(7, fm.fpioa.GPIOHS7, force True) # CS # set gpiohs work mode to output mode cs GPIO(GPIO.GPIOHS20, GPIO.OUT) rst GPIO(GPIO.GPIOHS7, GPIO.IN) # The other pins are configured at SPI initialization time spi1 SPI(SPI.SPI1, mode SPI.MODE_MASTER, baudrate 100 * 1000, polarity 0, phase 0, bits 8, firstbit SPI.MSB, sck 21, mosi 8, miso 15) lora SX127x(spi spi1, pin_ss cs) lora.init() #######receiver########### receive(lora) ########sender########### # send(lora) ``` ### Runtime environments: Language Board SDK/Firmware version : : : : : : C MaixCube kendryte standalone sdk v0.5.6 MaixPy MaixCube maixpy v0.5.1 *The MaixPy firmware is recommended to compile from the latest source* ### Result * C <center class \"third\"> \t <img src \"../../assets/spmod/spmod_lora/lora_send_log_c.png\" height \"250\"/><img src \"../../assets/spmod/spmod_lora/lora_recv_log_c.png\" height \"250\"/> </center> * MaixPy <center class \"third\"> \t <img src \"../../assets/spmod/spmod_lora/lora_send_log.png\" height \"250\"/><img src \"../../assets/spmod/spmod_lora/lora_recv_log.png\" height \"250\"/> </center> ### Transplant The following parameters need to be modified * C ```c // board_config.h #define SPI_INDEX 1 #define SPI_SCLK_RATE 600*1000 #define SPI_CHIP_SELECT_NSS 0//SPI_CHIP_SELECT_0 #define SPI_LoRa_SX127X_CS_PIN_NUM 20 #define SPI_LoRa_SX127X_SCK_PIN_NUM 21 #define SPI_LoRa_SX127X_MOSI_PIN_NUM 8 #define SPI_LoRa_SX127X_MISO_PIN_NUM 15 #define SPI_LoRa_SX127X_IRQ_PIN_NUM 6 #define SPI_LoRa_SX127X_RST_PIN_NUM 7 #define SPI_LoRa_SX127X_IQR_GPIO_NUM 6 #define SPI_LoRa_SX127X_RST_GPIO_NUM 7 ``` * MaixPy ```python ################### config ################### LoRa_RST const(20) LoRa_CS const(7) LoRa_SPI_SCK const(21) LoRa_SPI_MOSI const(8) LoRa_SPI_MISO const(15) LoRa_SPI_NUM SPI.SPI1 LoRa_SPI_FREQ_KHZ const(100) ############################################## ``` ## Outlook SPMOD_LoRa Size drawing: <img src \"../../assets/spmod/spmod_lora/sipeed_spmod_lora.png\" height \"250\" /> ## Resource Link Resource Website www.sipeed.com Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) Wiki [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed model shop [https://maixhub.com/](https://maixhub.com/) SDK Relevant information [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) HDK Relevant information [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) E mail(Technical Support and Business Cooperation) [Support@sipeed.com](mailto:support@sipeed.com) telgram link [https://t.me/sipeed](https://t.me/sipeed) "},"/hardware/en/maix/modules_spmod/spmod_lcd1.14.html":{"title":"SPMOD - LCD 1.14","content":"# SPMOD LCD 1.14 ## Outline <img src \"../../assets/spmod/spmod_lcd1.14//sp_lcd.png\" align \"right\" width \"\" height \"500\" /> SPMOD_LCD1.14(1.14 inch LCD) uses ST7735S TFT LCD. ## SPMOD LCD1.14 Introduction Using **Sipeed SPMOD** interface(2.54mm * 8PIN )，unified MaixPy board interface Using commom LCD driver IC ST7735S(4 wire SPI communicate) Display Resolution:240\\*135 Size:35.0\\*20.0mm ### ST7735S TFT LCD Introduction Features： Supply voltage of external power supply 2.5V~4.8V Supply current of external power supply <20mA Range of working temperature 30℃ ~ 85℃ Sleep Status of Current <0.1mA Screen Size 1.14 inch Active Area 1.7mm * 10.8mm Display Resolution 160*80 Color 132 RGB channels Interface 8P FPC (0.5mm pitch) > DC/DC Converter, Adjustable VCOM Generation, Non volatile (NV) Memory to Store Initial Register Setting, Oscillator for Display Clock Generation, Factory default value (module ID, module version, etc) are stored in NV memory, Timing Controller, ### SPMOD_LCD1.14 pin description : Pin Name Type Description 1 GND G Ground 2 CS I Chip Select input pin 3 D/C I Data/Command control pin 4 RST I Reset (active low) 5 3V3 V Power supply(3.3V) 6 SCK I SPI clock pin 7 SI I/O Master Out Slave In 8 BL I BackLight control pin (active high) <img src \"../../assets/spmod/spmod_lcd1.14/back.png\" width \"300\" /> Mode of connection: MCU:FUN(IO) SP_LCD : : : : GPIOHS7(IO_7) RST GPIOHS15(IO_15) D/C SPI:SS0(IO_20) CS SPI:SCK(IO_21) SCK SPI:MOSI(IO_8) SI GPIOHS6(IO_6) BL 2.5~4.8V 3.3V GND GND <img src \"../../assets/spmod/spmod_lcd1.14//connection.png\" height \"250\"> ## Usage * Process 1. Send AT instruction 2. Receive the reply 3. Determines whether the setup was successful ### C : ```c fpioa_set_function(SPI_IPS_LCD_CS_PIN_NUM, FUNC_SPI1_SS0); // SPI_IPS_LCD_CS_PIN_NUM: 20; fpioa_set_function(SPI_IPS_LCD_SCK_PIN_NUM, FUNC_SPI1_SCLK); // SPI_IPS_LCD_SCK_PIN_NUM: 21; fpioa_set_function(SPI_IPS_LCD_MOSI_PIN_NUM, FUNC_SPI1_D0); // SPI_IPS_LCD_MOSI_PIN_NUM: 8; fpioa_set_function(SPI_IPS_LCD_DC_PIN_NUM, FUNC_GPIOHS0 + SPI_IPS_LCD_DC_GPIO_NUM); // SPI_IPS_LCD_DC_PIN_NUM: 15; SPI_IPS_LCD_DC_GPIO_NUM: 15; fpioa_set_function(SPI_IPS_LCD_RST_PIN_NUM, FUNC_GPIOHS0 + SPI_IPS_LCD_RST_GPIO_NUM); // SPI_IPS_LCD_RST_PIN_NUM: 7; SPI_IPS_LCD_RST_GPIO_NUM: 7; fpioa_set_function(SPI_IPS_LCD_BL_PIN_NUM, FUNC_GPIOHS0 + SPI_IPS_LCD_BL_GPIO_NUM); // SPI_IPS_LCD_BL_PIN_NUM: 6; SPI_IPS_LCD_BL_GPIO_NUM: 6; // set gpiohs work mode to output mode gpiohs_set_drive_mode(SPI_IPS_LCD_DC_GPIO_NUM, GPIO_DM_OUTPUT); gpiohs_set_drive_mode(SPI_IPS_LCD_RST_GPIO_NUM, GPIO_DM_OUTPUT); gpiohs_set_drive_mode(SPI_IPS_LCD_BL_GPIO_NUM, GPIO_DM_OUTPUT); spi_init(1, SPI_WORK_MODE_0, SPI_FF_STANDARD, DATALENGTH, 0); ips_lcd_init(); // init LCD_ShowPicture(0, 0, LCD_W, LCD_H, gImage_nanke); // display ``` ### MaixPy : ```python # 20: SPI_LCD_CS_PIN_NUM; fm.register(SPI_LCD_CS_PIN_NUM, fm.fpioa.GPIOHS20, force True) # 15: SPI_LCD_DC_PIN_NUM; fm.register(SPI_LCD_DC_PIN_NUM, fm.fpioa.GPIOHS15, force True) # 6: SPI_LCD_BUSY_PIN_NUM; fm.register(SPI_LCD_BUSY_PIN_NUM, fm.fpioa.GPIOHS6, force True) # 7: SPI_LCD_RST_PIN_NUM; fm.register(SPI_LCD_RST_PIN_NUM, fm.fpioa.GPIOHS7, force True) # set gpiohs work mode to output mode cs GPIO(GPIO.GPIOHS20, GPIO.OUT) dc GPIO(GPIO.GPIOHS15, GPIO.OUT) busy GPIO(GPIO.GPIOHS6, GPIO.OUT) rst GPIO(GPIO.GPIOHS7, GPIO.OUT) # 21: SPI_LCD_SCK_PIN_NUM; 8: SPI_LCD_MOSI_PIN_NUM; spi1 SPI(SPI_LCD_NUM, mode SPI.MODE_MASTER, baudrate SPI_LCD_FREQ_KHZ * 1000, polarity 0, phase 0, bits 8, firstbit SPI.MSB, sck SPI_LCD_SCK_PIN_NUM, mosi SPI_LCD_MOSI_PIN_NUM) ips SPLCD114(spi1, cs, dc, rst, busy, IPS_WIDTH, IPS_HEIGHT, IPS_MODE) # create an 'image' and fill it img image.Image() img.draw_rectangle(80, 80, 30, 30) # display ips.display(img) ``` ## Runtime environments Language Board SDK/Firmware version : : : : : C MaixCube kendryte standalone sdk v0.5.6 MaixPy MaixCube maixpy v0.5.1 *The MaixPy firmware is recommended to compile from the latest source* ### Result * C <img src \"../../assets/spmod/spmod_lcd1.14//sp_lcd1.14_c.png\" height \"250\" /> * MaixPy <img src \"../../assets/spmod/spmod_lcd1.14//sp_lcd1.14_py.png\" alt \"sp_lcd1.14_py\" height \"250\" /> ### Transplant The following parameters need to be modified. * C ```c // board_config.h #define SPI_INDEX 1 #define SPI_SCLK_RATE 600*1000 #define SPI_CHIP_SELECT_NSS 0 // SPI_CHIP_SELECT_0 #define SPI_IPS_LCD_CS_PIN_NUM 20 #define SPI_IPS_LCD_SCK_PIN_NUM 21 #define SPI_IPS_LCD_MOSI_PIN_NUM 8 #define SPI_IPS_LCD_DC_PIN_NUM 15 #define SPI_IPS_LCD_BL_PIN_NUM 6 #define SPI_IPS_LCD_RST_PIN_NUM 7 #define SPI_IPS_LCD_DC_GPIO_NUM 15 #define SPI_IPS_LCD_BL_GPIO_NUM 6 #define SPI_IPS_LCD_RST_GPIO_NUM 7 #define USE_HORIZONTAL 3 // 0/1 is horizontal, and 2/3 is vertical. ``` * Maixpy ```python ################### config ################### SPI_LCD_NUM SPI.SPI1 SPI_LCD_DC_PIN_NUM const(15) SPI_LCD_BUSY_PIN_NUM const(6) SPI_LCD_RST_PIN_NUM const(7) SPI_LCD_CS_PIN_NUM const(20) SPI_LCD_SCK_PIN_NUM const(21) SPI_LCD_MOSI_PIN_NUM const(8) SPI_LCD_FREQ_KHZ const(600) ############################################## ``` ## Outlook SPMOD_LCD1.14 Size drawing: <img src \"../../assets/spmod/spmod_lcd1.14/sipeed_spmod_lcd1.14.png\" height \"250\" /> ## Resource Link Resource Website www.sipeed.com Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) Wiki [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed model shop [https://maixhub.com/](https://maixhub.com/) SDK Relevant information [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) HDK Relevant information [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) E mail(Technical Support and Business Cooperation) [Support@sipeed.com](mailto:support@sipeed.com) telgram link [https://t.me/sipeed](https://t.me/sipeed) "},"/hardware/en/maix/modules_spmod/spmod_joystick.html":{"title":"SPMOD - JoyStick","content":"# SPMOD JoyStick ## Overview <img src \"../../assets/spmod/spmod_joystick/sp_joystick.png\" align \"right\" width \"\" height \"500\" /> SPMOD_JoyStick (JoyStick module). ## SPMOD JoyStick Introduction Using **Sipeed SPMOD** interface(2.54mm * 8PIN )，unified MaixPy board interface Connect to the board through the SP MOD SPI interface 7.2V~9V DC can be connected via external adapter，power the vibration motor of the handle Built in step up circuit，easy to drive the handle Compatible with PSX/PS2 Size:35.0\\*20.0\\*13.3mm ### SPMOD_JoyStick pin description: Pin Name Type Description 1 GND G Ground 2 CS I Chip Select input pin 3 SO I/O Master In Slave Out 4 NC NC Not connected 5 3V3 V Power supply(3.3V) 6 SCK I SPI clock pin 7 SI I/O Master Out Slave In 8 ACK O data ready output pin <img src \"\" width \"500\" /> ## Introduction 待更新 ## Outlook SPMOD_JoyStick Size drawing: <img src \"../../assets/spmod/spmod_joystick/sipeed_spmod_joystick.png\" height \"250\" /> ## Resource Link Resource Website www.sipeed.com Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) Wiki [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed model shop [https://maixhub.com/](https://maixhub.com/) SDK Relevant information [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) HDK Relevant information [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) E mail(Technical Support and Business Cooperation) [Support@sipeed.com](mailto:support@sipeed.com) telgram link [https://t.me/sipeed](https://t.me/sipeed) "},"/hardware/en/maix/modules_spmod/spmod_tof.html":{"title":"SPMOD - TOF","content":"# SPMOD TOF ## Overview <img src \"../../assets/spmod/spmod_tof/sp_tof.png\" style \"padding right:100px;\" align \"right\" width \"\" height \"500\" /> SPMOD_TOF(TOF module) uses VL53L0X . ## SPMOD TOF Introduction Using **Sipeed SPMOD** interface(2.54mm * 8PIN )，unified MaixPy board interface Using SP MOD I2C to communicate with TOF module ToF module:The VL53L0X sensor used in this module is an I2C interface and a long distance single point flight time measurement (ToF) sensor. It has high performance and high reliability, With the longest distance of 4m and the highest refresh rate of 50Hz With the red laser pointer, the laser is activated through XSHUT and connected by SP_MOD. Size:25.0\\*10\\*3.15mm ### VL53L0X Introduction: Features: Max ranging distance 4000mm Refresh rate 50Hz Measuring angle 27° Communication Interface I2C Range of working temperature 40℃ 80℃ Sleep Status of Current 5uA Supply voltage of external power supply 2.8~3.5V Supply current of external power supply Depends on the working conditions of the module, usually less than 20mA ### SPMOD_TOF pin description: Pin Name Type Description 1 GND G Ground 2 IRQ I Interrupt input pin, connected to GPIO1 of VL53L0X 3 NC NC Not connected 4 SDA I/O Receive data signal 5 3V3 V Power supply(3.3V) 6 NC NC Not connected 7 SHT I Xshutdown pin(active low) 8 SCL I Transmit clock signal <img src \"../../assets/spmod/spmod_tof/back.png\" height \"300\" /> Mode of connection: MCU:FUN(IO) SP_RFID : : : : I2C:SDA(IO_7) SDA NC(IO_15) NC NC(IO_20) IRQ NC(IO_21) NC GPIOHS(IO_8) SHT I2C:SCL(IO_6) SCL 2.8~3.5V 3.3V GND GND <img src \"../../assets/spmod/spmod_tof/connection.png\" height \"250\"> ## Usage * Process 1. Initializatin 2. Adjust(option) 3. Get distance ### C: ```c //set io mux fpioa_set_function(VL53L0X_SCL, FUNC_I2C0_SCLK + VL53L0X_I2C_DEVICE * 2); fpioa_set_function(VL53L0X_SDA, FUNC_I2C0_SDA + VL53L0X_I2C_DEVICE * 2); fpioa_set_function(VL53L0X_SHT, FUNC_GPIOHS0 + VL53L0X_SHT); gpiohs_set_drive_mode(VL53L0X_SHT, GPIO_DM_OUTPUT); //i2c init maix_i2c_init(VL53L0X_I2C_DEVICE, 7, VL53L0X_I2C_FREQ_KHZ * 1000); while (vl53l0x_init(&vl53l0x_dev)) { printf(\"VL53L0X init error!!!\\r\\n\"); msleep(500); } printf(\"VL53L0X init success!\\r\\n\"); // adjusting printf(\"VL53L0X adjusting\\r\\n\"); vl53l0x_calibration_test(&vl53l0x_dev); // get distance printf(\"VL53L0X start work\\r\\n\"); vl53l0x_general_test(&vl53l0x_dev); ``` ### MaixPy: ```python 工作电压 2.6V~3.5V (选用红色激光时： 2.8V~3.3V) fm.register(VL53L0X_SHT, fm.fpioa.GPIOHS0, force True) XSHUT GPIO(GPIO.GPIOHS0, GPIO.OUT) i2c I2C(VL53L0X_I2C_NUM, freq VL53L0X_FREQ, scl VL53L0X_SCL, sda VL53L0X_SDA) # create obj and read distance \t tof VL53L0X(i2c) \t while True: mm tof.read() utime.sleep_ms(100) print(mm) ``` ## Runtime enviroments Language Boards SDK/firmware version : : : : : : C MaixCube kendryte standalone sdk v0.5.6 MaixPy MaixCube maixpy v0.5.1 ### Result * C <img src \"../../assets/spmod/spmod_tof/log_c.png\" height \"200\" /> * MaixPy [None] ## Transplant Modify the following parameters to fit other K210 boards. * C ```c // board_config.h #define VL53L0X_I2C_DEVICE 0 // i2c device number #define VL53L0X_I2C_FREQ_KHZ 100 // i2c frequence #define VL53L0X_SCL 6 // scl #define VL53L0X_SDA 7 // sda #define VL53L0X_SHT 8 // sht ``` * MaixPy ```python ################### config ################### VL53L0X_I2C_NUM const(I2C.I2C0) VL53L0X_FREQ const(100000) VL53L0X_SCL const(6) VL53L0X_SDA const(7) VL53L0X_SHT const(8) ############################################## ``` ## Outlook SPMOD_TOF Size drawing: <img src \"../../assets/spmod/spmod_tof/sipeed_spmod_tof.png\" height \"250\" /> ## Resource Link Resource Website www.sipeed.com Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) Wiki [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed model shop [https://maixhub.com/](https://maixhub.com/) SDK Relevant information [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) HDK Relevant information [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) E mail(Technical Support and Business Cooperation) [Support@sipeed.com](mailto:support@sipeed.com) telgram link [https://t.me/sipeed](https://t.me/sipeed) "},"/hardware/en/maix/modules_spmod/spmod_micarray.html":{"title":"SPMOD - MicArray","content":"# SPMOD MicArray ## Overview <img src \"../../assets/spmod/spmod_micarray/sp_micarray.png\" align \"right\" width \"\" height \"500\" /> SPMOD_MicArray(Microphone array module) uses RY3708(DC DC)Boost Module ## SPMOD MicArray Introduction Using **Sipeed SPMOD** interface(2.54mm * 8PIN )，unified MaixPy board interface Transfer the SP MOD interface to the FPC, and use the FPC to connect to the microphone array board 3.3V to 5V boost regulator(DC DC)(RY3708)，easily drive microphone arrays. Use the Grove interface to control the LED on the microphone array module. It needs to be used with the SIPEED MICARRAY module. Size:35.0\\*10.0\\*11.2mm ### BOOST DC DC RY3708 module Introduction Features： Output voltage range 5.1V ±0.2V Supply voltage of external power supply \t3.3V ±0.2V Supply current of external power supply Depends on the working conditions of the module, usually less than 500mA Range of working temperature 40℃ ~ 85℃ > 1.2MHz Fixed Switching Frequency,Internal 4A Switch Current Limit, Thermal Shutdown,Integrated 80mΩ Power MOSFET ### SPMOD_MicArray pin description: Pin Name Type Description 1 GND G Ground 2 D2 I Mic_D0 3 D3 I Mic_D2 4 D0 I Mic_WS 5 3V3 V Power supply(3.3V) 6 D4 I Mic_D1 7 D5 I Mic_D3 8 D1 I Mic_BCK 9 CK I Serial clock pin to control LED 10 DA I Data clock pin to control LED <img src \"\" width \"300\" /> ## Usage 待补充 ## Outlook SPMOD_MicArray Size drawing: <img src \"../../assets/spmod/spmod_micarray/sipeed_spmod_micarray.png\" height \"250\" /> ## Resource Link Resource Website www.sipeed.com Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) Wiki [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed model shop [https://maixhub.com/](https://maixhub.com/) SDK Relevant information [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) HDK Relevant information [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) E mail(Technical Support and Business Cooperation) [Support@sipeed.com](mailto:support@sipeed.com) telgram link [https://t.me/sipeed](https://t.me/sipeed) "},"/hardware/en/maix/modules_spmod/spmod_weather.html":{"title":"SPMOD - Weather","content":"# SPMOD Weather ## Overview <img src \"../../assets/spmod/spmod_weather/demo.gif\" align \"right\" width \"500\" /> SPMOD Weather (Weather station module), Integrated Magnetic sensor (QMC7983) and Humidity sensor (BME280) ## SPMOD Weather Introduction Using **Sipeed SPMOD** interface(2.54mm * 8PIN ),unified MaixPy board interface Connect to the board through the SP MOD I2C interface Magnetic sensor: QMC7983 is a 3 axis single chip magnetic sensor integrated with AMR and ASIC, I2C interface with standard mode and rapid mode,Stable sensitivity in a large operating temperature range, low power consumption (75uA). Sensitivity: ±30 Gauss Humidity sensor: BME280 is a humidity sensor that can measure relative humidity, barometric pressure and ambient temperature Size:25.0\\*10\\*2.9mm ## Sensor Introduction: Magnetic sensor QMC7983 Supply voltage of external power supply 2.6V~3.6V Supply current of external power supply 70uA Sleep Status of Current <1uA Sensitivity ±30 Gauss humidity sensor LSB/mG RMS Noise 2 mG Interface I2C,default address 0x2C (Select resistance adjustment) Humidity sensor BME280 Supply voltage of external power supply 1.71V~3.6V Supply current of external power supply <633uA Sleep Status of Current <5uA Humidity sensor： Response time（𝜏63％） 1s Accuracy tolerance ±3％ relative humidity Hysteresis < 2％ relative humidity Pressure sensor： RMS Noise 0.2 Pa(equiv. to 1.7cm) Temperature coefficient offset ±1.5 Pa/K(equiv. to ±12.6cm at 1 °C temperature change) Interface I2C,default address 0x76 Select resistance adjustment) ### SPMOD_Weather pin description : Pin Name Type Description 1 GND G Ground 2 NC NC Not connected 3 NC NC Not connected 4 SDA I/O Receive data signal 5 3V3 V Power supply(3.3V) 6 NC NC Not connected 7 NC NC Not connected 8 SCL I Transmit clock signal <img src \"../../assets/spmod/spmod_weather/back.png\" width \"300\" /> ## Mode of connection: MCU:FUN(IO) SP_RFID : : : : I2C:SDA(IO_7) SDA NC(IO_15) NC NC(IO_20) IRQ NC(IO_21) NC GPIOHS(IO_8) SHT I2C:SCL(IO_6) SCL 2.8~3.5V 3.3V GND GND <img src \"../../assets/spmod/spmod_weather/connection.png\" height \"250\"> ## Usage * Process 1. Send AT instruction 2. Receive the reply 3. Determines whether the setup was successful ### C: ```c fpioa_set_function(Weather_SCL, FUNC_I2C0_SCLK + Weather_I2C_DEVICE * 2); // Weather_SCL: 6; fpioa_set_function(Weather_SDA, FUNC_I2C0_SDA + Weather_I2C_DEVICE * 2); // Weather_SDA: 7; maix_i2c_init(Weather_I2C_DEVICE, 7, 400000); // Weather_I2C_DEVICE: 0; rslt qmc_init(); // Magnetic sensor QMC7983 init rslt bme280_init(&dev); // Temperature, humidity and pressure sensors BME280 init stream_sensor_data_normal_mode(&dev); // read and print sensor data ``` ### MaixPy: ```python i2c_bus I2C(I2C.I2C0, freq 100*1000, scl 6, sda 7) # scl: io_6, sda: io_7 weather SPWeather(i2c i2c_bus) # create sp_weather while 1: time.sleep_ms(500) print(weather.qmc_read_xyz) # QMC7983 read data print(weather.bme_values) # BME280 read data ``` ## Runtime environments: Language Board SDK/Firmware version : : : : : C MaixCube kendryte standalone sdk v0.5.6 MaixPy MaixCube maixpy v0.5.1 ## Result * C <img src \"../../assets/spmod/spmod_weather/log_c.png\" height \"200\"> * MaixPy <img src \"../../assets/spmod/spmod_weather/log_py.png\" height \"200\"> ## Outlook SPMOD_Weather Size drawing: <img src \"../../assets/spmod/spmod_weather/sipeed_spmod_weather.png\" height \"250\" /> ## Resource Link Resource Website www.sipeed.com Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) Wiki [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed model shop [https://maixhub.com/](https://maixhub.com/) SDK Relevant information [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) HDK Relevant information [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) E mail(Technical Support and Business Cooperation) [Support@sipeed.com](mailto:support@sipeed.com) telgram link [https://t.me/sipeed](https://t.me/sipeed) "},"/hardware/en/maix/modules_spmod/README_en.html":{"title":"Sipeed HardWare WIKI","content":"# Sipeed HardWare WIKI [English[中文](./index.html)] ## K210 Mocules * [K210 Mocules](./en/core_modules/k210_core_modules.html) [M1/M1w](./en/core_modules/k210_core_modules.html) [M1n](./en/core_modules/k210_core_modules.html) ## MF face recognition module * [MF face recognition module] [MF0 && MF0 Dock](./en/mf_ml_module/mf0_ml_module.html) [MF1 && MF2](./en/mf_ml_module/mf1_ml_module.html) [MF4 && MF5](./en/mf_ml_module/mf5_product.html) [MF face recognition module Precautions](./mf_ml_module/mf_precautions.html) [MF module update firmwave](./en/mf_ml_module/mf_update_firmwave.html) ## MaixPy Develop Kit Board * [MaixPy Develop Kit Board](./en/maixpy_develop_kit_board/develop_kit_board.html) [Maix Go](./en/maixpy_develop_kit_board/maix_go.html) [Maix Dock](./en/maixpy_develop_kit_board/maix_dock.html) [Maix Bit](./en/maixpy_develop_kit_board/maix_bit.html) [Maix Duino](./en/maixpy_develop_kit_board/maix_duino.html) [Maix Cube](./en/maixpy_develop_kit_board/maix_cube.html) [Maix Amigo](./en/maixpy_develop_kit_board/maix_Amigo.html) ## Lichee (Linux) Lichee Zero [Lichee Zero]() [Lichee Nano]() [Lichee Zero Plus]() [Lichee RV]() ## Lichee Tang(FPGA) [Lichee Tang Primer]() [Lichee Tang Nano]() ## Longan (MCU) [longan Nano]() ## Peripheral Module * [Grove Module]() [Grove RGB LED]() * [SP MOD Module]() Adapter [SP Extender](./en/modules_spmod/spmod_extender.html) [SP Grove](./en/modules_spmod/spmod_grove.html) [SP FPC](./en/modules_spmod/spmod_fpc.html) [SP MicArray](./en/modules_spmod/spmod_micarray.html) [SP JoyStick](./en/modules_spmod/spmod_joystick.html) [SP Servo](./en/modules_spmod/spmod_servo.html) [SP Type C]() Sensor [SP Weather](./en/modules_spmod/spmod_weather.html) [SP TOF 1P](./en/modules_spmod/spmod_tof.html) Communication [SP BLE](./en/modules_spmod/spmod_bt.html) [SP LoRa](./en/modules_spmod/spmod_lora.html) [SP PSRAM](./en/modules_spmod/spmod_psram.html) [SP RFID](./en/modules_spmod/spmod_rfid.html) [SP Ethernet](./en/modules_spmod/spmod_ethernet.html) Display [SP LCD 1.14](./en/modules_spmod/spmod_lcd1.14.html) [SP Eink](./en/modules_spmod/spmod_eink.html) ## Module && Debugger ### Debugger [Sipeed RV Debugger]() [Dual serial port USB module]() ### Module Camera(Sensor) [OV2640]() [OV2640 M12]() [(GC0328)]() [Dual camera module(GC0328)]() [OV7740]() [Microphone module]() [Single microphone module]() [Microphone array]() [LCD 1.3'/2.4'/2.8'/4.3'/5']()"},"/hardware/en/maix/modules_spmod/spmod_fpc.html":{"title":"SPMOD - FPC","content":"# SPMOD FPC ## Overview <img src \"../../assets/spmod/spmod_fpc/sp_fpc.png\" align \"right\" width \"\" height \"300\" /> SPMOD_FPC( SPMOD extension module ) ## SPMOD FPC Introduction Using **Sipeed SPMOD** interface(2.54mm * 8PIN )，unified MaixPy board interface As an extension module, easily extend the SP MOD interface with FPC. Provide a pair of SP MOD to FPC adapters(Male and female), one FPC cable(10P). Size:15.0\\*10.0\\*3.3mm ## Introduction Features: SP MOD to FPC10 Adapters(Male and female)\t Bi directional transformation of SP MOD to FPC FPC\tcable(10P) Connect two adapters Supply voltage of external power supply Depends on connected modules Supply current of external power supply Depends on the working conditions of the module, usually less than 1000mA Range of working temperature 30℃ ~ 85℃ ## Outlook SPMOD_FPC Size drawing: <img src \"../../assets/spmod/spmod_fpc/sipeed_spmod_fpc.png\" height \"250\" /> ## Resource Link Resource Website www.sipeed.com Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) Wiki [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed model shop [https://maixhub.com/](https://maixhub.com/) SDK Relevant information [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) HDK Relevant information [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) E mail(Technical Support and Business Cooperation) [Support@sipeed.com](mailto:support@sipeed.com) telgram link [https://t.me/sipeed](https://t.me/sipeed) "},"/hardware/en/maix/modules_spmod/spmod_bt.html":{"title":"SPMOD - BT","content":"# SPMOD BT ## Overview <img src \"../../assets/spmod/spmod_bt/sp_bt.png\" alt \"XXX\" style \"zoom:40%;\" /> SPMOD BT(Bluetooth module) uses YDJ 23. ## SPMOD BLE Introduction Using **Sipeed SPMOD** interface(2.54mm * 8PIN )，unified MaixPy board interface Using SP MOD UART to communicate with Bluetooth module JDY 23 Bluetooth module:Support BLE 5.0(Compatible with BLE4.0、BLE4.2).Communication interface adopts UART interface. The module supports AT command control. It has ultra low power design and high reliability design. Two built in LED，making module status easier to see. Size:25.6\\*20.2\\*3.2mm ### JDY 23 Introduction: Features: Working Frequency: 2.4GHz Transmission Power: 4db(maixmun) Communication Interface: UART Supply voltage of external power supply : 1.8V~3.6V Range of working temperature : 40℃ 80℃ Antenna: Built in PCB antenna Reception Sensitivity: 97dbm Support master slave: Slave Bluetooth Version: BLE 5.0(Compatible with BLE4.0、BLE4.2) Awakening Current State: 800uA(Transmission) Sleep Status of Current: <50uA (Transmission) Deep Sleep of Current: 9uA (Not transmission) Default baud rate: 9600 ### SPMOD_BT pin description : Pin Name Type Description 1 GND G Ground 2 AWK I/O Sleep wake up pin (active low) 3 STA I/O The status of the pin connection 4 RX I Serial input pin (TTL level) 5 3V3 V Power supply(3.3V) 6 NC Not connected 7 RST I/O Reset (active low) 8 TX O Serial output pin (TTL level) <img src \"../../assets/spmod/spmod_bt/back.jpg\" height \"250\" /> Mode of connection: MCU:FUN(IO) SP_BT : : : : UART:TX(IO_7) RX USRT:RX(IO_6) TX 1.8 3.3V 3.3V GND GND <img src \"../../assets/spmod/spmod_bt/connection.png\" height \"250\"> ### AT instruction list: Order Description AT+POWR Get transmit power AT+RST\t Soft reset AT+MAC\t Display MAC address AT+NAME Display Transmission name AT+HOSTEN Slave mode or IBEACON work mode AT+IBUUID UUID of IBEACON AT+DISC Disconnect AT+SLEEP Configures the Sleep mode AT+MTU Set the serial port for the APP to send a long number of packets *See [JDY 23 V2.1.pdf](https://cn.dl.sipeed.com/shareURL/MAIX/HDK/sp_mod/sp_bt) for more information* ## Usage * Process 1. Send AT instruction 2. Receive the reply 3. Determines whether the setup was successful ### C : ```c // set uart rx/tx func to io_6/7 fpioa_set_function(6, FUNC_UART1_RX + UART_NUM * 2); fpioa_set_function(7, FUNC_UART1_TX + UART_NUM * 2); uart_init(UART_DEVICE_1); uart_configure(UART_DEVICE_1, 9600, 8, UART_STOP_1, UART_PARITY_NONE); //change the name of sp_bt module to MAIXCUBE uart_send_data(UART_NUM, \"AT+NAMEMAIXCUBE\\r\\n\", strlen(\"AT+NAMEMAIXCUBE\\r\\n\")); //send AT order msleep(100); ret uart_receive_data(UART_NUM, rcv_buf, sizeof(rcv_buf)); //receive response if(ret ! 0 && strstr(rcv_buf, \"OK\")) { printk(LOG_COLOR_W \"set name success!\\r\\n\"); } // get the name of sp_bt module uart_send_data(UART_NUM, \"AT+NAME\\r\\n\", strlen(\"AT+NAME\\r\\n\")); //send AT order msleep(100); ret uart_receive_data(UART_NUM, rcv_buf, sizeof(rcv_buf)); //receive response if(ret ! 0 && strstr(rcv_buf, \"NAME\")) { printk(LOG_COLOR_W \"get name success!\\r\\n\"); } ``` ### MaixPy : ```python # set uart rx/tx func to io_6/7 fm.register(6,fm.fpioa.UART1_RX) fm.register(7,fm.fpioa.UART1_TX) uart UART(UART.UART1,9600,8,1,0,timeout 1000, read_buf_len 4096) #change the name of sp_bt module to MAIXCUBE uart.write(\"AT+NAMEMAIXCUBE\\r\\n\") #send AT order time.sleep_ms(100) read_data uart.read() #receive response if read_data: read_str read_data.decode('utf 8') count read_str.count(\"OK\") if count ! 0: uart.write(\"set name success\\r\\n\") # get the name of sp_bt module uart.write(\"AT+NAME\\r\\n\") #send AT order time.sleep_ms(100) read_data uart.read() #receive response if read_data: read_str read_data.decode('utf 8') count read_str.count(\"NAME\") if count ! 0: uart.write(\"get name success\\r\\n\") ``` *Note that you must add \\r\\n after sending AT instruction* ### Result: Using [BLE Utility](../../tools/bledebugger.apk) to connect the device to do the send and receive test results are as follows: <center class \"third\"> <img src \"../../assets/spmod/spmod_bt/res.png\" height \"250\"/><img src \"../../assets/spmod/spmod_bt/res1.png\" height \"250\"/> </center> ### Runtime environments: Language Board SDK/Firmware version : : : : : C MaixCube kendryte standalone sdk v0.5.6 MaixPy MaixCube maixpy v0.5.1 ## Outlook SPMOD_BLE Size drawing: <img src \"../../assets/spmod/spmod_bt/sipeed_spmod_bt.png\" height \"250\" /> ## Resource Link Resource Website www.sipeed.com Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) Wiki [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed model shop [https://maixhub.com/](https://maixhub.com/) SDK Relevant information [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) HDK Relevant information [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) E mail(Technical Support and Business Cooperation) [Support@sipeed.com](mailto:support@sipeed.com) telgram link [https://t.me/sipeed](https://t.me/sipeed) "},"/hardware/en/maix/modules_spmod/spmod_psram.html":{"title":"SPMOD - PSRAM","content":"# SPMOD PSRAM ## Overview <img src \"../../assets/spmod/spmod_psram/sp_psram.png\" align \"right\" width \"\" height \"500\" /> SPMOD_PSRAM(PSRAM module) uses IPS6404L SQ PSRAM. ## SPMOD PSRAM Introduction Using **Sipeed SPMOD** interface(2.54mm * 8PIN )，unified MaixPy board interface Connect to the board through the SP MOD SPI/QPI interface Pseudo−SRAM:IPS6404L SQ is 64 Mbit of SPI/QPI (serial/quad parallel interface) Pseudo−SRAM device. Working frequency:104MHz CLK period:30.3ns Size:15.0\\*10.0\\*13.3mm ### IPS6404L SQ Introduction： Features: Supply voltage of external power supply 2.7V~3.6V Supply current of external power supply 10mA Range of working temperature 30℃~85℃ Sleep Status of Current <250μA Working frequency 104Mhz Response time of SPI read 30.3ns Response time of other operations 9.3ns interface PI/QPI optional, default SPI ### SPMOD_PSRAM pin description: Pin Name Type Decription 1 GND G Ground 2 CS I Chip Select input pin 3 D1 I/0 Master In Slave Out 4 D3 I/O No function (IO3 in QSPI mode) 5 3V3 V Power supply(3.3V) 6 SCK I SPI clock pin 7 D0 I/0 Master Out Slave In (IO0 in QSPI mode) 8 D2 I/O No function (IO2 in QSPI mode) <img src \"\" width \"300\" /> ## Usage wait upgrade ## Outlook SPMOD_PSRAM Size drawing: <img src \"../../assets/spmod/spmod_psram/sipeed_spmod_psram.png\" height \"250\" /> ## Resource Link Resource Website www.sipeed.com Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) Wiki [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed model shop [https://maixhub.com/](https://maixhub.com/) SDK Relevant information [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) HDK Relevant information [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) E mail(Technical Support and Business Cooperation) [Support@sipeed.com](mailto:support@sipeed.com) telgram link [https://t.me/sipeed](https://t.me/sipeed) "},"/hardware/en/maix/modules_spmod/spmod_eink.html":{"title":"SPMOD - Eink","content":"# SPMOD Eink ## Overview <img src \"../../assets/spmod/spmod_eink/sp_eink.png\" alt \"XXX\" style \"zoom:40%;\" /> SPMOD_Eink(E paper display module) uses GDEW0154M09 E paper display. ## SPMOD Eink Introduction Using **Sipeed SPMOD** interface(2.54mm * 8PIN )，unified MaixPy board interface Connect to the screen through the SP MOD SPI interface E paper display module：GDEW0154M09 is a 1.54\" E paper display，with SPI interface，and has 24P FPC(0.5mm pitch). Support 1 bit Black/Write full display capabilities Display Resolution：200x200 Size：35*30*3.8mm ### GDEW0154M09 E paper display Introduction Features： Supply voltage of external power supply 2.3V~3.6V Supply current of external power supply 1~3mA Range of working temperature 40℃~85℃ Sleep Status of Current <5uA Screen Size 1.54 inch Active Area 27.6mm*27.6mm Display Resolution 200*200 Color 1 bit Black/Write full display capabilities interface 24P FPC (0.5mm pitch) > An integrated circuit contains gate buffer, source buffer, interface, timing control logic, oscillator, DC DC, SRAM, LUT, VCOM, and border are supplied with each panel. ### SPMOD_Eink pin description ： Pin Name Type Description 1 GND G Ground 2 CS I Chip Select input pin 3 D/C I Data/Command control pin 4 RES I Reset (active low) 5 3V3 V Power supply(3.3V) 6 SCK I SPI clock pin 7 SI I/O Master Out Slave In 8 BSY O Busy status output pin <img src \"../../assets/spmod/spmod_eink/sp_eink_back.png\" height \"300\" /> Mode of connection:： MCU:FUN(IO) SP_Eink : : : : GPIOHS(IO_7) RES SPIOHS(IO_15) D/C SPIOHS(IO_20) CS SPI:SCK(IO_21) SCK SPI:MOSI(IO_8) SI GPIOHS(IO_6) BSY 2.3 3.6V 3.3V GND GND <img src \"../../assets/spmod/spmod_eink/connection.png\" height \"250\"> ### AT instruction list Instruction description : : : : 0x10 start transport b/w data 0x13 start transport r/w data 0x12 refresh data to screen *See [GDEW0154M09.pdf](https://cn.dl.sipeed.com/shareURL/MAIX/HDK/sp_mod/sp_eink) for more information* ## Usage * Process 1.initializatin 2.create an image and fill it 3.send image and refresh ### C： ```c spi_init(1, SPI_WORK_MODE_0, SPI_FF_STANDARD, DATALENGTH, 0); fpioa_set_function(SPI_Eink_CS_PIN_NUM, FUNC_SPI1_SS0); // SPI_Eink_CS_PIN_NUM: 20; fpioa_set_function(SPI_Eink_SCK_PIN_NUM, FUNC_SPI1_SCLK); // SPI_Eink_SCK_PIN_NUM: 21; fpioa_set_function(SPI_Eink_MOSI_PIN_NUM, FUNC_SPI1_D0); // SPI_Eink_MOSI_PIN_NUM: 8; fpioa_set_function(SPI_Eink_DC_PIN_NUM, FUNC_GPIOHS0 + SPI_Eink_DC_GPIO_NUM); // SPI_Eink_DC_PIN_NUM: 21; fpioa_set_function(SPI_Eink_RST_PIN_NUM, FUNC_GPIOHS0 + SPI_Eink_RST_GPIO_NUM); // SPI_Eink_RST_PIN_NUM: 7; fpioa_set_function(SPI_Eink_BL_PIN_NUM, FUNC_GPIOHS0 + SPI_Eink_BL_GPIO_NUM); // SPI_Eink_BL_PIN_NUM: 6; gpiohs_set_drive_mode(SPI_Eink_DC_GPIO_NUM, GPIO_DM_OUTPUT); gpiohs_set_drive_mode(SPI_Eink_RST_GPIO_NUM, GPIO_DM_OUTPUT); gpiohs_set_pin(SPI_Eink_DC_GPIO_NUM, GPIO_PV_HIGH); gpiohs_set_pin(SPI_Eink_RST_GPIO_NUM, GPIO_PV_HIGH); gpiohs_set_drive_mode(SPI_Eink_BL_PIN_NUM, GPIO_DM_INPUT_PULL_UP); gpiohs_set_pin_edge(SPI_Eink_BL_PIN_NUM, GPIO_PE_BOTH); EPD_DisplayInit(); //EPD init //Paint initialization Paint_NewImage(BlackImage, EPD_WIDTH, EPD_HEIGHT, 270, WHITE); //Set screen size and display orientation Paint_SelectImage(BlackImage); //Set the virtual canvas data storage location Paint_Clear(WHITE); //clear paint Paint_DrawString_EN(0, 0, \"sipeed\", &Font8, WHITE, BLACK); //5*8 Paint_DrawString_EN(0, 10, \"sipeed\", &Font12, WHITE, BLACK); //7*12 Paint_DrawString_EN(0, 25, \"sipeed\", &Font16, WHITE, BLACK); //11*16 Paint_DrawString_EN(0, 45, \"sipeed\", &Font20, WHITE, BLACK); //14*20 Paint_DrawString_EN(0, 80, \"sipeed\", &Font24, WHITE, BLACK); //17*24 EPD_FullDisplay(BlackImage, BlackImage, 0); //display image ``` ### MaixPy： ```python spi1 SPI(SPI.SPI1, mode SPI.MODE_MASTER, baudrate 600 * 1000, polarity 0, phase 0, bits 8, firstbit SPI.MSB, sck 21, mosi 8) fm.register(20, fm.fpioa.GPIOHS20, force True) # SPI_Eink_SS_PIN_NUM: 20; fm.register(15, fm.fpioa.GPIOHS15, force True) # SPI_Eink_DC_PIN_NUM: 15; fm.register(6, fm.fpioa.GPIOHS6, force True) # SPI_Eink_BUSY_PIN_NUM: 6; fm.register(7, fm.fpioa.GPIOHS7, force True) # SPI_Eink_RST_PIN_NUM: 7; cs GPIO(GPIO.GPIOHS20, GPIO.OUT) dc GPIO(GPIO.GPIOHS15, GPIO.OUT) busy GPIO(GPIO.GPIOHS6, GPIO.IN, GPIO.PULL_DOWN) rst GPIO(GPIO.GPIOHS7, GPIO.OUT) epd SPEink(spi1, cs, dc, rst, busy, SPEink_WIDTH, SPEink_HEIGHT, SPEink_ROTATION) epd.init() img image.Image() img img.resize(200, 200) img.draw_line(0, 0, 100, 100) epd.display(img) ``` ### Runtime environments: Language Board SDK/Firmware version : : : : : : C MaixCube kendryte standalone sdk v0.5.6 MaixPy MaixCube maixpy v0.5.1 *The MaixPy firmware is recommended to compile from the latest source* ### Result * C <img src \"../../assets/spmod/spmod_eink/sp_eink_c.png\" height \"250\" /> * MaixPy <img src \"../../assets/spmod/spmod_eink/sp_eink_py.png\" height \"250\" /> ### Transplant The following parameters need to be modified * C ```c // board_config.h #define SPI_INDEX 1 #define SPI_SCLK_RATE 600 * 1000 #define SPI_CHIP_SELECT_NSS 0 //SPI_CHIP_SELECT_0 #define SPI_Eink_CS_PIN_NUM 20 #define SPI_Eink_SCK_PIN_NUM 21 #define SPI_Eink_MOSI_PIN_NUM 8 #define SPI_Eink_DC_PIN_NUM 15 #define SPI_Eink_BL_PIN_NUM 6 #define SPI_Eink_RST_PIN_NUM 7 #define SPI_Eink_DC_GPIO_NUM 15 #define SPI_Eink_BL_GPIO_NUM 6 #define SPI_Eink_RST_GPIO_NUM 7 ``` * MaixPy ```python ################### config ################### SPI_Eink_NUM SPI.SPI1 SPI_Eink_DC_PIN_NUM const(15) SPI_Eink_BUSY_PIN_NUM const(6) SPI_Eink_RST_PIN_NUM const(7) SPI_Eink_CS_PIN_NUM const(20) SPI_Eink_SCK_PIN_NUM const(21) SPI_Eink_MOSI_PIN_NUM const(8) SPI_Eink_FREQ_KHZ const(600) ############################################## ## Outlook SPMOD_Eink Size drawing: <img src \"../../assets/spmod/spmod_eink/sipeed_spmod_eink.png\" height \"250\" /> ## Resource Link Resource Website www.sipeed.com Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) Wiki [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed model shop [https://maixhub.com/](https://maixhub.com/) SDK Relevant information [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) HDK Relevant information [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) E mail(Technical Support and Business Cooperation) [Support@sipeed.com](mailto:support@sipeed.com) telgram link [https://t.me/sipeed](https://t.me/sipeed) "},"/hardware/en/maix/modules_spmod/spmod_servo.html":{"title":"SPMOD - SERVO","content":"# SPMOD SERVO ## Overview <img src \"../../assets/spmod/spmod_servo/sp_servo.png\" align \"right\" width \"\" height \"500\" /> SPMOD_SERVO (SERVO module). ## SPMOD SERVO Introduction Using **Sipeed SPMOD** interface(2.54mm * 8PIN )，unified MaixPy board interface Using SP MOD to control up to 6 independent 9g servos Servo interface uses 3P 2.54 pitch pin header Independent external 5V power supply, will not take power from SP MOD Built in LED，making module status easier to see. Size:35.0\\*20\\*1.6mm Features: PWM 9g servo interface *6 In the case of an external 4.8 6V power supply, 6 servos can be connected and controlled separately Supply voltage of external power supply 4.8V 6.0V Supply current of external power supply Depends on the working conditions of the module, usually less than 1500mA Range of working temperature 40℃ ~ 85℃ ### SPMOD_SERVO pin description: <img src \"../../assets/spmod/spmod_servo/sp_servo_pin.png\" width \"500\" /> ## Usage 待更新 ## Outlook SPMOD_SERVO Size drawing: <img src \"../../assets/spmod/spmod_servo/sipeed_spmod_servo.png\" height \"250\" /> ## Resource Link Resource Website www.sipeed.com Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) Wiki [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed model shop [https://maixhub.com/](https://maixhub.com/) SDK Relevant information [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) HDK Relevant information [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) E mail(Technical Support and Business Cooperation) [Support@sipeed.com](mailto:support@sipeed.com) telgram link [https://t.me/sipeed](https://t.me/sipeed) "},"/hardware/en/maix/modules_spmod/spmod_grove.html":{"title":"SPMOD - Grove","content":"# SPMOD Grove ## Overview <img src \"../../assets/spmod/spmod_grove/sp_grove.png\" align \"right\" width \"\" height \"400\" /> SPMOD_Grove(GROVE module) ## SPMOD Grove Introduction Using **Sipeed SPMOD** interface(2.54mm * 8PIN )，unified MaixPy board interface Ass an Expansion board，it povides three standard Grove interfaces. All data cables are provide external pull ups. The power supply can handle up to 1000mA Size:35.0\\*10.0\\*2.1mm ## Introduction Features: Grove connector (HY 2.0mm 4P connector)*3 Used to connect Grove 4*2 pin，2.54mm pitch: *1 Used to connect with SP MOD interface Supply voltage of external power supply Depends on connected modules Supply current of external power supply Depends on the working conditions of the module, usually less than 1000mA Range of working temperature 30℃ ~ 85℃ ## Outlook SPMOD_Grove Size drawing: <img src \"../../assets/spmod/spmod_grove/sipeed_spmod_grove.png\" height \"250\" /> ## Resource Link Resource Website www.sipeed.com Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) Wiki [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed model shop [https://maixhub.com/](https://maixhub.com/) SDK Relevant information [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) HDK Relevant information [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) E mail(Technical Support and Business Cooperation) [Support@sipeed.com](mailto:support@sipeed.com) telgram link [https://t.me/sipeed](https://t.me/sipeed) "},"/hardware/en/maix/modules_spmod/spmod_ethernet.html":{"title":"SPMOD - Ethernet","content":"# SPMOD Ethernet ## Overview <img src \"../../assets/spmod/spmod_ethernet/sp_ethernet.png\" align \"right\" width \"\" height \"500\" /> SPMOD_Ethernet(Ethernet module) uses W5500 chip. ## SPMOD Ethernet Introduction Using **Sipeed SPMOD** interface(2.54mm * 8PIN )，unified MaixPy board interface Connect to the board through the SP MOD SPI interface Master chip:The W5500 chip is a Hardwired TCP/IP embedded Ethernet controller The theoretical SPI design speed is 80MHz \t10BaseT/100BaseTX Ethernet PHY embedded, Supports Auto Negotiation (Full and half duplex, 10 and 100 based ) Size:35.76\\*19.74\\*8.7mm ### W5500 chip Introduction Features: Supply voltage of external power supply 2.97V~3.63V Supply current of external power supply <132mA Range of working temperature 40℃~85℃ Sleep Status of Current <15mA SPI Clock The theoretical design speed is 80MHz TCP/IP protocol Support TCP,UDP,ICMP,IPv4,ARP,IGMP,PPPoE protocols > Supports 8 independent sockets simultaneously ,Internal 32Kbytes Memory for TX/RX Buffers ,Supports Wake on LAN over UDP ,10BaseT/100BaseTX Ethernet PHY embedded ,Support Auto Negotiation (Full and half duplex, 10 and 100 based ) ,Not support auto MDIX feature ### SPMOD_Ethernet pin description: Pin Name Type Description 1 GND G Ground 2 CS I Chip Select input pin 3 SO I/0 Master In Slave Out 4 NC NC Not connected 5 3V3 V Power supply(3.3V) 6 SCK I SPI clock pin 7 SI I/0 Master Out Slave In 8 NC NC Not connected <img src \"\" width \"300\" /> ## Usage 待更新 ## Outlook SPMOD_Ethernet Size drawing: <img src \"../../assets/spmod/spmod_ethernet/sipeed_spmod_ethernet.png\" height \"250\" /> ## Resource Link Resource Website www.sipeed.com Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) Wiki [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed model shop [https://maixhub.com/](https://maixhub.com/) SDK Relevant information [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) HDK Relevant information [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) E mail(Technical Support and Business Cooperation) [Support@sipeed.com](mailto:support@sipeed.com) telgram link [https://t.me/sipeed](https://t.me/sipeed) "},"/hardware/en/maix/modules_spmod/spmod_extender.html":{"title":"SPMOD - Extender","content":"# SPMOD Extender ## Overview <img src \"../../assets/spmod/spmod_extender/sp_extender.png\" align \"right\" width \"\" height \"300\" /> SPMOD_Extender(8PIN SP MOD Expander) ## SPMOD Extender Introduction Using **Sipeed SPMOD** interface(2.54mm * 8PIN )，unified MaixPy board interface Using SP Extender to divide SP MOD into four interface，including three Two wire SP MOD interface and a Four wire SP MOD interface Size:35.0\\*20.0\\*1.6mm ## Introduction Features: Two wire SP MOD interface*3 Connect to the D0 and D1 on the SP MOD，Used as UART interface (Connect at most one device) or I2C interface(Connect at most three device) , can also be used as two independent GPIO Four wire SP MOD interface Connect to the D2 D5 on the SP MOD，Uusually used as SPI interface， can also be used as four independent GPIO Supply voltage of external power supply Depends on connected modules Supply current of external power supply Depends on the working conditions of the module, usually less than 1000mA Range of working temperature 40℃ ~ 85℃ ## Outlook SPMOD_Extender Size drawing: <img src \"../../assets/spmod/spmod_extender/sipeed_spmod_extender.png\" height \"250\" /> ## Resource Link Resource Website www.sipeed.com Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) Wiki [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed model shop [https://maixhub.com/](https://maixhub.com/) SDK Relevant information [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) HDK Relevant information [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) E mail(Technical Support and Business Cooperation) [Support@sipeed.com](mailto:support@sipeed.com) telgram link [https://t.me/sipeed](https://t.me/sipeed) "},"/hardware/en/maix/modules_spmod/spmod_rfid.html":{"title":"SPMOD - RFID","content":"# SPMOD RFID ## Overview <img src \"../../assets/spmod/spmod_rfid/sp_rfid.png\" style \"padding right:100px;\" align \"right\" width \"\" height \"500\" /> SPMOD_RFID (NFC module) uses FM17510 IC. ## SPMOD RFID Introduction Using **Sipeed SPMOD** interface(2.54mm * 8PIN )，unified MaixPy board interface Using SP MOD SPI to communicate with RFID module 64Byte TRANSCeiver buffer FIFO The RIFC IC is FM17510. Size:25.0\\*20.1\\*6.2mm ### FM17510 Introduction The FM17510 used in this module is a highly integrated non contact reader chip working at 13.56MHz. Supports non contact reader mode in accordance with ISO/IEC 14443 protocol, Features： Supports non contact reader mode in accordance with ISO/IEC 14443 protocol, Reader mode supports M1 encryption algorithm ISO14443 TYPEA supports communication rate: 106kbps， 212kbps， 424kbps Support SPI serial interface, up to 10Mbps Host interface independent power supply，voltage range: 2.2~3.6V Range of working temperature 40℃ ~ 85℃ 64Byte TRANSCeiver buffer FIFO. Interrupt output mode can be equipped with flexible Multiple low power modes: Soft powerdown Mode, Hard powerdown Mode, Deep powerdown Mode(Typical value 1uA) Support low power external card detection Programmable timer Built in oscillator circuit and external 27.12MHz crystal oscillator Wide voltage working range 2.2V~3.6V Built in CRC coprocessor programmed I/O ### SPMOD_RFID pin description: Pin Name Type Description 1 GND G Ground 2 CS I Chip Select input pin 3 SO I/O Master In Slave Out 4 NPD I Reset/Sleep control pin 5 3V3 V Power supply(3.3V) 6 SCK I SPI clock pin 7 SI I/O Master Out Slave In 8 IRQ O Interrupt output pin <img src \"../../assets/spmod/spmod_rfid/back.png\" height \"300\" /> Mode of connection: MCU:FUN(IO) SP_RFID : : : : NC(IO_7) NPD SPI:MISO(IO_15) SO SPI:SS0(IO_20) CS SPI:SCK(IO_21) SCK SPI:MOSI(IO_8) SI NC(IO_6) IRQ 2.2~3.6V 3.3V GND GND <img src \"../../assets/spmod/spmod_rfid/connection.png\" height \"250\"> ## Usage * Process 1. Initialization 2. Detected and bind card 3. Read or write data ### C: ```c fpioa_set_function(RFID_CS_PIN, FUNC_GPIOHS0 + RFID_CS_HSNUM); // RFID_CS_PIN: 20; fpioa_set_function(RFID_CK_PIN, FUNC_GPIOHS0 + RFID_CK_HSNUM); // RFID_CK_PIN: 21; fpioa_set_function(RFID_MO_PIN, FUNC_GPIOHS0 + RFID_MO_HSNUM); // RFID_MO_PIN: 8; fpioa_set_function(RFID_MI_PIN, FUNC_GPIOHS0 + RFID_MI_HSNUM); // RFID_MI_PIN: 15; gpiohs_set_drive_mode(spi_io_cfg.hs_cs, GPIO_DM_OUTPUT); gpiohs_set_drive_mode(spi_io_cfg.hs_clk, GPIO_DM_OUTPUT); gpiohs_set_drive_mode(spi_io_cfg.hs_mosi, GPIO_DM_OUTPUT); gpiohs_set_drive_mode(spi_io_cfg.hs_miso, GPIO_DM_INPUT); // detected card PcdRequest(0x52, type) // auth and bind... // read or write 16 bytes data from sector 0x11 PcdWrite(0x11, w_buf) PcdRead(0x11, &r_buf) ``` ### MaixPy: ```python # 20: CS_NUM; fm.register(20, fm.fpioa.GPIOHS20, force True) # set gpiohs work mode to output mode cs GPIO(GPIO.GPIOHS20, GPIO.OUT) # RFID_SCK: 21; RFID_SI:8; RFID_SO: 15; spi1 SPI(SPI.SPI1, mode SPI.MODE_MASTER, baudrate 600 * 1000, polarity 0, phase 0, bits 8, firstbit SPI.MSB, sck 21, mosi 8, miso 15) # Create an object of the class MFRC522 MIFAREReader MFRC522(spi1, cs) # detected and auth, bind... # read or write 16 bytes data from sector 0x11 MIFAREReader.MFRC522_Write(0x11, data) MIFAREReader.MFRC522_Read(0x11) ``` ### Runtime environments: 语言 开发板 SDK/固件版本 : : : : C MaixCube kendryte standalone sdk v0.5.6 MaixPy MaixCube maixpy v0.5.1 ### Result: * C <img src \"../../assets/spmod/spmod_rfid/c_log.png\" height \"200\" /> * MaixPy <img src \"../../assets/spmod/spmod_rfid/maixpy_log.png\" height \"200\" /> ### Transplant: The following parameters need to be modified * C ```c // board_config.h #define RFID_CS_PIN (20) #define RFID_CK_PIN (21) #define RFID_MO_PIN (8) #define RFID_MI_PIN (15) #define RFID_CS_HSNUM (20) #define RFID_CK_HSNUM (21) #define RFID_MO_HSNUM (8) #define RFID_MI_HSNUM (15) ``` * MaixPy ```python ################### config ################### CS_NUM const(20) SPI_FREQ_KHZ const(600) SPI_SCK const(21) SPI_MOSI const(8) SPI_MISO const(15) ############################################# ``` ## Outlook SPMOD_RFID Size drawing: <img src \"../../assets/spmod/spmod_rfid/sipeed_spmod_rfid.png\" height \"250\" /> ## Resource Link Resource Website www.sipeed.com Github [https://github.com/sipeed](https://github.com/sipeed) BBS [http://bbs.sipeed.com](http://bbs.sipeed.com) Wiki [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) Sipeed model shop [https://maixhub.com/](https://maixhub.com/) SDK Relevant information [dl.sipeed.com/MAIX/SDK](dl.sipeed.com/MAIX/SDK) HDK Relevant information [dl.sipeed.com/MAIX/HDK](dl.sipeed.com/MAIX/HDK) E mail(Technical Support and Business Cooperation) [Support@sipeed.com](mailto:support@sipeed.com) telgram link [https://t.me/sipeed](https://t.me/sipeed) "},"/hardware/en/maix/maixpy_develop_kit_board/maix_go.html":{"title":"Maix Go","content":"# Maix Go ## 教程&快速上手 <a href \"/soft/maixpy/zh/\" target \"_blank\"> MaixPy </a> ## 描述 MAIX Go开发板是SiPEED公司MAIX产品线的一员，基于嘉楠堪智科技的边缘智能计算芯片K210(RISC V架构 64位双核)设计的一款AIOT开发板。设计成数码相机的样式，板载Type C接口和USB UART电路，用户可以直接通过USB Type C线连接电脑进行开发，配置128Mbit Flash、LCD、DVP、Micro SD卡等接口并把所有IO引出，方便用户扩展。 ## 外观 <img src \"./../assets/dk_board/maix_go/Go.jpg\" alt \"Maxi go\" > ## 特性 MAIX Go开发板以K210作为核心单元，功能非常很强大，芯片内置64位双核处理器，拥有8M的片上SRAM，在Al机器视觉、听觉性能方便表现突出，内置多种硬件加速单元(KPU、FPU，FFT等)，总算力最高可达1TOPS，可以方便地实现各类应用场景的机器视觉/听觉算法,也可以进行语音方向扫描和语音数据输出的前置处理工作。 ## 应用 智能家居，机器人清洁器，智能扬声器，电子门锁，家庭监控等; 医学行业应用，如辅助诊断，医学图像识别; 智能工业应用，如工业机械，智能分拣，电气设备监控等; 教育机器人，智能互动平台，教育效率检查等教育应用; 农业应用，如农业监测，病虫害监测，自动控制等 ## 参数 <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\">K210 芯片基本参数</th> </tr> </thead> <tbody> <tr> <td>内核</td> <td>RISC V Dual Core 64bit, with FPU</td> </tr> <tr> <td>主频</td> <td>400MHz （可超频至600MHz）</td> </tr> <tr> <td>SRAM</td> <td>内置8M Byte</td> </tr> <tr> <td>图像识别</td> <td>QVGA@60fps/VGA@30fps</td> </tr> <tr> <td>语音识别</td> <td>麦克风阵列(8mics)</td> </tr> <tr> <td>网络模型</td> <td><li>支持YOLOv3<li>Mobilenetv2<li>TinyYOLOv2<li>人脸识别等</td> </tr> <tr> <td>深度学习框架</td> <td>支持TensorFlow \\ Keras \\ Darknet \\ Caffe 等主流框架</td> </tr> <tr> <td>外设</td> <td>FPIOA、 UART、 GPIO、 SPI、 I2C、I2S、 TIMER</td> </tr> <tr> <td>视频处理</td> <td><li>神经网络处理器(KPU)<li>FPU满足IEEE754 2008标准<li>音频处理器(APU)<li>快速傅里叶变换加速器(FFT)</td> </tr> </tbody> </table> <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\" >开发板参数</th> </tr> </thead> <td> 板载资源</td> <td><li>三向拨轮按键 <li>RGB灯*1<li>1W 小喇叭<li>USB to UART<li>16Mbit Flash*1</td> </tr> <tr> <td>板载接口</td> <td><li>USB Type C接口<li>24PIN DVP摄像头接口<li>24PIN LCD接口<li>MicroSD卡槽<li>麦克风阵列接口<li>部分IO排针引脚引出</td> </tr> <tr> <td>尺寸</td> <td>60*88mm</td> </tr> <tr> <td>供电电压</td> <td>5.0V @ 300mA（供电电流需大于300mA）</td> </tr> <tr> <td>工作温度</td> <td> 30℃ ~85C</td> </tr> </table> <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\">软件开发</th> <tr> </thead> <tr> <td>芯片操作系统</td> <td>FreeRTOS、RT Thread等</td> </tr> <tr> <td>开发环境</td> <td>MaixPy IDE、PlatformlO IDE、Arduino IDE等</td> </tr> <tr> <td>编程语言</td> <td>C，C++，MicroPython</td> </tr> </table> ## 资料下载 Sipeed Maix Go 资料下载：[Sipeed Maix Go](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed Maix GO) ## 产品技术支持 Maix系列产品可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"},"/hardware/en/maix/maixpy_develop_kit_board/maix_nano.html":{"title":"Maix nano","content":"# Maix nano ## 教程&快速上手 相关的使用教程入口<a href \"./../../../../soft/maixpy/zh/\" target \"_blank\"> MaixPy </a> ## 描述 MAIX Nano开发板是SiPEED公司MAIX产品线的一员，基于嘉楠堪智科技的边缘智能计算芯片K210(RISC V架构 64位双核)设计的一款AIOT开发板。开发板使用模块+底板方式设计，整洁小巧，板载Type C接口和USB UART电路，用户可以直接通过USB Type C线连接电脑进行开发，配置128Mbit Flash、LCD、DVP、Micro SD卡等接口并把所有IO引出，方便用户扩展。 ## 外观 <img src \"./../assets/dk_board/maix_nano/maix_nano.jpg\" alt \"Maxi nano\" > ## 特性 MAIX Nano开发板以K210作为核心单元，功能非常很强大，芯片内置64位双核处理器，拥有8M的片上SRAM，在Al机器视觉、听觉性能方便表现突出，内置多种硬件加速单元(KPU、FPU，FFT等)，总算力最高可达1TOPS，可以方便地实现各类应用场景的机器视觉/听觉算法,也可以进行语音方向扫描和语音数据输出的前置处理工作。 ## 应用 智能家居，机器人清洁器，智能扬声器，电子门锁，家庭监控等; 医学行业应用，如辅助诊断，医学图像识别; 智能工业应用，如工业机械，智能分拣，电气设备监控等; 教育机器人，智能互动平台，教育效率检查等教育应用; 农业应用，如农业监测，病虫害监测，自动控制等 ## 参数 ![maix_nano](./../assets/dk_board/maix_nano/maix_nano.png) <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\">K210 芯片基本参数</th> </tr> </thead> <tbody> <tr> <td>内核</td> <td>RISC V Dual Core 64bit, with FPU</td> </tr> <tr> <td>主频</td> <td>400MHz （可超频至600MHz）</td> </tr> <tr> <td>SRAM</td> <td>内置8M Byte</td> </tr> <tr> <td>图像识别</td> <td>QVGA@60fps/VGA@30fps</td> </tr> <tr> <td>语音识别</td> <td>麦克风阵列(8mics)</td> </tr> <tr> <td>网络模型</td> <td><li>支持YOLOv3<li>Mobilenetv2<li>TinyYOLOv2<li>人脸识别等</td> </tr> <tr> <td>深度学习框架</td> <td>支持TensorFlow \\ Keras \\ Darknet \\ Caffe 等主流框架</td> </tr> <tr> <td>外设</td> <td>FPIOA、 UART、 GPIO、 SPI、 I2C、I2S、 TIMER</td> </tr> <tr> <td>视频处理</td> <td><li>神经网络处理器(KPU)<li>FPU满足IEEE754 2008标准<li>音频处理器(APU)<li>快速傅里叶变换加速器(FFT)</td> </tr> </tbody> </table> <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\" >开发板参数</th> </tr> </thead> <td> 板载资源和接口</td> <td><li>DVP摄像头接口*1 <li>大部分IO通过金手指方式引出，方便二次开发<li>USB to UART<li>128Mbit Flash*1</td> </tr> <tr> <td>尺寸</td> <td>25.0*22.0mm</td> </tr> <tr> <td>供电电压</td> <td>5.0V @ 300mA（供电电流需大于300mA)</td> </tr> <tr> <td>工作温度</td> <td> 30℃ ~85C</td> </tr> </table> <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\">软件开发</th> <tr> </thead> <tr> <td>芯片操作系统</td> <td>FreeRTOS、Standrad development ki等</td> </tr> <tr> <td>开发环境</td> <td>MaixPy IDE、PlatformlO IDE、Arduino IDE等</td> </tr> <tr> <td>编程语言</td> <td>C，C++，MicroPython</td> </tr> </table> ## 资料下载 M1n 资料下载：[dl.sipeed.com](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed M1n) M1n 原理图下载：[Sipeed M1n Datasheet V1.0.pdf](https://dl.sipeed.com/fileList/MAIX/HDK/Sipeed M1n/Sipeed%20M1n%20Datasheet%20V1.0.pdf) ## 产品技术支持 Maix系列产品可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"},"/hardware/en/maix/maixpy_develop_kit_board/develop_kit_board.html":{"title":"Maix 系列开发板","content":"# Maix 系列开发板 ## Maix 系列开发板 目前 MaixPy 系列开发板有一下这几款型号: Maix Go Maix Dock Maix Duino Maix Bit Maix Cube Maix Amigo <style type \"text/css\"> th { background color: #fbfbfb; border: 2px solid #f1f1f1; } </style> ## 差异对比 <table> <tbody> <tr> <th width \"226\" scope \"col\" >&nbsp;</th> <th width \"226\" scope \"col\" ><a href \"maix_go.html\"><img src \"../assets/dk_board/maix_go/Go.jpg\" width \"200\" alt \"\"/></a></th> <th width \"226\" scope \"col\"><a href \"maix_bit.html\"><img src \"../assets/dk_board/maix_bit/Bit.png\" width \"200\" alt \"Bit\"/></a></th> <th width \"226\" scope \"col\"><a href \"maix_cube.html\"><img src \"../assets/dk_board/maix_cube/maix_cube_1.png\" width \"200\" alt \"maix_cube\"/></a></th> <th width \"226\" scope \"col\"><a href \"Maix_dock.html\"><img src \"../assets/dk_board/maix_dock/Dan_Dock.png\" width \"200\" alt \"\"/></a></th> <th width \"226\" scope \"col\"><a href \"maix_duino.html\"><img src \"../assets/dk_board/maix_duino/DSC_08141.png\" width \"200\" alt \"\"/></a></th> <th width \"226\" scope \"col\"><a href \"maix_Amigo.html\"><img src \"../assets/dk_board/maxi_amigo/amigo.png\" width \"200\" alt \"\"/></a> </th> </tr> <tr> <td>型号 </td> <td>Maix Go</td> <td>Maix Bit</td> <td>Maix Cube</td> <td><p>Maix Dock</p></td> <td>Maix Duino</td> <td>Maix Amigo</td> </tr> <tr> <td>USB IC</td> <td>STM32</td> <td>CH552/CH340</td> <td>GD32/CH552</td> <td>CH340</td> <td>CH552</td> <td>GD32</td> </tr> <tr> <td>核心模块</td> <td>M1</td> <td>M1</td> <td>M1n</td> <td>M1/M1W</td> <td>M1</td> <td>M1n</td> </tr> <tr> <td height \"48\">WIFI 功能</td> <td>M1W 模块集成 ESP8285</td> <td> </td> <td> </td> <td>Dock M1 (不支持 WIFI)<br/> Dock M1W(支持,M1W 模块集成 ESP8285)</td> <td>板载 ESP32 （支持 WIFI, 蓝牙功能暂时未支持）</td> <td> </td> </tr> </tbody> </table> ## 产品技术支持 Maix系列产品可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"},"/hardware/en/maix/maixpy_develop_kit_board/maix_bit.html":{"title":"Maix Bit","content":"# Maix Bit ## 教程&快速上手 相关的使用教程入口<a href \"/soft/maixpy/zh/\" target \"_blank\"> MaixPy </a> ## 描述 MAIX Bit开发板是SiPEED公司MAIX产品线的一员，基于嘉楠堪智科技的边缘智能计算芯片K210(RISC V架构 64位双核)设计的一款AIOT开发板。经典两侧排针设计，可以直接配合面包板使用，板载Type C接口和USB UART电路，用户可以直接通过USB Type C线连接电脑进行开发，配置128Mbit Flash、LCD、DVP、Micro SD卡等接口并把所有IO引出，方便用户扩展。 ## 外观 <img src \"./../assets/dk_board/maix_bit/Bit.png\" alt \"Maxi bit\" > ## 特性 MaixBit开发板以K210作为核心单元，功能非常很强大，芯片内置64位双核处理器，拥有8M的片上SRAM，在Al机器视觉、听觉性能方便表现突出，内置多种硬件加速单元(KPU、FPU，FFT等)，总算力最高可达1TOPS，可以方便地实现各类应用场景的机器视觉/听觉算法,也可以进行语音方向扫描和语音数据输出的前置处理工作。 ## 应用 智能家居，机器人清洁器，智能扬声器，电子门锁，家庭监控等; 医学行业应用，如辅助诊断，医学图像识别; 智能工业应用，如工业机械，智能分拣，电气设备监控等; 教育机器人，智能互动平台，教育效率检查等教育应用; 农业应用，如农业监测，病虫害监测，自动控制等 ## 参数 <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\">K210 芯片基本参数</th> </tr> </thead> <tbody> <tr> <td>内核</td> <td>RISC V Dual Core 64bit, with FPU</td> </tr> <tr> <td>主频</td> <td>400MHz （可超频至600MHz）</td> </tr> <tr> <td>SRAM</td> <td>内置8M Byte</td> </tr> <tr> <td>图像识别</td> <td>QVGA@60fps/VGA@30fps</td> </tr> <tr> <td>语音识别</td> <td>麦克风阵列(8mics)</td> </tr> <tr> <td>网络模型</td> <td><li>支持YOLOv3<li>Mobilenetv2<li>TinyYOLOv2<li>人脸识别等</td> </tr> <tr> <td>深度学习框架</td> <td>支持TensorFlow \\ Keras \\ Darknet \\ Caffe 等主流框架</td> </tr> <tr> <td>外设</td> <td>FPIOA、 UART、 GPIO、 SPI、 I2C、I2S、 TIMER</td> </tr> <tr> <td>视频处理</td> <td><li>神经网络处理器(KPU)<li>FPU满足IEEE754 2008标准<li>音频处理器(APU)<li>快速傅里叶变换加速器(FFT)</td> </tr> </tbody> </table> <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\" >开发板参数</th> </tr> </thead> <td> 板载资源</td> <td><li>按键*2 <li>RGB灯*1<li>MEMS Microphone*1<li>USB to UART<li>128Mbit Flash*1</td> </tr> <tr> <td>板载接口</td> <td><li>USB Type C接口<li>24PIN DVP摄像头接口<li>24PIN LCD接口<li>MicroSD卡槽<li>所有IO排针引脚引出</td> </tr> <tr> <td>尺寸</td> <td>53.3*25.4mm</td> </tr> <tr> <td>供电电压</td> <td>5.0V @ 300mA（供电电流需大于300mA)</td> </tr> <tr> <td>工作温度</td> <td> 30℃ ~85C</td> </tr> </table> <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\">软件开发</th> <tr> </thead> <tr> <td>芯片操作系统</td> <td>FreeRTOS、RT Thread等</td> </tr> <tr> <td>开发环境</td> <td>MaixPy IDE、PlatformlO IDE、Arduino IDE等</td> </tr> <tr> <td>编程语言</td> <td>C，C++，MicroPython</td> </tr> </table> ## 资料下载 Sipeed Maix Bit 资料下载：[Sipeed Maix Bit](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed Maix Bit) Sipeed Maix Bit 规格书下载：[Sipeed Maix Bit](https://dl.sipeed.com/fileList/MAIX/HDK/Sipeed Maix Bit/Specifications/Sipeed%20Maix Bit%20%E8%A7%84%E6%A0%BC%E4%B9%A6%20V2.0.pdf) Sipeed Maix Bit 原理图下载：<a href \"https://dl.sipeed.com/fileList/MAIX/HDK/Sipeed Maix Bit/Maix Bit%20V2.0(with%20MEMS%20microphone)/Maix Bit%20V2.0(Schematic).pdf\">Sipeed Maix Bit</a> ## 产品技术支持 Maix系列产品可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"},"/hardware/en/maix/maixpy_develop_kit_board/Maix_dock.html":{"title":"Maix Dock(M1/M1W)","content":"# Maix Dock(M1/M1W) ## 教程&快速上手 <a href \"/soft/maixpy/zh/\" target \"_blank\"> MaixPy </a> ## 描述 MAIX Dock开发板是SiPEED公司MAIX产品线的一员，基于嘉楠堪智科技的边缘智能计算芯片K210(RISC V架构 64位双核)设计的一款AIOT开发板。化繁为简的设计，整洁小巧，板载Type C接口和USB UART电路，用户可以直接通过USB Type C线连接电脑进行开发，配置128Mbit Flash、LCD、DVP、Micro SD卡等接口并把所有IO引出，方便用户扩展。 > 上电即可开机，不需要开机操作 <img src \"./../assets/dk_board/maix_dock/Maix_Dock.jpg\" alt \"11\" width \"300\"> ## 外观 <img src \"./../assets/dk_board/maix_dock/Maix_Dock_3.png\" alt \"11\" > <img src \"./../assets/dk_board/maix_dock/Maix_Dock_2.png\" alt \"11\" > ## 特性 MaixDock 开发是以M1W AI模块作为核心单元，功能非常强大。模块内置64位双核处理器芯片，拥有8M的片上SRAM，在AI机器视觉、听觉性能方面表现突出，内置多种硬件加速单元（KPU、FPU、FFT等），总算力最高可达1TOPS，可以方便地实现各类应用场景的机器视觉/听觉算法，也可以进行语言方向扫描和语言数据输出的前置处理工作。 ## 应用 智能家居，机器人清洁器，智能扬声器，电子门锁，家庭监控等; 医学行业应用，如辅助诊断，医学图像识别; 智能工业应用，如工业机械，智能分拣，电气设备监控等; 教育机器人，智能互动平台，教育效率检查等教育应用; 农业应用，如农业监测，病虫害监测，自动控制等 ## 参数 <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\">K210 芯片基本参数</th> </tr> </thead> <tbody> <tr> <td>内核</td> <td>RISC V Dual Core 64bit, with FPU</td> </tr> <tr> <td>主频</td> <td>400MHz （可超频至600MHz）</td> </tr> <tr> <td>SRAM</td> <td>内置8M Byte</td> </tr> <tr> <td>图像识别</td> <td>QVGA@60fps/VGA@30fps</td> </tr> <tr> <td>语音识别</td> <td>麦克风阵列(8mics)</td> </tr> <tr> <td>网络模型</td> <td><li>支持YOLOv3<li>Mobilenetv2<li>TinyYOLOv2<li>人脸识别等</td> </tr> <tr> <td>深度学习框架</td> <td>支持TensorFlow \\ Keras \\ Darknet \\ Caffe 等主流框架</td> </tr> <tr> <td>外设</td> <td>FPIOA、 UART、 GPIO、 SPI、 I2C、I2S、 TIMER</td> </tr> <tr> <td>视频处理</td> <td><li>神经网络处理器(KPU)<li>FPU满足IEEE754 2008标准<li>音频处理器(APU)<li>快速傅里叶变换加速器(FFT)</td> </tr> </tbody> </table> <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\" >开发板参数</th> </tr> </thead> <td> 板载资源</td> <td><li>按键*2 <li>RGB灯*1<li>MEMS Microphone*1<li>USB to UART<li>128Mbit Flash*1</td> </tr> <tr> <td>板载接口</td> <td><li>USB Type C接口<li>24PIN DVP摄像头接口<li>24PIN LCD接口<li>MicroSD卡槽<li>音频接口(支持外接2x3W扬声器)<li>所有IO排针引脚引出</td> </tr> <tr> <td>尺寸</td> <td>52.3*37.3mm</td> </tr> <tr> <td>供电电压</td> <td>5.0V @ 300mA（供电电流需大于300mA)</td> </tr> <tr> <td>工作温度</td> <td> 30℃ ~85C</td> </tr> </table> <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\">软件开发</th> <tr> </thead> <tr> <td>芯片操作系统</td> <td>FreeRTOS、RT Thread等</td> </tr> <tr> <td>开发环境</td> <td>MaixPy IDE、PlatformlO IDE、Arduino IDE等</td> </tr> <tr> <td>编程语言</td> <td>C，C++，MicroPython</td> </tr> </table> ## 资料 Sipeed Maix Dock 资料下载：[Sipeed Maix Dock](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed Maix Dock) Sipeed Maix Dock 规格书下载：[Sipeed Maix Dock](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed Maix Dock/Specifications) Sipeed Maix Dock 原理图下载：[Sipeed Maix Dock](https://dl.sipeed.com/fileList/MAIX/HDK/Sipeed Maix Dock/Maix Dock_11.27/Maix Dock_11.27 schematic.pdf) ## 产品技术支持 Maix系列产品可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"},"/hardware/en/maix/maixpy_develop_kit_board/maix_cube.html":{"title":"MaixCube","content":"# MaixCube ## 使用教程 <a href \"/soft/maixpy/zh/\" target \"_blank\"> MaixPy </a> ## 概述 SIPEED MaixCube 是基于我们 M1n 模块(主控:Kendryte K210)开发的一款集学习开发和商用一体的人脸识别产品. <br/>MaixCube 集成摄像头、TF卡槽、用户按键、TFT显示屏、锂电池、扬声器麦克、扩展接口等, 用户可使用 Maix Cube 轻松搭建一款人脸识别门禁系统, 同时还预留开发调试接口, 也能将其作为一款功能强大的 AI 学习开发板. ## MaixCube 外观及功能介绍 ### 外观一览 ![maixcube_product_appearance](./../assets/dk_board/maix_cube/maixcube_product_appearance.png) ### 板载功能介绍 电源管理控制单元: AXP173 板载 200mAh 锂电池,支持用户充放电控制 音频驱动 IC: ES8374 支持音频录制,播放 三轴加速度传感器: MSA301 Camera OV7740: 1.3 IPS LCD: RGB: 板载两颗 RGB LED USB Type C:Type C 接口,正反盲插 ### 板载扩展接口 Maix Cube 对用户开放了两个高度扩展的接口: SP MOD 与 Grove 接口, 用户可以很方便的进行 DIY #### SP MOD 接口 SP MOD 即为 sipeed module, simplify PMOD, super module 接口 接口描述 SP MODE 接口描述![spmod_interface_1](./../../../assets/spmod/spmod_interface_1.png) 硬件接口![spmod_interface_2](./../../../assets/spmod/spmod_interface_2.png) #### Grove 接口 Grove 模块接口 Grove 接口的线缆有 4 种颜色, 用户可以根据颜色快速区别 ![grove_interface](./../assets/interface_grove/grove_interface.jpg) 颜色 描述 pin 1 黄色 (例如, I2C Grove Connectors上的SCL) pin 2 白色 (例如, I2C Grove Connectors上的SDA) pin 3 红色 VCC (所有的Grove接口红色都是VCC) pin 4 黑色 GND (所有的Grove接口红色都是GND) Grove模块主要有 4 种接口: Grove Digital 数字接口: Grove 数字接口由 Grove 插头的四条标准线组成. 两条信号线通常称为 D0 和 D1 . 大多数模块只使用 D0, 但有些(像LED Bar Grove显示屏)使用两者.通常核心板会将板卡上的第一个Grove连接头称为 D0, 第二个称为 D1.第一个接头会连接到主控芯片的 DO/D1 管脚, 第二个连接头会连接到主控芯片的D1/D2引脚, 后面的连接头以此类推. pin Function Note pin1 Dn 第一个数字输入 pin2 Dn+1 第二个数字输入 pin3 VCC 供电引脚 5V/3.3V pin4 GND 地 Grove Analog 模拟接口 Grove模拟接口由Grove插头的四条标准线组成. 两条信号线通常称为A0和A1. 大多数模块只使用A0，但有些（像LED Bar Grove显示屏）使用两者. 通常核心板会将板卡上的第一个Grove连接头称为A0，第二个称为A1。第一个接头会连接到主控芯片的AO/A1管脚，第二个连接头会连接到主控芯片的A1/A2引脚，后面的连接头以此类推. pin Function Note pin1 An 第一个模拟输入 pin2 An+1 第二个模拟输入 pin3 VCC 供电引脚 5V/3.3V pin4 GND 地 Grove UART : The Grove UART 是特殊的一种数字输入输出接口 它使用引脚 1 和引脚 2 进行串行输入和发送 引脚1是 RX 线(用于接收数据, 因此是输入) 其中引脚 2 是 TX 线(用于向 Grove 模块传输数据) pin Function Note pin1 RX 串行接收 pin2 TX 串行发送 pin3 VCC 供电引脚 5V/3.3V pin4 GND 地 Grove I2C: 有许多类型的 I2C Grove 传感器可用.MaixAmigo 上的 Grove 只支持 3.3V 传感器 Grove I2C 连接器具有标准布局.引脚 1 是SCL信号, 引脚 2 是SDA信号 pin Function Note pin1 SCL I2C 时钟 pin2 SDA I2C 数据 pin3 VCC 供电引脚, 5V/3.3V pin4 GND 地 ### 板载 I2C 设备 MaixCube 板载 I2C 传感器/IC IC 设备 id I2C 地址(7位地址) ES83740x080x10 MSA3010x130x26 AXP1730x680x34 ## MaixCube参数 ![maixcube_resources](./../assets/dk_board/maix_cube/maixcube_resources.png) <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\">K210 芯片基本参数</th> </tr> </thead> <tbody> <tr> <td>内核</td> <td>RISC V Dual Core 64bit, with FPU</td> </tr> <tr> <td>主频</td> <td>400MHz （可超频至500MHz）</td> </tr> <tr> <td>SRAM</td> <td>内置8M Byte</td> </tr> <tr> <td>摄像头帧率</td> <td>OV7740/QVGA@60fps/VGA@30fps</td> </tr> <tr> <td>语音识别</td> <td>离线语音识别，声场</td> </tr> <tr> <td>网络模型</td> <td><li>支持MobileNetV1/V2<li>人脸识别<li>ASR</td> </tr> <tr> <td>深度学习框架</td> <td>支持TensorFlow \\ Keras \\ Darknet \\ Caffe 等主流框架</td> </tr> <tr> <td>外设</td> <td>FPIOA、 UART、 GPIO、 SPI、 I2C、I2S、 TIMER</td> </tr> <tr> <td>硬件加速单元</td> <td><li>KPU卷积运算加速器<li>FPU浮点运算加速器<li>APU音频处理器<li>FFT傅里叶变换加速器</td> </tr> </tbody> </table> <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\" >开发板参数</th> </tr> </thead> <td> 板载资源</td> <td><li>按键*3<li>摄像头*1<li>RGB LED*2 <li>1.3寸TFT屏幕<li>Electret Microphone*1<li>128Mbit Flash*1<li>加速度传感器*1<li>0.5W扬声器</td> </tr> <tr> <td>板载接口</td> <td><li>USB Type C接口<li>TF卡槽<li>Grove标准接口<li>SP MOD接口(支持SP MOD接口模块)</td> </tr> <tr> <td>尺寸</td> <td>40*40*18.6mm</td> </tr> <tr> <td>供电电压</td> <td>USB type或内部锂电池（200mAh）</td> </tr> </table> <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\">软件开发</th> <tr> </thead> <tr> <td>软件环境</td> <td>MaixPy（microPython）</td> </tr> <tr> <td>开发环境</td> <td>MaixPy IDE、PlatformlO IDE、Arduino IDE等</td> </tr> <tr> <td>编程语言</td> <td>C，MicroPython</td> </tr> </table> ## 相关资料下载 Sipeed Maix Cube 资料下载：[Sipeed Maix Cube](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed Maix Cube) Sipeed Maix Cube 规格书下载：[Sipeed Maix Cube](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed Maix Cube/ProductSpecification/Sipeed%20Maix%20Cube%20Datasheet%20V1.0.pdf) Sipeed Maix Cube 原理图下载：[Sipeed Maix Cube.pdf](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed Maix Cube/Maix Cube 2757) ## 产品技术支持 Maix系列产品可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"},"/hardware/en/maix/maixpy_develop_kit_board/maix_Amigo.html":{"title":"MaixAmigo","content":"# MaixAmigo ## 使用教程 <a href \"/soft/maixpy/zh/\" target \"_blank\"> MaixPy </a> ## 概述 SIPEED MaixAmigo 是基于我们 M1n 模块(主控:Kendryte K210)开发的一款集学习开发和商用一体的人脸识别产品. <br/>MaixAmigo 集成前后摄像头、TF卡槽、用户按键、TFT显示屏、锂电池、扬声器麦克风、扩展接口等, 用户可使用 MaixAmigo 轻松搭建一款人脸识别门禁系统, 同时还预留开发调试接口, 也能将其作为一款功能强大的 AI 学习开发板. ## MaixAmigo 外观及功能介绍 ### 外观一览 ![MaixAmigo](./../assets/dk_board/maxi_amigo/image 20200730120223557.png) ### 板载硬件功能介绍 3.5 寸 **TFT** 屏幕: 分辨率 **320x480*** 3.5 寸电阻触摸屏： FT6X36 芯片复位按键 电源按键: 短按开机, 长按 *8S* 关机 三个功能按键 Grove 接口: 板载 3 个**Grove** 数字接口, 传感器,控制器扩展无限可能~ SP MOD 接口: 板载 3 个更加强大,更高扩展性的 **SP MOD** 数字接口, I2C,SPI(标准,双线,四线模式)等接口均可以使用 后续支持乐高手柄功能 TF 卡槽: 多媒体资源扩展,支持大容量储存 摄像头: 搭载 **OV7740** **30W** 像素 与 **GC0328 30W 像素** **Sensor** Type C 接口: USB TypeC 电源、调试接口,正反盲插 电源管理控制单元: AXP173 板载 600mAh 锂电池,支持用户充放电控制 音频驱动 IC: ES8374 支持音频录制,播放 三轴加速度传感器: MSA301 ### 板载扩展接口 MaixAmigo 对用户开放了两个高度扩展的接口: SP MOD 与 Grove 接口, 用户可以很方便的进行 DIY #### SP MOD 接口 SP MOD 即为 sipeed module, simplify PMOD, super module 接口 接口描述 SP MODE 接口描述![spmod_interface_1](./../../../assets/spmod/spmod_interface_1.png) 硬件接口![spmod_interface_2](./../../../assets/spmod/spmod_interface_2.png) #### Grove 接口 Grove 接口的线缆有 4 种颜色, 用户可以根据颜色快速区别 ![grove_interface](./../assets/interface_grove/grove_interface.jpg) pin 颜色 描述 pin 1 黄色 (例如, I2C Grove Connectors上的SCL) pin 2 白色 (例如, I2C Grove Connectors上的SDA) pin 3 红色 VCC (所有的Grove接口红色都是VCC) pin 4 黑色 GND (所有的Grove接口红色都是GND) Grove模块主要有 4 种接口: Grove Digital 数字接口: Grove 数字接口由 Grove 插头的四条标准线组成. 两条信号线通常称为 D0 和 D1 . 大多数模块只使用 D0, 但有些(像LED Bar Grove显示屏)使用两者.通常核心板会将板卡上的第一个Grove连接头称为 D0, 第二个称为 D1.第一个接头会连接到主控芯片的 DO/D1 管脚, 第二个连接头会连接到主控芯片的D1/D2引脚, 后面的连接头以此类推. pin Function Note pin1 Dn 第一个数字输入 pin2 Dn+1 第二个数字输入 pin3 VCC 供电引脚 5V/3.3V pin4 GND 地 Grove Analog 模拟接口 Grove模拟接口由Grove插头的四条标准线组成. 两条信号线通常称为A0和A1. 大多数模块只使用A0，但有些（像LED Bar Grove显示屏）使用两者. 通常核心板会将板卡上的第一个Grove连接头称为A0，第二个称为A1。第一个接头会连接到主控芯片的AO/A1管脚，第二个连接头会连接到主控芯片的A1/A2引脚，后面的连接头以此类推. pin Function Note pin1 An 第一个模拟输入 pin2 An+1 第二个模拟输入 pin3 VCC 供电引脚 5V/3.3V pin4 GND 地 Grove UART : The Grove UART 是特殊的一种数字输入输出接口 它使用引脚 1 和引脚 2 进行串行输入和发送 引脚1是 RX 线(用于接收数据, 因此是输入) 其中引脚 2 是 TX 线(用于向 Grove 模块传输数据) pin Function Note pin1 RX 串行接收 pin2 TX 串行发送 pin3 VCC 供电引脚 5V/3.3V pin4 GND 地 Grove I2C: 有许多类型的 I2C Grove 传感器可用.MaixAmigo 上的 Grove 只支持 3.3V 传感器 Grove I2C 连接器具有标准布局.引脚 1 是SCL信号, 引脚 2 是SDA信号 pin Function Note pin1 SCL I2C 时钟 pin2 SDA I2C 数据 pin3 VCC 供电引脚, 5V/3.3V pin4 GND 地 ### 板载 I2C 设备 MaixAmigo 板载 I2C 传感器/IC IC 设备 id I2C 地址(7位地址) ES8374 0x08 0x10 MSA301 0x13 0x26 AXP173 0x68 0x34 ## 参数 Maix Amigo内置64位400Mhz双核高性能处理器,拥有8M的片上SRAM，16MiB FLASH大容量存储,轻松处理多媒体应用,在AI机器视觉、听觉性能方便表现突出，内置多种硬件加速单元（KPU、FPU，FFT等)，总算力最高可达1TOPS,可以方便地实现各类应用场景的机器视觉/听觉算法,也可以进行语音扫描和语音数据输出的前置处理工作 <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\">K210 芯片基本参数</th> </tr> </thead> <tbody> <tr> <td>内核</td> <td>RISC V Dual Core 64bit, with FPU</td> </tr> <tr> <td>主频</td> <td>400MHz （可超频至600MHz）</td> </tr> <tr> <td>SRAM</td> <td>内置8M Byte</td> </tr> <tr> <td>摄像头帧率</td> <td>OV7740/QVGA@60fps/VGA@30fps</td> </tr> <tr> <td>语音识别</td> <td>离线语音识别，声场</td> </tr> <tr> <td>网络模型</td> <td><li>支持MobileNetV1/V2<li>人脸识别<li>ASR</td> </tr> <tr> <td>深度学习框架</td> <td>支持TensorFlow \\ Keras \\ Darknet \\ Caffe 等主流框架</td> </tr> <tr> <td>外设</td> <td>FPIOA、 UART、 GPIO、 SPI、 I2C、I2S、 TIMER</td> </tr> <tr> <td>硬件加速单元</td> <td><li>KPU卷积运算加速器<li>FPU浮点运算加速器<li>APU音频处理器<li>FFT傅里叶变换加速器</td> </tr> </tbody> </table> <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\" >开发板参数</th> </tr> </thead> <td> 板载资源</td> <td><li>3.5寸TFT屏幕<li>复位按键*1<li>功能按键*3<li>前后摄像头*2<li>LED*3<li>加速度传感器*1</td> </tr> <tr> <td>板载接口</td> <td><li>USB Type C接口<li>音频接口(支持外接扬声器)<li>TF卡槽<li>Grove标准接口<li>SP MOD接口(支持SP MOD接口模块)</td> </tr> <tr> <td>尺寸</td> <td>104.3*63.3*16.5mm</td> </tr> <tr> <td>供电电压</td> <td>USB type或内部锂电池（520mAh）</td> </tr> </table> <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\">软件开发</th> <tr> </thead> <tr> <td>软件环境</td> <td>MaixPy（microPython）</td> </tr> <tr> <td>开发环境</td> <td>MaixPy IDE、PlatformlO IDE、Arduino IDE等</td> </tr> <tr> <td>编程语言</td> <td>C，MicroPython</td> </tr> </table> ## 相关资料下载 Maix Amigo 资料下载：[Sipeed Amigo](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed Amigo) Maix Amigo 规格书下载：[Sipeed Amigo](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed Amigo/ProductSpecification) Maix Amigo IPS 版本 原理图下载：<a href \"https://dl.sipeed.com/fileList/MAIX/HDK/Sipeed Amigo/2970/Maix_Amigo_2970(Schematic).pdf\">Maix_Amigo_2970(Schematic).pdf</a> Maix Amigo TFT 版本 原理图下载：<a href \"https://dl.sipeed.com/fileList/MAIX/HDK/Sipeed Amigo/2960/Maix_Amigo_2960(Schematic).pdf\">Maix_Amigo_2960(Schematic).pdf</a> ## 产品技术支持 Maix系列产品可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"},"/hardware/en/maix/maixpy_develop_kit_board/maix_duino.html":{"title":"MaixDuino Development Board","content":"# MaixDuino Development Board ## Overview SIPEED MaixDuino is an Arduino compatible development board based on our M1 module (main controller: Kendryte K210). <br/>MaixDuino integrates camera, TF card slot, user buttons, TFT display, MaixDuino expansion interface. Users can use MaixDuino to easily build a face recognition access control system, and also reserve a development and debugging interface, which can also be used as a functioning powerful AI learning development board. ## MaixDuino Features ### Appearance ![MaixDuino](./../assets/dk_board/maix_duino/maixduino_0.png) ![MaixDuino](./../assets/dk_board/maix_duino/maixduino_1.png) ![MaixDuino](./../assets/dk_board/maix_duino/maixduino_2.png) ### Onboard features DC Barrel Power Jack: 6~12V DC power input USB Type C: For power input and debug interface DVP 24PIN: Camera interface TF slot: For SD/TF card ESP32: WiFi and Bluetooth support via SPI I2C DAC PA PAM8403A ![MaixDuino](./../assets/dk_board/maix_duino/maixduino_3.jpg) ## MaixDuino Description The Maixduino development board uses the powerful M1Al module as the core unit. The module has a built in 64 bit dual core processor chip and 8MB on chip SRAM. It has outstanding performance in Al machine vision and hearing performance with a total computing power up to 1TOPS (FPU, Fast Fourier Transform Accelerator), which can easily implement machine vision/auditory algorithms for various application scenarios, and can also perform preprocessing for voice direction scanning and voice data output. In addition, the development board is also equipped with an ESP32 module (WiFi+Bluetooth integrated), which can be easily connected to the Internet with simple operations. <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\">K210 chip features</th> </tr> </thead> <tbody> <tr> <td>Core</td> <td>RISC V Dual Core 64bit, with FPU</td> </tr> <tr> <td>Frequency</td> <td>400MHz （Can be overclocked to 600MHz）</td> </tr> <tr> <td>SRAM</td> <td>built in 8MB</td> </tr> <tr> <td>Image Recognition</td> <td>QVGA@60fps/VGA@30fps</td> </tr> <tr> <td>Speech Recognition</td> <td>Microphone array (8mics)</td> </tr> <tr> <td>Network Model</td> <td><li>Support YOLOv3<li>Mobilenetv2<li>TinyYOLOv2<li>facial recognition, etc.</td> </tr> <tr> <td>Deep Learning Framework</td> <td>Supports TensorFlow, Keras, Darknet, Caffe, other mainstream frameworks</td> </tr> <tr> <td>Peripherals</td> <td>FPIOA, UART, GPIO, SPI, I2C, I2S, TIMER</td> </tr> <tr> <td>Video Processing</td> <td><li>Neural Network Processor (KPU)<li>FPU Meets IEEE754 2008 Standard<li>Audio Processor (APU)<li>Fast Fourier Transform Accelerator (FFT)</td> </tr> </tbody> </table> <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\">ESP32 Module</th> </tr> </thead> <tr> <td>Core</td> <td>ESP32 D0WDQ6(Xtensa 32 bit core)</td> </tr> <tr> <td>Wireless Standards</td> <td>802.11b/g/n</td> </tr> <tr> <td>Radio Frequencies</td> <td>2400MHz 2483.5MHz</td> </tr> <tr> <td>Wireless Protocols</td> <td>2.4Ghz WiFi, Dual mode Bluetooth (BT & BLE4.2)</td> </tr> <tr> <td>Antenna</td> <td>PCB Onboard Antenna</td> </tr> </table> <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\" >Development board features</th> </tr> </thead> <td>Onboard</td> <td><li>1x RGB LED<li>1x MEMS Microphone<li>1x USB to serial port</td> </tr> <tr> <td>Interfaces</td> <td><li>USB Type C interface<li>24PIN DVP camera interface<li>24PIN LCD interface<li>MicroSD card slot<li>Audio interface (supports 3 external speakers)<li>Part of the IO pin header</td> </tr> <tr> <td>Size</td> <td>60*88mm</td> </tr> <tr> <td>Supply Voltage</td> <td>5.0V @ 300mA（300mA minimum)</td> </tr> <tr> <td>Operating Temperature</td> <td> 30℃ ~85C</td> </tr> </table> <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\">Software</th> <tr> </thead> <tr> <td>Operating Systems</td> <td>FreeRTOS, RT Thread, etc</td> </tr> <tr> <td>Development Environments</td> <td>MaixPy IDE、PlatformlO IDE、Arduino IDE, etc</td> </tr> <tr> <td>Programming languages</td> <td>C，C++，MicroPython</td> </tr> </table> ## Related Links [MaixDuino Schematic](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed Maixduino) <a href \"/soft/maixpy/zh/\" target \"_blank\"> MaixPy Tutorial</a> <a href \"/soft/maixduino/zh/\" target \"_blank\"> Arduino Tutorial</a> ## Product Technical Support Maix series of products can meet the different needs of customers in a variety of scenarios, and have been widely used in AIoT. The quality and performance have a very good reputation in the industry. The professional technical team solves hardware design and software functions for our customers. For professional technical support and more detailed information, please contact <support@sipeed.com>。"},"/hardware/en/maix/core_module.html":{"title":"Sipeed M1/M1W","content":" title: Sipeed M1/M1W keywords: maixpy, k210, AIOT, 边缘计算, M1/M1W desc: maixpy Sipeed M1/M1W ## M1/M1W M1/M1W模块是基于嘉楠堪智科技的边缘智能计算芯片 K210 (RISC V架构) 设计的一款AIOT模块。主控芯片内置64位双核高性能低功耗处理器，每个核都有浮点运算单元(FPU) ,具备卷积人工神经网络硬件加速器(KPU)和快速傅里叶变换加速器(FFT)、搭载现场可编程IO阵列(FPIOA)，支持多种主流Al编程框架。M1W模块内置标准802.11 b/g/n协议的ESP8285 WiFi芯片，可让模块轻松联网。 ![M1/M1W](./assets/m1_m1w/M1_Dan.png) ## 应用 智能家居，机器人清洁器，智能扬声器，电子门锁，家庭监控等; 医学行业应用，如辅助诊断，医学图像识别; 智能工业应用，如工业机械，智能分拣，电气设备监控等; 教育机器人，智能互动平台，教育效率检查等教育应用; 农业应用，如农业监测，病虫害监测，自动控制等 ## M1/M1W 参数 M1/M1W Al模块系统主要由电源(3 Channel DC DC)、Flash芯片(16M)电路、K210芯片和WiFi芯片四部分组成。K210作为核心单元，功能非常很强大，芯片内置64位双核处理器，拥有8M的片上SRAM。模块在Al机器视觉、听觉性能方便表现突出，芯片总算力可达1TOPS，芯片内置多种硬件加速单元(KPU、FPU，FFT等)，可以方便地实现各类应用场景的机器视觉/听觉算法,也可以进行语音方向扫描和语音数据输出的前置处理工作。M1W模块嵌入无线WiFi功能，可轻松实现联网控制。 <p><img loading \"M1/M1W\" src \"./assets/m1_m1w/M1_vs_M1W.png\" width 500 ></p> <p><img loading \"M1/M1W\" src \"./assets/m1_m1w/M1_pin.png\" width 500 ></p> <p><img loading \"M1/M1W\" src \"./assets/m1_m1w/M1W_2.png\" width 500 ></p> <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\">K210 芯片基本参数</th> </tr> </thead> <tbody> <tr> <td>内核</td> <td>RISC V Dual Core 64bit, with FPU</td> </tr> <tr> <td>主频</td> <td>400MHz （可超频至600MHz）</td> </tr> <tr> <td>SRAM</td> <td>内置8M Byte</td> </tr> <tr> <td>图像识别</td> <td>QVGA@60fps/VGA@30fps</td> </tr> <tr> <td>语音识别</td> <td>麦克风阵列(8mics)</td> </tr> <tr> <td>神经网络模型</td> <td><li>支持YOLOv3<li>Mobilenetv2<li>TinyYOLOv2</td> </tr> <tr> <td>深度学习框架</td> <td>支持TensorFlow \\ Keras \\ Darknet \\ Caffe 等主流框架</td> </tr> <tr> <td>外设</td> <td>FPIOA、 UART、 GPIO、 SPI、 I2C、I2S、 TIMER</td> </tr> <tr> <td>视频处理</td> <td><li>神经网络处理器(KPU)<li>FPU满足IEEE754 2008标准<li>音频处理器(APU)<li>快速傅里叶变换加速器(FFT)</td> </tr> </tbody> </table> <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\">模块软件</th> </tr> </thead> <tr> <td>操作系统</td><td>FreeRtos and Standrad development ki</td> </tr> <tr> <td>编程语言</td><td>MicroPython</td> </tr> <tr> <td>机器视觉</td><td>支持卷积神经网络</td> </tr> <tr> <td>机器听觉</td><td>高性能音频处理器(APU)</td> </tr> <tr> <td>开发环境</td><td>串口终端、MaixPy IDE</td> </tr> </table> <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\">模块硬件</th> </tr> </thead> <tr> <td>尺寸</td><td>25.4*25.4*3.3mm</td> </tr> <tr> <td>引脚</td><td>72 PIN全引脚引出</td> </tr> <tr> <td>供电电压</td><td>5.0V @ 300mA（供电电流需大于300mA)</td> </tr> <tr> <td>工作温度</td><td> 30°C ~85°C</td> </tr> </table> <table role \"table\" class \"center_table\"> <thead> <tr> <th colspan \"2\">Wi Fi功能参数</th> </tr> </thead> <tr> <td>主控</td> <td>ESP8285</td> </tr> <tr> <td>无线标准</td><td>802.11 b/g/n</td> </tr> <tr> <td>频率范围</td><td>2400Mhz 2483.5Mhz</td> </tr> <tr> <td>天线</td><td>标准IPEX接口天线</td> </tr> <tr> <td>Wi Fi模式</td><td>支持Station / SoftAP /SoftAP+Station</td> </tr> </table> > 为了让Al模块能应用于更多场合，Sipeed团队还推出了无WiFi功能版本的M1模块，如果用户无需使用无线联网的功能，可以选择我们的M1模块。M1模块和M1W模块的AI功能一致，使用方法基本相同，主要区别就是M1W模块比M1模块多了WiFi功能。 ## 资料下载 芯片 K210 Datasheet: [Kendryte 官网](https://canaan creative.com/) M1W 资料下载: [dl.sipeed.com](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed M1&M1W) ## 产品技术支持 Maix系列产品可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"},"/hardware/en/maixface/mf_ml_module/mf1_ml_module.html":{"title":"MF Face recognition module MF1","content":"# MF Face recognition module MF1 ## **Modification Record** VersionTimeModified content 1.02019.07.30Initial version 1.22020.08.1 ## table of Contents [**Introduction to hardware resources**](#Introduction to hardware resources) [**Function Introduction**](#Function Introduction) [Module Features](#Module Features) [Instructions for use](#Instructions for use) [**Application plan**](#Application plan) [Serial Module](#Serial Module) <! [WeChat Mini Program Module](#微信小程序 Module) > <! [Second Development](#Second Development) > <! [**Q&A**](#qa) > ## **Introduction to Hardware Resources** <center class \"half\"> <img src \"../../assests/front.png\" width 50% /><img src \"assests/bottom.jpg\" width 50% /> </center> * CPU: **RISC V** dual core 64bit, built in FPU, frequency 400Mhz 500Mhz * Image recognition: living body recognition * Dual cameras: infrared + visible light * Infrared filling light: 3W infrared light emitting diode * Display: 1.33 inches TFT, resolution 240*320 display * Other peripherals: capacitive touch button/support 3W speaker/MEMS microphone/SD NAND/RGB LED * Wireless function (optional): Support 2.4G 802.11.b/g/n, SPI connection * [Buy on Taobao](https://item.taobao.com/item.htm?spm a1z10.1 c.w4004 21231188695.25.27ba52b1bsusf7&id 599138281058) <div STYLE \"page break after: always;\"></div> ## **Function Introduction** ![MF1 pin map](../../assets/mf_module/mf1/mf1_pin_map.png)"},"/hardware/en/maixface/mf_ml_module/mf_update_firmwave.html":{"title":"MF Firmware related upgrade instructions","content":"# MF Firmware related upgrade instructions In the process of using the **MF face recognition module**, if there is a firmware bug, a new function firmware release, a mistakenly erased firmware, font resources, and image resources, then the firmware needs to be restored by burning. ## MF face recognition module firmware, resource description **MF Face Recognition Module** The firmware, font resources, picture resources, descriptions are as follows: Type Burning Address Length Description Firmware 0x000000 Face Model Font Resources Picture Resources Board level configuration 0x7FF000 4 KB Face Information 0x800000 64 KB > After getting the MF module, the general developer does not need to care about the resource distribution MF firmware description VIS: Visible light (VIS) IR: infrared light (IR) Firmware classification Direction Protocol Identification method wechat Number of firmware types : : : : : : MF0 trial version module horizontal version, vertical version bin vis 2 MF1 offline module horizontal and vertical bin/json vis+ir 8 MF2 WeChat semi finished product Horizontal version, vertical version bin vis Support 2 MF4 WeChat (finished product) Vertical version bin vis Support 1 MF5 WeChat (finished product) Vertical version bin/json vis Support 2 Font resources Picture resources ## MF firmware burning (upgrade, restore factory configuration) steps In the process of using the **MF face recognition module**, if there is a firmware bug, a new function firmware release, a mistakenly erased firmware, font resources, and image resources, then the firmware needs to be restored by burning. ### Preparation: Before upgrading and restoring the factory configuration **MF face recognition module**, we need to prepare software and hardware. **Hardware preparation:** **MF Face Recognition Module** USB Type C data cable **Software preparation:** Burning software: kflash_gui (Kflash_gui v1.6.5 version is used here) **Download link:** Github: [kflash_gui](https://github.com/Sipeed/kflash_gui) Sipeed: [Sipeed official download site kflash_gui](https://dl.sipeed.com/MAIX/tools/kflash_gui/kflash_gui_v1.6.5) Burn resource files (burn according to the situation): **MF face recognition module firmware**, algorithm model files, font resource files, image resource files Get the resource files and send a unified email to: Email: Support@sipeed.com The recommended email format is as follows: > Problem type: [MF firmware resource acquisition] > > Use hardware/firmware version: [MF0/MF1/MF2/MF4/MF5] > > Content: [Get the latest firmware/Firmware is missing/Model is missing (describe the relevant situation)] > > Machine code: [xxxxxxxxxxxxxxxxxxxxx (only required when the model is lost)] ### Burn firmware, resource files Use the USB Type C data cable to connect the **MF face recognition module** to the computer ![MF1 connect USB](../../assets/mf_module/mf1/mf1_view.png) Open Kflash_gui, select the file to be burned, select the version (default is `automatic selection`, if the burn fails, select `MaixDuino`), select the serial port number (CH522 has two serial ports, try the other one if it fails), configure the wave Special rate (default is `150000`, if programming fails, reduce the baud rate appropriately, such as `115200`) ![image 20200806103433410](../../../en/maix/assets/kflash_gui/image 20200806103433410.png) ![image 20200806105056527](../../../en/maix/assets/kflash_gui/image 20200806105056527.png) ## How to get Key (Machine Code) During use, if the model of the module is lost or needs to be replaced, you need to send the `Key` to <Support@sipeed.com> The recommended email format is as follows: First download [key_gen.bin](https://fdvad021asfd8q.oss cn hangzhou.aliyuncs.com/Sipeed_M1/firmware/key_gen_v1.2.bin) After using the `kflash_gui` to burn the firmware `key_gen.bin` into the module, open the serial port and the baud rate is `115200,8,N,1` > **[kflash_gui](https://github.com/Sipeed/kflash_gui/releases)** is K210 firmware burning tool, source code: [**Sipeed/kflash_gui**](https://github.com/Sipeed/kflash_gui) It is recommended to use [`XCOM`](tools/XCOM_V2.2.exe) to view the serial port information Tap `DTR` and release it to reset the module and see the startup information <center class \"half\"> <img src \"../../../en/maix/assets/other/how_to_get_key.png\" height 50% width 80% /> </center> ## MF Firmware Version Description Due to the different imaging directions of the cameras, there are two firmware versions: horizontal and vertical versions; How to confirm the firmware corresponding to the camera: (identified by the camera silkscreen) Horizontal board Vertical board ![](../../assets/mf_module/mf1/mf_dual_camera_1.jpg) ![](../../assets/mf_module/mf1/mf_dual_camera_2.png) "},"/hardware/en/maixface/mf_ml_module/mf0_ml_module.html":{"title":"MF0 Machine Learning Core Module","content":"# MF0 Machine Learning Core Module ## Software and hardware overview MF0 face recognition module appearance at a glance <table border \"3\"> <tr> <th colspan 3>MF0</th> </tr> <tr> <td width \"100\">Description</td> <td>Front view</td> <td>Back view</td> </tr> <tr> <td width \"100\">MF0</td> <td> <img src \"./../../../zh/maixface/assets/mf_module/mf0_mf0dock/mf0_pin_map.png\" width \"600\" alt \"MF0 front\"> Pin Map</br> </td> <td> <img src \"./../../../zh/maixface/assets/mf_module/mf0_mf0dock/mf0_buttom.png\" width \"600\" alt \"MF0 back view\"> </td> </tr> <tr> <td>MF0 Dock</td> <td> <! <img src \"../assets/mf_module/mf1_bottom_v2(nand).png\" width \"600\" alt \"MF1(NAND Flash) back view\"> > </td> <td> </td> </tr> </table> ### Module features: CPU: RISC V 64bit dual core processor, 400Mhz standard frequency (overclockable) Image recognition: QVGA@60FPS/VGA@30FPS Deep learning framework: TensorFlow/Keras/Darknet Peripherals: FPIOA, UART, GPIO, SPI, I²C, I²S, WDT, TIMER, etc 2.54mm pitch DIP/SMT pad Can be connected to a breadboard Onboard camera connector ROM: 4MByte RAM: 6MByte (General purpose) + 2MByte (KPU dedicated) ### Hardware pin No. Description 24 User IO24 25 User IO25 26 User IO26, MF0_Dock(LCD_RST) 27 User IO27, MF0_Dock(LCD_CLK) 28 User IO28, MF0_Dock(LCD_DC) 29 User IO29, MF0_Dock(LCD_SDA) BOOT Power on boot mode selection (user IO16, not recommended for users) IO5 User IO5 (ISP_TX) IO4 User IO4 (ISP_RX) EN MF0 power enable pin, default high level enable RST K210 reset pin VIN External power supply 3.4 5.9V (5.0V recommended) GND External power supply ground 3V3 Module power supply 3.3V output ## Agreement Serial port protocol: MFO burns HEX protocol firmware by default MF0 has two protocol firmware, which is convenient for users to use according to specific needs HEX format serial protocol firmware JSON format serial protocol firmware HEX example ### Serial Protocol Assistant ## Update MF0 firmware MF0 hardware connection: No. USB to serial port module MF0 IO Remarks 1 5V VIN 2 GND GND 3 TX IO4 4 RX IO5 5 DTR BOOT 6 RTS RST ![](./../../../zh/maixface/assets/mf_module/mf0_mf0dock/mf0_flash.png) MF0 Dock hardware connection: After connecting according to the following table, when downloading using kflash_gui, you need to press the boot and rst buttons, and release the rst and then the boot button to ensure that the K210 enters the download mode (ISP mode) No. USB to serial port module MF0 Dock IO Remarks 1 5V VIN 2 GND GND 3 TX IO4 4 RX IO5 ![](./../../../zh/maixface/assets/mf_module/mf0_mf0dock/mf0_dock_flash.png) Then use kflash_gui to download the MF0 firmware ![](./../../../zh/maixface/assets/mf_module/mf0_mf0dock/mf0_upgrade_firmwave.png)"},"/hardware/en/maixface/mf_ml_module/mf_precautions.html":{"title":"MF PCB design considerations","content":"# MF PCB design considerations Precautions: 1. For the 850nm infrared fill light, 1W or 3W power lamp beads can be considered, because the lamp beads with higher power can extend the service life, reduce the failure rate and improve the recognition effect 2. The driving circuit and component parameters of infrared lamp beads and white light lamp beads must be determined according to the actual lamp beads selection and quantity. Because the cost of different circuits is different, the brightness feels different, and the needs of different customers are different, so customers need to choose and adjust parameters according to the actual situation. 3. 850nm light has certain penetrability. It has been confirmed that the 850nm light of the infrared fill light will penetrate from the periphery and back of the camera module, affecting the imaging, and then affecting the screen image or the recognition effect. Therefore, it is necessary to use 850nm impenetrable materials/paint/tape to block the infrared light scattered from the lamp beads to the inside of the camera between the camera and the fill light. In addition, you can also open the distance between the infrared lamp beads and the camera. Keep the distance above 15mm to reduce the negative impact by 80%. Keep the distance above 20mm, and the infrared rays will not be transmitted into the camera. 4. The heat dissipation pad on the bottom of the M1/M1w module needs to be connected to the largest possible copper skin to improve the heat dissipation performance 5. The pads of white light lamp beads and infrared lamp beads need to be connected to the largest possible copper skin to improve heat dissipation performance 6. The capacitor to the ground of the white light fill light should be removed, otherwise it will reset when the light is turned on 7. If capacitive touch is needed, try to put the touch chip under the position close to the finger touch. Because of the trace length between the touch chip and the touch panel, the longer the length, the more difficult it is to grasp the sensitivity and the easier it is to be interfered. 8. For each K210 module pin and power pin used, try to add ESD diodes. The location of the ESD diode is selected according to the actual situation 9. If there is a requirement for certification, all data lines D0 D7 of the screen/camera and 4 control signals, as well as other communication signal lines, need to add RC filtering to eliminate overshoot and ringing according to the actual measurement conditions. The parameter is 100R+100PF (It is best to decide according to the actual test), low pass RC form (the signal output first passes through the resistor and then the capacitor, and the RC component is placed close to the M1 module). Try to add RC filtering to other output signals (resistance and capacitance are determined according to the actual signal frequency) 10. Try to connect 200R resistors and ESD diodes to each IO to protect the IO ports 11. The working voltage and tolerance voltage of RST, BANK6/7, camera 8 bit data and screen 8 bit data of M1/M1w module are 1.8V, and the working voltage and tolerance voltage of BANK0/1/2/3/4/5 All are 3.3V withstand voltage, and must not exceed the withstand voltage range. If you want to use the RST pin, it is recommended to use a MOS tube to form a level conversion circuit. 12. The 5V of the module is the input, and the external power supply is used for the module; the 1.8V and 3.3V of the module are generated by the internal DC DC of the module, which are mainly used for the internal core components of the module, and secondly for the small current components outside the module. (For example, as a 1.8V reference voltage for screens and cameras, and other small current requirements. It is not recommended to provide large current components outside the module) 13. If you use the M1w module, you need to follow the antenna placement principle to place the IPEX 2.4G antenna, otherwise the signal will have a greater degree of loss 14. IO16 (BOOT) needs to add a 10K pull up resistor to 3.3V on the bottom board 15. FPIOA allows users to map 255 internal functions to 48 free IOs on the periphery of the chip"},"/hardware/en/maixface/mf_ml_module/mf5_product.html":{"title":"MF5","content":"# MF5 ## MF5 外观一览 ## MF5 板载接口 <table border \"2\"> <tr> <th colspan 6>MaixFace 5 引脚信息</th> </tr> <tr> <td colspan 3><img src \"./../../../zh/maixface/assets/mf_module/mf5/mf5_if_1.png\" height 400></td> <td colspan 3><img src \"./../../../zh/maixface/assets/mf_module/mf5/mf5_if_2.png\" height 400></td> </tr> <tr> <td>Maix Face Slik</td> <td>K210 IO</td> <td>ESP8285 IO</td> <td>Function</td> <td>Remark</td> <td>IO Voltage</td> </tr> <tr> <td>VIN</td> <td> </td> <td> </td> <td>电源输入正极</td> <td>12V</td> <td rowspan 22>3.3V</td> </tr> <tr> <td>GND</td> <td> </td> <td> </td> <td>电源输入负极</td> <td>电源GND</td> </tr> <tr> <td>NC</td> <td> </td> <td> </td> <td>继电器常闭触点</td> <td rowspan 3>继电器</td> </tr> <tr> <td>COM</td> <td> </td> <td> </td> <td>继电器公共触点</td> </tr> <tr> <td>NO</td> <td> </td> <td> </td> <td>继电器常开触点</td> </tr> <tr> <td>GND</td> <td> </td> <td> </td> <td>韦根接口RETURN</td> <td rowspan 3>韦根接口</td> </tr> <tr> <td>WGD0</td> <td>IO14</td> <td> </td> <td>韦根接口 D0</td> </tr> <tr> <td>WGD1</td> <td>IO15</td> <td> </td> <td>韦根接口 D1</td> </tr> <tr> <td>GND</td> <td> </td> <td> </td> <td>开门信号地</td> <td rowspan 2>开门信号 低电平: Open</td> </tr> <tr> <td>OPEN</td> <td>IO16</td> <td> </td> <td>开门信号输入</td> </tr> <tr> <td>3V3</td> <td> </td> <td> </td> <td>3.3V</td> <td rowspan 6>以太网/刷卡接口</td> </tr> <tr> <td>CS</td> <td>IO24</td> <td> </td> <td>SPI CS</td> </tr> <tr> <td>MISO</td> <td>IO2</td> <td> </td> <td>SPI MISO</td> </tr> <tr> <td>SCLK</td> <td>IO1</td> <td> </td> <td>SPI SCLK</td> </tr> <tr> <td>MOSI</td> <td>IO3</td> <td> </td> <td>SPI MOSI</td> </tr> <tr> <td>GND</td> <td> </td> <td> </td> <td>GND</td> </tr> <tr> <td>5V</td> <td> </td> <td> </td> <td>5V</td> <td rowspan 6>串口/K210下载</td> </tr> <tr> <td>RST</td> <td>IO54</td> <td> </td> <td>K210复位</td> </tr> <tr> <td>BOOT</td> <td>IO16</td> <td> </td> <td>K210进入ISP模式</td> </tr> <tr> <td>ISPTX</td> <td>IO5</td> <td> </td> <td>ISPTX</td> </tr> <tr> <td>ISPRX</td> <td>IO4</td> <td> </td> <td>ISPRX</td> </tr> <tr> <td>GND</td> <td> </td> <td> </td> <td>GND</td> </tr> </table> ## MF5 固件说明 MF5 为人脸识别门禁成品，默认烧录的固件不支持串口协议； 在烧录串口协议固件之后，协议串口为 WGD0 IO14(RX)，WGD1 1O15(TX)。"},"/hardware/en/maixface/core_modules/k210_core_modules.html":{"title":"K210 core module","content":"# K210 core module There are four AIOT modules developed based on K210: M1, M1w, M1n, MF0 Feature description: These four modules are based on Canaan Kanzhi Technology's edge intelligent computing chip K210 (RISC V architecture). The main control chip has a built in 64 bit dual core high performance low power processor, each core has a floating point unit (FPU), a convolutional artificial neural network intelligent hardware accelerator (KPU) and a fast Fourier transform accelerator (FFT) , Equipped with Field Programmable IO Array (FPIOA), supports a variety of mainstream AI programming frameworks. ### Maix AIOT module difference comparison M1 M1w M1n MF0 Exterior ![M1 module](../../assets/mf_module/m1_m1w/sipeed_m1_module.png) ![M1W module](../../assets/mf_module/m1_m1w/sipeed_m1w_module.png) ![M1n module](../../assets/mf_module/m1n/sipeed_m1n_module.png) ![MF0 module](../../assets/mf_module/mf0_mf0dock/sipeed_mf0_module.png) size 25.4x25.4x3.3（mm） 25.4x25.4x3.3（mm） 25.0x22.0x2.7（mm） 20.0x20.0x4.5（mm） Voltage output (provided to the bottom board) 1.8V and 3.3V 1.8V and 3.3V 1.8V and 3.3V 3.3V Maximum power consumption (non transient) 1.5W 3W 1.5W 1.5W WIFI None K210 and ESP8285 are connected through SPI interface and serial port None None Onboard camera connector None None Yes (only compatible with single camera) Yes (only compatible with single camera) Pin form Stamp hole Stamp hole NGFF B KEY 2.54mm pitch through pad + SMD pad camera signal All leads All leads All leads None screen signal All leads All leads All leads None Lead out ordinary IO port Quantity 48 (all lead out) Quantity 48 (all lead out) 44 (not drawn by IO0 3) 9 ## Module pin definition Specific downloadable specifications M1/M1w: https://dl.sipeed.com/MAIX/HDK/Sipeed M1&M1W/Specifications M1n: https://dl.sipeed.com/MAIX/HDK/Sipeed M1n MF0: https://dl.sipeed.com/MAIX/HDK/Sipeed MF0/MF0 2802"},"/hardware/en/maixIV/index.html":{"title":"","content":"Coming soon"},"/hardware/en/maixIII/ax-pi/faq_axpi.html":{"title":"Maix-III AXera-Pi Q&A","content":" title: Maix III AXera Pi Q&A ## Q：Device not work A: Try to plug connect the 2 USB on m3axpi, by this m3axpi can get enough power to boot. m3axpi comsume 5V*1A maximum. ## Q：How to switch to os04a10 camera？ A：**Change the parameter, or edit code** For examples like [`sample_vin_vo`](https://wiki.sipeed.com/hardware/en/maixIII/ax pi/flash_system.html#VIDEO), we can change the parameter ` c 2` into ` c 0` to switch camera. For command line example like [IPCDemo](https://wiki.sipeed.com/hardware/en/maixIII/ax pi/flash_system.html#IPCDemo) we can change the json file in the end. ![ipc_demo_json](./assets/flash_system/ipc_demo_json.jpg) For example script like [rstp](https://wiki.sipeed.com/hardware/en/maixIII/ax pi/flash_system.html#rtsp) we can edit the script file to change the camera configuration. ![rtsp_stream_shell](./assets/flash_system/rtsp_stream_shell.jpg) Edit the C code `COMMON_SYS_CASE_E eSysCase SYS_CASE_SINGLE_GC4653;` to switch the camera, visit [github libmaix](https://github.com/sipeed/libmaix/blob/release/components/libmaix/lib/arch/axpi/libmaix_cam/libmaix_cam.cpp) to know more. <div> <img src \"./assets/qa/qa_switcg_os04a10_1.jpg\" alt \"qa_switcg_os04a10_1\" width \"45%\"> <img src \"./assets/qa/qa_switcg_os04a10_2.jpg\" alt \"qa_switcg_os04a10_2\" width \"45%\"> </div> ## Q：Error `i2c_read: Failed to read reg: Remote I/O error.!` when using camera A: Make sure you have connected the camera and board correctly, and run the command correctly, like using the mismatched camera parameters or wrong parameters in command. If these are all right but this error still occurs, there are some errors on the device. ## Q：How to use the other screen？ A：Up to now we only provide screen with 5 inches, and for other screens you need to build the driver, edit the device tree and the application codes to display. ## Q：Error `locale.Error: unsupported locale setting !` when running `xxxx menuconfig` A: Run `sudo localedef i en_US f UTF 8 en_US.UTF 8` to restore the configuration to slove this. ## Q：Error `VCEncInit:ERROR codecFormat NOT support by HW !` when running `IPC ODM` A: Try to reboot device by pressing the RST key onboard or replug device. ## Q：Screen display wrong ![faq_display](./../../../zh/maixIII/assets/faq_display.jpg) A: Check if you have set the correct camera parameters. ## Q：Screen shows opposite camera content A: This occurs because of the different batches of products, connecting them with 180° rotation. ![faq_video_a](./../../../zh/maixIII/assets/faq_video_a.jpg) Those who have shell for AXera Pi can connect them like in the following pictures: <html> <img src \"./../../../zh/maixIII/assets/faq_video_b.jpg\" width 48%> <img src \"./../../../zh/maixIII/assets/faq_video_c.jpg\" width 48%> </html> ## Q：Error `Bus Error！` ![faq_bus](./../../../zh/maixIII/assets/faq_bus.jpg) A：This happens when data in the tf card system is broken because of the bad quality of tf card. Try to use a good tf card, like what we sell, and you can choose your tf card based on our test: [Choose tf card](https://wiki.sipeed.com/hardware/en/maixIII/ax pi/flash_system.html#Choose TF card) ## Q：No eth0 ip address after running `ifconfig a` A：There is no ip address if the ethernet is not connected to the Internet, check your ethernet connection. Or use command `dhclient eth0` to get the ip address mannaly or visit [config eth0](https://wiki.sipeed.com/hardware/en/maixIII/ax pi/flash_system.html#Connect by Ethernet) to know more. ## Q：Device not found after running uvc A：This might happen on Windows. Check if there is an error in Windows device manager, remove the incorrect device then this error will be solved. ## Q：The device is stuck after running uvc A：Reboot the board ## Q：No wlan0 shown in result after running command `ifconfig` A： Maybe the bad connection between Core Model and ext board because of the express, reconnect them to fix this bad connection. We have two version of the wireless module, and they need different configuration file, run following command to apply your wireless module configuration. ```bash ls /boot/ cp /boot/kernel.img.rtl8189fs kernel.img ``` ## Q：Error `packet_write_wait: Connection to 10.xxx.xxx.xxx port 22: Broken pipe！` after login by ssh A: Reboot device after run Run command `python3 c \"import os, binascii; os.system('sed i \\'/iface eth0 inet dhcp/ahwaddress ether {}\\' /etc/network/interfaces'.format(binascii.hexlify(bytes.fromhex(open('/proc/ax_proc/uid').read().split('0x')[1][: 5]),':').decode('iso8859 1'))) if os.system('grep \\'hwaddress ether\\' /etc/network/interfaces q') ! 0 else exit();\"` in serial port. ## Q：The screen is blurred after booting. ## Q：Sticking Image on screen <html> <img src \"./../../../zh/maixIII/assets/faq_dth.jpg\" width 48%> <img src \"./../../../zh/maixIII/assets/faq_sawtooth.jpg\" width 48%> </html> A：Because of the because of the different batches of screen, the configuration for screen is different, replace the `dtb` file in `/boot/` folder to apply the screen. Make sure not use the wrong configuration file for a long time, which will burn the screen. ```bash ls /boot/ cp /boot/dtb.img.lcd20220830 dtb.img #dtb.img.lcd20221025 dtb.img ``` ## Q：Error `can't open camera by index` when running opencv. A：Check if the camera in the code matches the camera you use. [switch camera](#qhow to switch to os04a10 camera) ## Q：`XERA UBOOT >` is shown from serial port. A：This happens when autoboot is canceled when booting device, use command `boot` to start system. ![faq_boot](./../../../zh/maixIII/assets/faq_boot.jpg) ## The change of hardware Because of some reasons, we change some hardwares, here are what we changed. ### Change of the ext board 1. On the latest ext board we marked `v3768`, and the pervious ext board is not marked. 2. We use `RTL8189FTV` Wifi module on the latest ext board, and the pervious ext board use Wifi module `RTL8723BS`, replace the kernel file to change the configuration. Read [No wlan0](#qno wlan0 shown in result after running command ifconfig) to know more. ```bash ls /boot/ cp kernel.img.rtl8723bs kernel.img # For the previous ext board #cp /boot/kernel.img.rtl8189fs kernel.img ``` ![faq_borad](./../../../zh/maixIII/assets/faq_board.jpg) ### Change of camera The connector direction of camera changed, make sure the `1` on the connector of ext board matches the `1` the connector of the camera. ![faq_sensor](./../../../zh/maixIII/assets/faq_sensor.jpg) ### Change of screen We change the screen into new version, and the dafalut image use the latest version screen, see following photo to know your screen version, and for pervious version screen if need to run command `cp /boot/dtb.img.lcd20220830 dtb.img` to apply the hardware. Read [wrong display](#qscreen display wrong) to know more. ![fqa_newdisplay](./../../../zh/maixIII/assets/fqa_newdisplay.jpg) ## Q：Why I can only use less than 2G ram Why we can only see there is about 1.3G ram for us. ![htop_memory_usage](./assets/qa/htop_memory_usage.png) From the following diagram we cansee the original memory map of Axera 620A evb board, it's equipeed with 1GB ram and is divided into 256MB kernel memory block and 768MB CMM (Contiguous Memory Model) memory block ![faq_ddr](./../../../zh/maixIII/assets/faq_ddr.png) And on Axera Pi we equip 2GB ram, and set 512M CMM memory block and 256M kernel memory block, so there is less than 2GB ram for use. We can see the `insmod /soc/ko/ax_cmm.ko cmmpool anonymous,0,0x60000000,512M` to initialize 512M MMC memery from the `auto_load_all_drv.sh`. ![cmm_memory_size_script](./assets/qa/cmm_memory_size_script.png) CCM memory block is used for NPU and ISP processing, processor will use this CMM memory for imaging processing and model processing task. And the boot args in system. ![bootargs_command](./assets/qa/bootargs_command.png)"},"/hardware/en/maixIII/ax-pi/python_api.html":{"title":"Python on Maix-III AXera-Pi","content":"DateAuthorChange: :: :: :2023.02.04wonderCreatefile2023.03.01wonderAddYolo8modelFinishreading[AXera PiGuide](https://wiki.sipeed.com/hardware/en/maixIII/ax pi/flash_system.html),wecanstartPythonprogrammingonMAIX IIIAXera Pi.##PrefaceFromMIAX IMCU,MAIX IIISOCtoMAIX IIILinuxboard,SIPEEDisdevotedforeasy useofdevelopmentboard,andcreatedmanydocumentsonhowtousethem.IfyouarenotgoodatLinuxorC++,let'susepythontooperateMAIX IIIAXera Pi.###WhatisPython**Python**isahigh level,general purposeprogramminglanguage.Itsdesignphilosophyemphasizescodereadabilitywiththeuseofsignificantindentation.Itisdynamicallytypedandgarbage collected.Itsupportsmultipleprogrammingparadigms,includingstructured(particularlyprocedural),object orientedandfunctionalprogramming.Itisoftendescribedasa\"batteriesincluded\"languageduetoitscomprehensivestandardlibrary.[wikipedia](https://en.wikipedia.org/wiki/Python_(programming_language))![api_python_logo 3.jpg](attachment:api_python_logo 3.jpg) **DifferencebetweenPythonandC++**PythonisakindofScriptinglanguage,thismeansitisinterpretedatruntime,usersrunthecodefilesnamedwithextensionname`py`onPythoninterpreter,instaedofcompilingthemthenrunit.C++iscompilinglanguage,itneedstobecompiledbeforerunning,whichtakesalongtimetocompile.Pythoniseasierforuserstounderstandandstart,whileC++isnormallycomplexanddifficultforuserstostart. **Pythontutorial**[Pythonwebsite](https://www.python.org/)providesmany[documents](https://docs.python.org/3/),whichisenoughforstudyingpython.Besides,use[JupyterNotebook](https://jupyter.org/)tostartpythonaboutAIisagoodidea,whichyouhavetolearnandtry.###WhatisJupyterNotebookTheJupyterNotebookistheoriginalwebapplicationforcreatingandsharingcomputationaldocuments.Itoffersasimple,streamlined,document centricexperience.ThisdocumentiscreatedbyJupyterNotebook,savedallresultsofexamplecodesandexplanationforuserstoread.![api_jupyter.jpg](attachment:api_jupyter.jpg)>Wehaveset`Python3、JupyterNotebook、Pinpong、Pillow`inAXera Piforuserseasy usewithpython,herewetake`JupyterNotebook`asthepythonprogramexample.##RunJupyterNotebookTorunJupyterNotebookon**AXera Pi**,weneedtogettheIPaddressof**AXera Pi**,bothRNDISIPaddressornetworkIPaddressareOK,withthiswecanopentheJupyterNotebookwebsiteapplicationrunon**AXera Pi**.Run`ifconfig`togettheIPaddressof**AXera Pi**,thenruncommand`jupyternotebook`on**AXera Pi**viaaterminal,visitthe`IP:8888`inyourcomputerbrowser(Attention：`ifconfig`commandresult`lo:127.0.0.1`isinaccessible),like`192.168.0.125:8888`(`192.168.0.125`isaexampleIPaddressof**AXera Pi**,seethefollowingpicture),thenyoucanrunyourpythoncodeonJupyterNotebook.![api_adb 2.jpg](attachment:api_adb 2.jpg)>**Note**:Payattentiontotheconnectionbetweencomputerand**AXera Pi**,operatormayfailduetobadconnectionquality.Visitthe`IP:8888`,enter**`root`**tologinifrequiredpassword.![api_root.png](attachment:api_root.png)Click`New`andchoosePython3tonewafilewithpythonkernel.![api_python3.jpg](attachment:api_python3.jpg) Python3：Afilewithpython3kernel TextFile：Atestfile Folder：Newafolder Terminal：Newaterminal##JupyterNotebookbasicusageWeeditthecelltableinJupyterNotebook,thereare`bluecelltable`(Commandmode)and`greencelltable`(Editingmode)twoversions.**`Bluecelltable`(Commandmode)**![green.jpg](attachment:green.jpg)**`Greencelltable`(Editingmode)**![blue.jpg](attachment:blue.jpg)Basicusage： **Shift+Enter：**Runcelltable,movetonextcelltableandenterintocommandmode. **Ctrl+Enter：**Runcelltable,andenterintocommandmode.Editingmode： **Esc**：EnterCommandmodeCommandmode： **h：**Openhelp **Enter：**EnterEditingmode **x：**Cutcelltable **c：**Copycelltable **v：**Pastecelltable **dd：**Deletethiscelltable **ii：**Stoprunningtask **a：**Addcelltableabove **b：**Addcelltablebelow **m：**Changecelltableintomarkdownformat##Runcode>Allexamplesinthisdocumentarerunon`GC4653`camerasensor,visit[Maix IIIAXera Pi(FAQ)](https://wiki.sipeed.com/hardware/en/maixIII/ax pi/faq_axpi.html)toseehowtoswitchcamerasensorifyouuse`OS04A10`nightenhancedcamerasensor.HereareexamplesrunningcodeorcommandonJupyterNotebook,theresultisshowninJupyterNotebookoronboardscreen. **Usecommand`!+cmd`toruncommandorscript**!lshome/images#Runcommandair.jpg carvana02.jpg\t face5.jpg\t o2_resize.jpg ssd_car.jpg\r aoa 2.jpeg carvana03.jpg\t grace_hopper.jpg pineapple.jpg ssd_dog.jpg\r aoa.jpeg carvana04.jpg\t mobileface01.jpg pose 1.jpeg\t ssd_horse.jpg\r bike.jpg cat.jpg\t\t mobileface02.jpg pose 2.jpeg\r bike2.jpg cityscape.png\t mtcnn_face4.jpg pose 3.jpeg\r cable.jpg dog.jpg\t\t mtcnn_face6.jpg pose.jpg\r carvana01.jpg efficientdet.png mv2seg.png\t selfie.jpg!/home/ax samples/build/install/bin/ax_yolov5s m/home/models/yolov5s.joint i/home/images/cat.jpg r10#Runscript model file : /home/models/yolov5s.joint image file : /home/images/cat.jpg img_h, img_w : 640 640 [AX_SYS_LOG] AX_SYS_Log2ConsoleThread_Start Run Joint Runtime version: 0.5.10 [INFO]: Virtual npu mode is 1_1 Tools version: d696ee2f run over: output len 3 Create handle took 487.99 ms (neu 22.29 ms, axe 0.00 ms, overhead 465.70 ms) Repeat 10 times, avg time 22.57 ms, max_time 22.88 ms, min_time 22.46 ms detection num: 1 15: 89%, [ 167, 28, 356, 353], cat [AX_SYS_LOG] Waiting thread(2867848448) to exit [AX_SYS_LOG] AX_Log2ConsoleRoutine terminated!!! exit[AX_SYS_LOG] join thread(2867848448) ret:0fromIPython.displayimportImage#RunpythoncodeImage(\"yolov5s_out.jpg\") **Use`%run`torunscriptfile,hereweuse`hello.py`asexample.**%runhello.pyhello world！##Createmarkdown>Addmarkdowncelltablein**JupyterNotebook**tomakeiteasttoreadthedocument.ClicktheEdittableandchoose`Markdown`toswitchcelltableformat，andincommandmodeclick`M`toswitchthecelltableintomarkdowncelltableformat.![api_markdown 2.jpg](attachment:api_markdown 2.jpg)##Transferfile>WithJyputernotebook,transferfileisalsoOK.Click`Upload`totransferfilefromcomputertoAXera Pi.![api_upload.jpg](attachment:api_upload.jpg) **DownloadfilefromAXera Pitocomputer**DocumenteditonJupyterNotebookcanbedownloadedtocomputer,thedownloadedfileformatis`.ipynb`,click`File` \\>`Downloadas` \\>`yourtargetformat`ifyouwantotherfileformat.![api_file 2.jpg](attachment:api_file 2.jpg)##ax pipeline api[**ax pipeline api：**](https://github.com/junhuanchen/ax pipeline api)isbuilton[ax pipeline](https://github.com/AXERA TECH/ax pipeline),andit'ssuitablefor`pybind11`and`ctypes`,whichisusedforPythonAPIprogramming,withwhichuserscanloadmanybuilt inAImodelsbyPython,orusepythonlibrarylikepinpong、opencv、numpy、pillow.ThesemakeAXera Pieasiertouse.**Whatisthedifferencebetween`ctypes`and`pybind11`**`ctypes`iswhatwefirstusedonAXera Pi,soit'smorestableandhasmoreinterfacethan`pybind11`,while`pybind11`iseasiertoseetheresultfromscreenorwebsiteandit'seasierforpeopletounderstand.Becauseoflimitedperformance,theyshouldnotbeusedatthesametime.Beforerunning`ax pipeline api`,makesureyouhaveinstalledit.Andifyouhavetroublerunningthisapplication,updatingthisapplicationmaybeagoodsolution.!pip3installax pipeline api URequirement already satisfied: ax pipeline api in /usr/local/lib/python3.9/dist packages (1.0.7) Collecting ax pipeline api Using cached ax pipeline api 1.0.7.tar.gz (15.5 MB) Using cached ax pipeline api 1.0.6.tar.gz (19.5 MB)Finishinginstallingorupdating`ax pipeline api`,run`yolov8`modeltohaveatry.##ObjectdetectionwithYolov8(ctypes)importtimefromaximportpipelinepipeline.load(['libsample_vin_ivps_joint_vo_sipy.so',' p','/home/config/yolov8.json',' c','2',])whilepipeline.work():time.sleep(0.001)tmp pipeline.result()iftmpandtmp['nObjSize']:foriintmp['mObjects']:x,y,w,h i['bbox']['x'],i['bbox']['y'],i['bbox']['w'],i['bbox']['h']objname,objprob i['objname'],i['prob']print(objname,objprob,x,y,w,h)#iftmp['nObjSize']>10:#tryexit#pipeline.drop()pipeline.drop()b'toilet' 0.4541160762310028 0.602770209312439 0.9111631512641907 0.16810722649097443 0.08513855934143066 b'toilet' 0.6902503967285156 0.606963574886322 0.9117961525917053 0.16024480760097504 0.08727789670228958 b'toilet' 0.6852353811264038 0.6020327210426331 0.9118891358375549 0.16942621767520905 0.08718493580818176 b'toilet' 0.7014157176017761 0.6041151881217957 0.9120386242866516 0.16582755744457245 0.0863698348402977 b'cup' 0.46080872416496277 0.6049922108650208 0.9143685698509216 0.1643451750278473 0.08425315469503403Asthelogofrunningyolov8above,objectdetectionresultparametersareprintedout.Andthedetectionpictureisshownonboardscreen.>Allexamplesinthisdocumentarerunon`GC4653`camerasensor,changecode`' c','2'`into`' c','0'`ifyouuse`OS04A10`nightenhancedcamerasensor.```pythonpipeline.load(['libsample_vin_ivps_joint_venc_rtsp_vo_sipy.so',' p','/home/config/yolov5s.json',' c','2',#GC4653camerasensor#' c','0',#OS04A10camerasensor])```Wecanalsousingdifferent`.so`libraryorother`AI`modelstodomoreAIusages.Therearealsousefulinformationon[ax pipeline api](https://github.com/junhuanchen/ax pipeline api). Herearethe`ibxxx*.so`libraryinAXera Pi:```bashlibsample_h264_ivps_joint_vo_sipy.so#inputh264videotoivpsjointoutputscreenvolibsample_v4l2_user_ivps_joint_vo_sipy.so#inputv4l2/dev/videoXtoivpsjointoutputscreenvolibsample_rtsp_ivps_joint_rtsp_vo_sipy.so#inputvideofromrtsptoivpsjointoutputrtspandscreenvolibsample_vin_ivps_joint_vo_sipy.so#inputmipisensortoivpsjointoutputscreenvolibsample_vin_ivps_joint_venc_rtsp_sipy.so#inputmipisensortoivpsjointoutputrtsplibsample_vin_ivps_joint_venc_rtsp_vo_sipy.so#inputmipisensortoivpsjointoutputrtspandscreenvolibsample_vin_ivps_joint_vo_h265_sipy.so#inputmipisensortoivpsjointoutputscreenvoandsaveh265videofilelibsample_multi_rtsp_ivps_joint_multi_rtsp_sipy.so#inputmultirtspvideotoivpsjointoutputmultirtspvideo\\n\",libsample_rtsp_ivps_joint_rtsp_sipy.so#inputvideofromrtsptoivpsjointoutputrtsp\\n\",libsample_rtsp_ivps_joint_rtsp_vo_sipy.so#inputvideofromrtsptoivpsjointoutputrtspandscreenvo\\n\",libsample_rtsp_ivps_joint_vo_sipy.so#inputvideofromrtsptoivpsjointoutputscreenvo```Thisisthemaincodeofchanging`ibxxx*.so`.```pythonpipeline.load(['libsample_vin_ivps_joint_venc_rtsp_vo_sipy.so',' p','/home/config/yolov5s.json',' c','2',])``` HerearetheAImodels(whichareinthefolder`/home/config`)inAXera Pi:```bashax_bvc_det.jsonhrnet_pose_yolov8.jsonyolov5s_face_recognition.jsonax_person_det.jsonlicense_plate_recognition.jsonyolov5s_license_plate.jsonax_pose.jsonnanodet.jsonyolov6.jsonax_pose_yolov5s.jsonpalm_hand_detection.jsonyolov7.jsonax_pose_yolov8.jsonpp_human_seg.jsonyolov7_face.jsoncrowdcount.jsonscrfd.jsonyolov7_palm_hand.jsonhand_pose.jsonyolo_fastbody.jsonyolov8.jsonhand_pose_yolov7_palm.jsonyolopv2.jsonyolov8_seg.jsonhrnet_animal_pose.jsonyolov5_seg.jsonyolox.jsonhrnet_pose.jsonyolov5s.jsonhrnet_pose_ax_det.jsonyolov5s_face.json```Thisisthemaincodeofchanging`AImodels`.```pythonpipeline.load(['libsample_vin_ivps_joint_vo_sipy.so',' p','/home/config/yolov5s_face.json',' c','2',])```##Yolov8segmentationimporttimefromaximportpipelinepipeline.load(['libsample_vin_ivps_joint_vo_sipy.so',' p','/home/config/yolov8_seg.json',' c','2',])whilepipeline.work():time.sleep(0.001)tmp pipeline.result()iftmpandtmp['nObjSize']:foriintmp['mObjects']:print(i)#iftmp['nObjSize']>10:#tryexit#pipeline.drop()pipeline.drop(){'label': 39, 'prob': 0.41857901215553284, 'objname': b'bottle', 'bbox': {'x': 0.02848125249147415, 'y': 0.03796946257352829, 'w': 0.03146517649292946, 'h': 0.15615946054458618}, 'bHasMask': 1, 'mYolov5Mask': {'w': 6, 'h': 15, 'data': b'\\x00\\x00\\xff\\xff\\xff\\x00\\x00\\xff\\xff\\xff\\xff\\x00\\x00\\xff\\xff\\xff\\xff\\x00\\x00\\xff\\xff\\xff\\xff\\x00\\x00\\xff\\xff\\xff\\xff\\x00\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\xff\\xff\\xff\\xff\\x00\\xff\\xff\\xff\\xff\\xff\\x00\\xff\\xff\\xff\\xff\\xff\\x00\\xff\\xff\\xff\\xff\\xff\\x00\\xff\\xff\\xff\\xff\\xff\\x00\\xff\\xff\\xff\\xff\\xff\\x00\\xff\\xff\\xff\\xff\\x00\\x00\\xff\\xff\\xff\\xff\\x00\\x00\\xff\\xff\\xff\\xff\\x00\\x00'}} {'label': 39, 'prob': 0.4042961299419403, 'objname': b'bottle', 'bbox': {'x': 0.027379659935832024, 'y': 0.037133704870939255, 'w': 0.033295709639787674, 'h': 0.15926814079284668}, 'bHasMask': 1, 'mYolov5Mask': {'w': 6, 'h': 15, 'data': b'\\x00\\x00\\xff\\xff\\xff\\x00\\x00\\xff\\xff\\xff\\xff\\x00\\x00\\xff\\xff\\xff\\xff\\x00\\x00\\xff\\xff\\xff\\xff\\x00\\x00\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\xff\\xff\\xff\\xff\\xff\\x00\\xff\\xff\\xff\\xff\\xff\\x00\\xff\\xff\\xff\\xff\\xff\\x00\\xff\\xff\\xff\\xff\\xff\\x00\\xff\\xff\\xff\\xff\\xff\\x00\\xff\\xff\\xff\\xff\\xff\\x00\\xff\\xff\\xff\\xff\\x00\\x00\\xff\\xff\\xff\\xff\\x00\\x00\\xff\\xff\\xff\\xff\\x00\\x00'}} {'label': 39, 'prob': 0.4118087887763977, 'objname': b'bottle', 'bbox': {'x': 0.028065890073776245, 'y': 0.03647643327713013, 'w': 0.0326821468770504, 'h': 0.15858806669712067}, 'bHasMask': 1, 'mYolov5Mask': {'w': 6, 'h': 15, 'data': b'\\x00\\x00\\xff\\xff\\xff\\x00\\x00\\xff\\xff\\xff\\xff\\x00\\x00\\xff\\xff\\xff\\xff\\x00\\x00\\xff\\xff\\xff\\xff\\x00\\x00\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\xff\\xff\\xff\\xff\\xff\\x00\\xff\\xff\\xff\\xff\\xff\\x00\\xff\\xff\\xff\\xff\\xff\\x00\\xff\\xff\\xff\\xff\\xff\\x00\\xff\\xff\\xff\\xff\\x00\\x00\\xff\\xff\\xff\\xff\\x00\\x00\\xff\\xff\\xff\\xff\\x00\\x00\\xff\\xff\\xff\\xff\\x00\\x00'}}##Body,vehicleandnon motorvehicledetectionThiscodeisusedfordetectingpeople,vehicleandnon motorvehicle.importtimefromaximportpipelinepipeline.load(['libsample_vin_ivps_joint_vo_sipy.so',' p','/home/config/ax_bvc_det.json',' c','2',])whilepipeline.work():time.sleep(0.001)tmp pipeline.result()iftmpandtmp['nObjSize']:foriintmp['mObjects']:x,y,w,h i['bbox']['x'],i['bbox']['y'],i['bbox']['w'],i['bbox']['h']objname,objprob i['objname'],i['prob']print(objname,objprob,x,y,w,h)#iftmp['nObjSize']>10:#tryexit#pipeline.drop()pipeline.drop()b'vehicle' 0.9299032092094421 0.3565574288368225 0.44399410486221313 0.23071418702602386 0.2580929398536682 b'vehicle' 0.9225113391876221 0.357175350189209 0.44230249524116516 0.23054184019565582 0.2606807053089142 b'vehicle' 0.9186123609542847 0.3581112325191498 0.44336238503456116 0.22992925345897675 0.26163965463638306 b'vehicle' 0.5208129286766052 0.3618425130844116 0.4461480975151062 0.23065532743930817 0.2652992308139801 b'vehicle' 0.7194858193397522 0.3608142137527466 0.45302334427833557 0.23270295560359955 0.2703518867492676 b'vehicle' 0.8540934324264526 0.3617907166481018 0.4548843204975128 0.23152287304401398 0.27814221382141113 b'vehicle' 0.8912967443466187 0.3607788681983948 0.4583750367164612 0.2328854203224182 0.27056747674942017 b'vehicle' 0.8969211578369141 0.3522576689720154 0.45107507705688477 0.22706037759780884 0.26078158617019653 b'vehicle' 0.7722539901733398 0.32488399744033813 0.4447280168533325 0.23074783384799957 0.26997989416122437 b'vehicle' 0.8158320784568787 0.31976011395454407 0.46247294545173645 0.23671922087669373 0.28281715512275696 b'vehicle' 0.9343507289886475 0.332416832447052 0.5008321404457092 0.2320593148469925 0.26590874791145325 b'vehicle' 0.896917462348938 0.3266463875770569 0.48811814188957214 0.23444382846355438 0.266757994890213 b'vehicle' 0.7356315851211548 0.31006965041160583 0.45962005853652954 0.23436705768108368 0.26961490511894226##Crowdcountimporttimefromaximportpipelinepipeline.load(['libsample_vin_ivps_joint_vo_sipy.so',' p','/home/config/crowdcount.json',' c','2',])whilepipeline.work():time.sleep(0.001)tmp pipeline.result()iftmpandtmp['nObjSize']:foriintmp['mObjects']:x,y,w,h i['bbox']['x'],i['bbox']['y'],i['bbox']['w'],i['bbox']['h']objname,objprob i['objname'],i['prob']print(objname,objprob,x,y,w,h)#iftmp['nObjSize']>10:#tryexit#pipeline.drop()pipeline.drop()##Humanposturedetectiononax pose pplThesearethedetectionpoints.**0:Nose1:lefteye2:righteye3:leftear4:rightear5:leftshoulder6:rightshoulder7:leftelbow8:rightelbow9:leftwrist10:rightwrist11:lefthip12:righthip13:leftknee14:rightknee15:leftankle16:rightankle**importtimefromaximportpipelinepipeline.load(['libsample_vin_ivps_joint_vo_sipy.so',' p','/home/config/ax_pose.json',' c','2',])whilepipeline.work():time.sleep(0.001)tmp pipeline.result()iftmpandtmp['nObjSize']:foriintmp['mObjects']:print(i)#iftmp['nObjSize']>10:#tryexit#pipeline.drop()pipeline.drop(){'label': 0, 'prob': 0.41659796237945557, 'objname': b'person', 'bbox': {'x': 0.01200273260474205, 'y': 0.0, 'w': 0.9315435290336609, 'h': 0.9421796798706055}, 'bHasBoxVertices': 0, 'bHasLandmark': 17, 'landmark': [{'x': 0.6708333492279053, 'y': 0.23333333432674408}, {'x': 0.6427083611488342, 'y': 0.16851851344108582}, {'x': 0.6520833373069763, 'y': 0.14629629254341125}, {'x': 0.7322916388511658, 'y': 0.5055555701255798}, {'x': 0.7614583373069763, 'y': 0.06481481343507767}, {'x': 0.7541666626930237, 'y': 0.09444444626569748}, {'x': 0.7541666626930237, 'y': 0.1518518477678299}, {'x': 0.7124999761581421, 'y': 0.15925925970077515}, {'x': 0.5041666626930237, 'y': 0.08703703433275223}, {'x': 0.6739583611488342, 'y': 0.07407407462596893}, {'x': 0.690625011920929, 'y': 0.6814814805984497}, {'x': 0.7833333611488342, 'y': 0.25}, {'x': 0.7614583373069763, 'y': 0.25}, {'x': 0.35104167461395264, 'y': 0.6074073910713196}, {'x': 0.3489583432674408, 'y': 0.5777778029441833}, {'x': 0.0572916679084301, 'y': 0.5185185074806213}, {'x': 0.0677083358168602, 'y': 0.5185185074806213}]}##PillowYolov5sobjectdetectionimporttimefromaximportpipelinefromPILimportImage,ImageDraw#readysipeedlogocanvaslcd_width,lcd_height 854,480img Image.new('RGBA',(lcd_width,lcd_height),(255,0,0,200))ui ImageDraw.ImageDraw(img)ui.rectangle((20,20,lcd_width 20,lcd_height 20),fill (0,0,0,0),outline (0,0,255,100),width 20)logo Image.open(\"/home/res/logo.png\")img.paste(logo,box (lcd_width logo.size[0],lcd_height logo.size[1]),mask None)defrgba2argb(rgba):r,g,b,a rgba.split()returnImage.merge(\"RGBA\",(a,b,g,r))canvas_argb rgba2argb(img)pipeline.load(['libsample_vin_ivps_joint_vo_sipy.so',' p','/home/config/yolov5s.json',#' p','/home/config/yolov8.json',' c','2',])whilepipeline.work():time.sleep(0.001)argb canvas_argb.copy()tmp pipeline.result()iftmpandtmp['nObjSize']:ui ImageDraw.ImageDraw(argb)foriintmp['mObjects']:x i['bbox']['x']*lcd_widthy i['bbox']['y']*lcd_heightw i['bbox']['w']*lcd_widthh i['bbox']['h']*lcd_heightobjlabel i['label']objprob i['prob']ui.rectangle((x,y,x+w,y+h),fill (100,0,0,255),outline (255,0,0,255))ui.text((x,y),str(objlabel))ui.text((x,y+20),str(objprob))pipeline.config(\"ui_image\",(lcd_width,lcd_height,\"ARGB\",argb.tobytes()))pipeline.free()##PillowYolov8objectdetection(pybind11)HaveatryonYolov8objectdetectionvia`pybind11`API,the`pybind11`APIsupportssavecameraimageandthereferenceresultordisplaythemonscreenorwebsite.>It'snotstableenough,rerunjupyternotebookifthereissometingerror.importm3axpi#m3axpi.camera(SysCase 0)#switchos04a10#m3axpi.camera(SysCase 2)#defaultgc4653#m3axpi.load(\"/home/config/yolov8.json\")fromPILimportImage,ImageDraw,ImageFontlcd_width,lcd_height,lcd_channel 854,480,4fnt ImageFont.truetype(\"/home/res/sans.ttf\",20)img Image.new('RGBA',(lcd_width,lcd_height),(255,0,0,200))ui ImageDraw.ImageDraw(img)ui.rectangle((20,20,lcd_width 20,lcd_height 20),fill (0,0,0,0),outline (0,0,255,100),width 20)logo Image.open(\"/home/res/logo.png\")img.paste(logo,box (lcd_width logo.size[0],lcd_height logo.size[1]),mask None)whileTrue:rgba img.copy()tmp m3axpi.capture()rgb Image.frombuffer(\"RGB\",(tmp[1],tmp[0]),tmp[3])rgba.paste(rgb,box (0,0),mask None)##camera320x180paste854x480res m3axpi.forward()if'nObjSize'inres:ui ImageDraw.ImageDraw(rgba)ui.text((0,0),\"fps:%02d\"%(res['niFps']),font fnt)forobjinres['mObjects']:x,y,w,h int(obj['bbox'][0]*lcd_width),int(obj['bbox'][1]*lcd_height),int(obj['bbox'][2]*lcd_width),int(obj['bbox'][3]*lcd_height)ui.rectangle((x,y,x+w,y+h),fill (255,0,0,100),outline (255,0,0,255))ui.text((x,y),\"%s:%02d\"%(obj['objname'],obj['prob']*100),font fnt)rgba.paste(logo,box (x+w logo.size[1],y+h logo.size[1]),mask None)m3axpi.display([lcd_height,lcd_width,lcd_channel,rgba.tobytes()])#display(rgb)显示到网页##ImageprocessinganddisplayingbasedonPillow>**Pillow（PIL）**isthePythonImagingLibrary,isusedforimageprocessingpurposeslikeimagestore,imagedisplayandformatconversion.**HereisaexampletousePythonPillow:**!lshome/imagesair.jpg carvana02.jpg\t face5.jpg\t o2_resize.jpg ssd_car.jpg\r aoa 2.jpeg carvana03.jpg\t grace_hopper.jpg pineapple.jpg ssd_dog.jpg\r aoa.jpeg carvana04.jpg\t mobileface01.jpg pose 1.jpeg\t ssd_horse.jpg\r bike.jpg cat.jpg\t\t mobileface02.jpg pose 2.jpeg\r bike2.jpg cityscape.png\t mtcnn_face4.jpg pose 3.jpeg\r cable.jpg dog.jpg\t\t mtcnn_face6.jpg pose.jpg\r carvana01.jpg efficientdet.png mv2seg.png\t selfie.jpgfromPILimportImage,ImageDrawpil_im Image.open('home/images/bike2.jpg','r')draw ImageDraw.Draw(pil_im)draw.arc((0,0,400,400),start 0,end 300,fill 'red',width 3)draw.rectangle((20,20,200,100),fill (100,20,60),outline \"#FF0000\",width 3)pil_im.show()#display(pil_im) [Clickme](https://www.itcodar.com/python/how to show pil image in ipython notebook.html)toknowmoreusageaboutPillow##CalculationonNumpy>NumPy(NumericalPython)isthefundamentalpackageforscientificcomputinginPython.ItisaPythonlibrarythatprovidesamultidimensionalarrayobject,variousderivedobjects(suchasmaskedarraysandmatrices),andanassortmentofroutinesforfastoperationsonarrays,includingmathematical,logical,shapemanipulation,sorting,selecting,I/O,discreteFouriertransforms,basiclinearalgebra,basicstatisticaloperations,randomsimulationandmuchmore.>**WecanuseNumpyonAXera Pi：**importnumpyasnp#'i1','i2','i4','i8'aresameasint8,int16,int32,int64dt np.dtype('i4')print(dt)int32 Visit[Numpy](https://numpy.org/)formoreinformation##UseUSBcamerawithOpencvConnectUSBcamerawithUSB OTGportofyourAXera Pifirst.**ThisistheOpencvexample**,takeanddisplaythephotoviaUSBcamera.importosimportcv2video cv2.VideoCapture(0)foriinrange(30):ret,frame video.read()ifret:cv2.imwrite(\"/tmp/capture.jpg\",frame)os.system(\"fbon&&fbv/tmp/capture.jpg\")![opencv_cream 2.jpg](attachment:opencv_cream 2.jpg)>Visit[Maix IIIAXera PiQ&A](https://wiki.sipeed.com/hardware/en/maixIII/ax pi/faq_axpi.html)iffailingrunning##Playmedia [PlaymediabyPython](https://wiki.sipeed.com/soft/maixpy3/zh/usage/Audio/play_mp4.html)##UseHttporMQTT [Clickme](https://wiki.sipeed.com/soft/maixpy3/zh/usage/net.html)##UseMicrobitwithPinPongonAXera Pi>[PinPong](https://pinpong.readthedocs.io/zh_CN/latest/)isanopensourcehardwarecontrolpythonlibrary,isbasedonFirmataprotocolandsupportMicroPythonlanguage.ConnectMicrobitwithUSB OTGportofyourAXera Pifirst.RunfollowingexamplecodeonAXera Pi,thereis`helloworld`scrolltextonmicrobit.importtimefrompinpong.boardimportBoard,Pinfrompinpong.extension.microbitimport*Board(\"microbit\",\"/dev/ttyACM0\").begin()display.show(Image.HEART)whileTrue:display.scroll(\"helloworld\")__________________________________________ ____ _ ____ / __ \\(_)___ / __ \\____ ____ ____ _ / /_/ / / __ \\/ /_/ / __ \\/ __ \\/ __ `/ / ____/ / / / / ____/ /_/ / / / / /_/ / /_/ /_/_/ /_/_/ \\____/_/ /_/\\__, / v0.4.9 Designed by DFRobot /____/ __________________________________________ [01] Python3.9.2 Linux 4.19.125 armv7l with glibc2.31 Board: MICROBIT selected > board: MICROBIT serial: /dev/ttyACM0 [10] Opening /dev/ttyACM0 [32] Firmata ID: 2.7 [22] Arduino compatible device found and connected to /dev/ttyACM0 [40] Retrieving analog map... [42] Auto discovery complete. Found 26 Digital Pins and 6 Analog Pins All right. PinPong go... **Visit[PINPONG](https://pinpong.readthedocs.io/zh_CN/latest/index.html)formoreinformation**##ControlArduinoUNOwithPinPongonAXera PiConnectArduinoUNOwithUSB OTGportofyourAXera Pifirst.RunfollowingexamplecodeonAXera Pi,LEDonArduinoUNOblinks.importtimefrompinpong.boardimportBoard,PinBoard(\"uno\",\"/dev/ttyUSB0\").begin()led Pin(Pin.D13,Pin.OUT)#InitpindirectionwhileTrue:led.value(1)#Highvoltageoutputprint(\"1\")#Printinformationtime.sleep(1)#Wait1secondled.value(0)#Lowvoltageoutputprint(\"0\")#Printinformationtime.sleep(1)#Wait1second__________________________________________ ____ _ ____ / __ \\(_)___ / __ \\____ ____ ____ _ / /_/ / / __ \\/ /_/ / __ \\/ __ \\/ __ `/ / ____/ / / / / ____/ /_/ / / / / /_/ / /_/ /_/_/ /_/_/ \\____/_/ /_/\\__, / v0.4.9 Designed by DFRobot /____/ __________________________________________ [01] Python3.9.2 Linux 4.19.125 armv7l with glibc2.31 Board: UNO selected > board: UNO serial: /dev/ttyUSB0 [10] Opening /dev/ttyUSB0 [32] Firmata ID: 2.7 [22] Arduino compatible device found and connected to /dev/ttyUSB0 [40] Retrieving analog map... [42] Auto discovery complete. Found 20 Digital Pins and 6 Analog Pins All right. PinPong go... 1 0 1 0 1 user quit process![uno 3.jpg](attachment:uno 3.jpg) **[Clickme](https://pinpong.readthedocs.io/zh_CN/latest/2.pinpong%E7%A4%BA%E4%BE%8B/%E7%A4%BA%E4%BE%8B%E7%A8%8B%E5%BA%8F blink.html)toseemoreinformation.**"},"/hardware/en/maixIII/ax-pi/axpi.html":{"title":"MAIX-III AXera-Pi","content":" title: MAIX III AXera Pi keywords: MAIX III, AXera Pi, Maix3, Sipeed, ax620a, axera, sipeed, AI, model, maixhub update: date: 2022 12 08 version: v0.1 author: wonder content: Initialize Doc If you think this AI development board are excellent enough and your friends may be interested with this, just share with them this link [http://wiki.sipeed.com/en/m3axpi](http://wiki.sipeed.com/en/m3axpi) ![maixiii_axpi](./../../../../../static/home/maixiii_axpi_en.jpg) > [Official Online Store](https://www.aliexpress.com/item/1005005016931077.html) In the past few years, many Linux AI chips come out. Raspberry Pi and Jetson Nano these boards are really popular by their good performance, but now MAIX III AXera Pi comes out, equipped with the high performance 3.6TOPs@INT8 chip ax620a, which will be your good choice and provice you a really good experience. <p align \"center\"> <img src \"https://axera tech.com/upload/8f/091a2540e7cdc5c7f62df022f80220.jpg\" alt \"img\" style \"zoom: 50%;\" /> </p> We design a core module for this chip, which is convenient if you want to design the ext board for yourself. <table> <thead> <tr> <th colspan 2>MaixIII Core module</th> </tr> </thead> <tbody> <tr> <td>CPU</td> <td>4 * Cortex A7, with NEON and FPU</td> </tr> <tr> <td>NPU</td> <td>14.4Tops@int4，3.6Tops@int8</td> </tr> <tr> <td>ISP</td> <td>4K@30fps</td> </tr> <tr> <td>Codec format</td> <td>H.264, H.265</td> </tr> <tr> <td>Video encode</td> <td>4K@30fps</td> </tr> <tr> <td>Video decode</td> <td>1080P@60fps</td> </tr> <tr> <td>Ethernet</td> <td>Support RGMII / RMII Ethernet</td> </tr> <tr> <td>Display</td> <td>MIPI DSI 4 Lane，up to 4K@30FPS</td> </tr> <tr> <td>DRAM</td> <td>2GB LPDDR4X 3733Mhz</td> </tr> <tr> <td>Storge</td> <td>Optional 16GB EMMC (Boot from TF card by default)</td> </tr> <tr> <td>IO pins</td> <td>DDR4 SODIMM 260P route all IO</td> </tr> </tbody> </table> <! 没错，它就是来自「[爱芯元智](https://axera tech.com/)」的 [AX620A](https://axera tech.com/product/T7297367876123493768)，这是一款高算力，高能效比，低功耗的 AI SoC 芯片，芯片集成了四核 Cortex A7 @ 1Ghz CPU，拥有 3.6TOPs@INT8 的高算力 NPU，支持 4K@30fps 的 ISP，以及支持 H.264、H.265 编码的 VPU，AX620A 还支持 32bit LPDDR4x，支持 EMMC v5.1 / SPI Flash，最多支持 6 路 MIPI 输入，同时最多支持 4 路工作，支持多路子码流，支持 1 路千兆 Ethernet，支持 1 路 USB2.0，支持 2 路 MIPI DSI/CSI 输出。拥有大算力和优异画质处理能力的 AX620A 可以实现更多的 AI 功能，带来最优的 AI 体验！（来自官方） > ## Introduction In WORLD ARTIFICIAL INTELLIGENCE CONFERENCE 2022, this AI board is shown the first tima, like what's in the following picture. <p align \"center\"> <img src \"./../../../zh/maixIII/assets/waic axpi.jpg\" style \"zoom: 70%;\" /> </p> And finally we launched this AI development board equipped with AX620A in 20221001. Its official name is **MAIX III AXera Pi**, while we like to call it **m3axpi** in the following content. <p align \"center\"> <video src \"../../../zh/maixIII/assets/axpi_boom.mp4\" width \"100%\" controls \"controls\" autoplay \"autoplay\" x5 playsinline \"\" \t\tplaysinline \t\twebkit playsinline \"true\" \t\tposter \"../../../zh/maixIII/assets/maix iii small.jpg\" \t\tpreload \"auto\" > </video> </p> So, why is this AI development board good? Lack of documents? Follow our guides, to start journey from embedded Linux development to AI model deployment. High power consumption? Just use one usb cable connecting with USB3.0 port to boot this device, no need of other power supply. Hard in development? Compile your own application just by this board, or train your own AI model online and deploy it on board. Bad camera result? This chip is aimed for AI ISP night vision enhancement, we have adjust the camera to best state. Too expensive? This board sold about 100$, chiper than any other similar board. ## Features ### Camera effect #### Night vision enhancement <table> <tr> <th colspan \"2\">Left picture is original, right picture is enhanced</th> </tr> <tr> <td><img src \"./assets/axpi/night_vision_enhancement_1.jpg\"></td> <td><img src \"./assets/axpi/night_vision_enhancement_2.jpg\"></td> </tr> <tr> <td><img src \"./assets/axpi/night_vision_enhancement_3.jpg\"></td> <td><img src \"./assets/axpi/night_vision_enhancement_4.jpg\"></td> </tr> </table> <! <p align \"center\"> <iframe src \"//player.bilibili.com/player.html?aid 561523949&bvid BV1Ee4y1v7iF&cid 860676576&page 1\" scrolling \"no\" border \"0\" frameborder \"no\" framespacing \"0\" allowfullscreen \"true\" style \"max width:640px; max height:480px;\"> </iframe> </p> > #### Exhibition darkroom The left screen shows the enhanced picture and the righr screen is the original one. <div align \"center\"><img src \"./assets/axpi/exhibition_darkroom.jpg\" alt \"exhibition_darkroom\" ></div> <! <p align \"center\"> <iframe src \"//player.bilibili.com/player.html?aid 430541632&bvid BV1iG41137tx&cid 831645988&page 1&t 83.6\" scrolling \"no\" border \"0\" frameborder \"no\" framespacing \"0\" allowfullscreen \"true\" style \"max width:640px; max height:480px;\"> </iframe> </p> > #### Actual AI effect <p align \"center\"> <iframe src \"//player.bilibili.com/player.html?aid 773227207&bvid BV1B14y1Y7A4&cid 837154353&page 1\" scrolling \"no\" border \"0\" frameborder \"no\" framespacing \"0\" allowfullscreen \"true\" style \"max width:640px; max height:480px;\"> </iframe> </p> ### AI resources #### Support many Operators ![many_operator](./assets/axpi/many_operator.jpg) Screenshots of part operators. [Click me to see whole operator support list](https://pulsar docs.readthedocs.io/en/latest/appendix/op_support_list.html) #### Many archived models Before receiving this board, visit [MaixHub](https://maixhub.com/model/zoo) to see your interested model, choose Platform `axera pi` at the Lower left corner to find model can be deployed on `AX PI` ![maixhub_zoo.jpg](./assets/axpi/maixhub_zoo.jpg) Apart from these, many models are uploaded to [github AXERA TECH/ax samples](https://github.com/AXERA TECH/ax samples), and we also put sme models in sustem image, just burn the system image into SD card and boot it on board to experience these models. Up to now the supported models are as follows: Objects Classification MobileNetv1 [MobileNetv2](https://github.com/AXERA TECH/ax samples/blob/main/examples/README.md#MobileNetv2) MobileOne s0 ResNet18 ResNet50 Others...... Objects Detection [PP YOLOv3](https://github.com/AXERA TECH/ax samples/blob/main/examples/README.md#yolov3paddle) YOLOv3 YOLOv3 Tiny YOLOv4 YOLOv4 Tiny YOLOv4 Tiny 3l [YOLOv5s](https://github.com/AXERA TECH/ax samples/blob/main/examples/README.md#YOLOv5s) [YOLOv5 Lite](https://github.com/AXERA TECH/ax samples/blob/main/examples/README.md#YOLOv5 Lite)([original model](https://github.com/ppogg/YOLOv5 Lite)) [YOLOv7 Tiny](https://github.com/AXERA TECH/ax samples/blob/main/examples/README.md#YOLOv7 Tiny) [YOLOv8s](https://github.com/AXERA TECH/ax samples/tree/main/examples#YOLOv8s) [YOLOX S](https://github.com/AXERA TECH/ax samples/blob/main/examples/README.md#YOLOX S) YOLO Fastest XL NanoDet Human Body Detection YOLO Fastest Body Human Face Detection [scrfd](https://github.com/AXERA TECH/ax samples/blob/main/examples/README.md#Scrfd) [YOLOv5 Face](https://github.com/AXERA TECH/ax samples/blob/main/examples/README.md#YOLOv5 Face)([original model](https://github.com/deepcam cn/yolov5 face)) Human Face Segmentation Face_Parsing Obstacles Detection Robot Obstacle Detect Object detection of Uav view [YOLOv5s_visdrone](https://github.com/AXERA TECH/ax samples/blob/main/examples/README.md#YOLOv5s_visdrone) Monocular 3D Vehicle Detection [Monodlex](https://github.com/AXERA TECH/ax samples/blob/main/examples/README.md#Monodlex) Human body Key points [HRNet](https://github.com/AXERA TECH/ax samples/blob/main/examples/README.md#HRNet) [AX POSE PPL](https://github.com/AXERA TECH/ax samples/blob/main/examples/README.md#AX POSE PPL) [HandPose](https://github.com/AXERA TECH/ax samples/blob/main/examples/README.md#HandPose) Human body Segmentation [PP HumanSeg](https://github.com/AXERA TECH/ax samples/blob/main/examples/README.md#PP HumanSeg) Semantics Segmentation [PP Seg](https://github.com/AXERA TECH/ax samples/blob/main/examples/README.md#MobileSeg) Classic CV CropResize Pipeline example NV12 > CropResize > NN(Classification) Visit [Deploy models to AX Pi (Maix III(M3) series) board](/ai/en/deploy/ax pi.html) to deploy models to AX Pi. <! <p align \"center\"> <img src \"./../../../en/maixIII/assets/ai_guide.jpg\" style \"zoom: 75%;\" /> </p> > #### Tranning your models [[m3axpi] YOLOv5 train and convert model guide](https://github.com/Abandon ht/m3axpi_model/blob/main/yolov5/README.md) [[m3axpi] YOLOv8 train and convert model guide](https://github.com/Abandon ht/m3axpi_model/blob/main/yolov8/README.md) #### Online tranning model Now the [MaixHub](https://maixhub.com/welcome) has been upgraded, with more friendly interface and more functions, here are steps to tranning model online. <p align \"center\"> <img src \"./assets/axpi/test_maixhub.jpg\" style \"zoom: 100%;\" /> </p> <! > m3axpi does not support deploy model by scanning QR code while m2dock can do, m3axpi only can be deployed models by local operations. > <! <p align \"center\"> <iframe src \"//player.bilibili.com/player.html?aid 597374704&bvid BV1eB4y1Q74i&cid 741940038&page 1\" scrolling \"no\" border \"0\" frameborder \"no\" framespacing \"0\" allowfullscreen \"true\" style \"max width:640px; max height:480px;\"> </iframe> </p> > #### Share your model There are your model and codes or programs to run the model after you finish training the model, you can share these on [Maixhub](https://maixhub.com/model/zoo) to others, let's have fun and build the model Community together. <p align \"center\"> <img src \"./assets/axpi/share_model.jpg\" style \"zoom: 75%;\" > </p> ### Cases > Updated in 20221205 <p align \"center\"> <img src \"./assets/axpi/demo_one.jpg\" style \"zoom: 100%;\"> <img src \"./assets/axpi/demo_two.jpg\" style \"zoom: 100%;\"> </p> ### Linux development #### Used on debian We provide a linux image based on debian11, and you can boot this board from SD card after you burn the system image into SD card. We aim to make it easiler for user to use. Besides, it's really conveient to program AI development with Python API. 1. Burning image: [WIKI AXera Pi Burn image](https://wiki.sipeed.com/hardware/en/maixIII/ax pi/flash_system.html#Burn system image) 2. Basic usage：[WIKI AXera Pi guide](./flash_system.html) 3. Program with Python：[ax_pipeline_api](https://github.com/junhuanchen/ax_pipeline_api) <! 4. 开发笔记：[[maixpy3 axpi] 关于爱芯 ax620a 移植 debian11 系统这件事](https://www.cnblogs.com/juwan/p/16751348.html) 5. 开发笔记：[[maixpy3 axpi] 编辑发布 debian 镜像与在 PC 上交叉编译程序 ](https://www.cnblogs.com/juwan/p/16769237.html) > #### BSP SDK We provide source code, api documents, sdk usages, visit [sdk usage](https://wiki.sipeed.com/hardware/zh/maixIII/ax pi/sdk_usage.html) to get more. ##### [ax sample](https://github.com/AXERA TECH/ax samples) Here are typical AI models provided by Axera for development, evaluation and verification, those who are good at AI development or want to test these models can have a try, and these are not involved with peripherals. 1. [examples](https://github.com/AXERA TECH/ax samples/tree/main/examples) 2. [PP YOLOv3](https://github.com/AXERA TECH/ax samples/blob/main/examples/README.md#yolov3paddle) 3. [PP HumanSeg](https://github.com/AXERA TECH/ax samples/blob/main/examples/README.md#MobileSeg) 4. [PP Seg](https://github.com/AXERA TECH/ax samples/blob/main/examples/README.md#PP HumanSeg) ##### [libmaix](https://github.com/sipeed/libmaix) A unified embedded development environment come by SIPEED, includes camera, screen, vision, image processing and pipelines related deployment examples, is suitable for those who want to learn embedded Linux. 1. [Test screen display](https://github.com/sipeed/libmaix/tree/release/examples/display) 2. [Screen displays camera content](https://github.com/sipeed/libmaix/tree/release/examples/axpi) 3. [camera + screen + yolov5 model](https://github.com/sipeed/libmaix/tree/release/examples/axpi_yolov5_cam) ##### [axpi_bsp_sdk](https://github.com/sipeed/axpi_bsp_sdk) BSP development package for business, provided by Axera. It's the original development package for this chip, containing components like uboot、linux、msp 、sample、rtsp、ipcdemo, and this is progressively open source, you can get these codes for commercial evaluation, such as ipcdemo, but normally these codes are complex and highly coupled, those who are experienced enough and want to use this board for business cooperation can try this. 1. Development documents [docs](https://github.com/sipeed/axpi_bsp_sdk/tree/main/msp/sample/vo_fb) 2. Platform application [ipcdmeo](https://github.com/sipeed/axpi_bsp_sdk/tree/main/app/IPCDemo) 3. Peripheral Verification[sample](https://github.com/sipeed/axpi_bsp_sdk/tree/main/msp/sample) ##### [ax pipeline](https://github.com/AXERA TECH/ax pipeline) AX Pipeline is provided by Axera. With m3axpi, this project is used for pepole to know the usages of ISP, image processing, NPU, codec and display, which is convenient for developers to quickly evaluate and develop their own multimedia applications. 1. [Quick compilation](https://github.com/AXERA TECH/ax pipeline/blob/main/docs/compile.md) Simple cross platform compilation based on cmake. 2. [How to replace into my own trained yolov5 model](https://github.com/AXERA TECH/ax pipeline/blob/main/docs/how_to_deploy_custom_yolov5_model.md) 3. [How to deploy my other models](https://github.com/AXERA TECH/ax pipeline/blob/main/docs/how_to_deploy_custom_model.md) 4. [How to adjust the image orientation](https://github.com/AXERA TECH/ax pipeline/blob/main/docs/how_to_adjust_image_orientation.md) 5. [ModelZoo](https://github.com/AXERA TECH/ax pipeline/blob/main/docs/modelzoo.md) descriptions for models which are supported or to be supported ## Hardware <p align \"center\"> <img src \"./../../../zh/maixIII/assets/waiguan1.jpg\" style \"zoom: 51%;\" /> <img src \"./../../../zh/maixIII/assets/maix iii small.jpg\" style \"zoom: 80%;\" /> <img src \"./../../../zh/maixIII/assets/waiguan2.jpg\" style \"zoom: 45%;\" /> </p> ### Hardware function diagram <p align \"center\"> <img src \"./../../../zh/maixIII/assets/layout_axpi_2.png\" alt \"layout_axpi_2\" width \"45%\"> <img src \"./../../../zh/maixIII/assets/layout_axpi_1.png\" alt \"layout_axpi_1\" width \"45%\"> </p> ### Core module parameters <table> <thead> <tr> <th colspan 2>MaixIII Core module</th> </tr> </thead> <tbody> <tr> <td>CPU</td> <td>4 * Cortex A7, with NEON and FPU</td> </tr> <tr> <td>NPU</td> <td>14.4Tops@int4，3.6Tops@int8</td> </tr> <tr> <td>ISP</td> <td>4K@30fps</td> </tr> <tr> <td>Codec format</td> <td>H.264, H.265</td> </tr> <tr> <td>Video encode</td> <td>4K@30fps</td> </tr> <tr> <td>Video decode</td> <td>1080P@60fps</td> </tr> <tr> <td>Ethernet</td> <td>Support RGMII / RMII Ethernet</td> </tr> <tr> <td>Display</td> <td>MIPI DSI 4 Lane，up to 4K@30FPS</td> </tr> <tr> <td>DRAM</td> <td>2GB LPDDR4X 3733Mhz</td> </tr> <tr> <td>Storge</td> <td>Optional 16GB EMMC (Boot from TF card by default)</td> </tr> <tr> <td>IO pins</td> <td>DDR4 SODIMM 260P route all IO</td> </tr> </tbody> </table> ### Ext board parameters <table> <thead> <tr> <th colspan 2> Ext board </th> </tr> </thead> <tbody> <tr> <td>Camera</td> <td> Maixmum supported 3 cameras (Default connecting one camera):<br> 1 MIPI 4 LANE + 2 MIPI 2 LANE</td> </tr> <tr> <td>Display</td> <td>Maixmum supported 4 LANE MIPI DSI</td> </tr> <tr> <td>SD card slot</td> <td>Default boot from SD card</td> </tr> <tr> <td>Recording</td> <td>2 onboard MEMS MIC support dual MIC noise reduction</td> </tr> <tr> <td>Audio output</td> <td>Support 3.5MM interface, used for stereo output or MIC input</td> </tr> <tr> <td>Network</td> <td>Support Gigabit Ethernet (ETH) and 2.4GHZ WI FI</td> </tr> <tr> <td>USB </td> <td>1 x USB2.0HS osed for OTG or HOST<br>1 x USB UART</td> </tr> <tr> <td>Others</td> <td>1 User key，<br>3 x System keys，<br>1 x RTC，<br>2 x LEDs</td> </tr> <tr> <td>Interface</td> <td>Reserved CJTAG，used for connecting corresponding debugger，<br> 2 x 12 pin headers，<br>4 x M2.5 screw positioning holes</td> </tr> </tbody> </table> [Hardware summary informations](https://dl.sipeed.com/shareURL/MaixIII/AXera) [Datasheet](https://dl.sipeed.com/shareURL/MaixIII/AXera/01_Specification) [Schematic](https://dl.sipeed.com/shareURL/MaixIII/AXera/02_Schematic) [Bit map](https://dl.sipeed.com/shareURL/MaixIII/AXera/03_Bit_number_map) [3D file](https://dl.sipeed.com/shareURL/MaixIII/AXera/05_3D_file) [Dimension](https://dl.sipeed.com/shareURL/MaixIII/AXera/04_Dimensional_drawing) [GC4653 Camera DS](https://dl.sipeed.com/shareURL/MaixIII/AXera/07_Chip_manual) ### Camera comparison Low end camera gc4653 400w basic experience <p align \"center\"> <img src \"./../../../zh/maixIII/assets/ax620a_gc.jpg\" style \"zoom: 100%;\" /> </p> High end camera os04a10 400w enhanced night vision edition <p align \"center\"> <img src \"./../../../zh/maixIII/assets/ax620a_os.jpg\" style \"zoom: 100%;\" /> </p> > [How to change camera](./faq_axpi.html) ## Others Online AI: http://maixhub.com Documents: http://wiki.sipeed.com Github: http://github.com/sipeed > Visit [Maix III AXera Pi (FAQ)](./faq_axpi.html) if you have trobule."},"/hardware/en/maixIII/ax-pi/dev_prepare.html":{"title":"Maix-III AXera-Pi SDK development","content":" title: Maix III AXera Pi SDK development keywords: MAIX III, AXera Pi, Maix3, Sipeed, ax620a, axera update: date: 2023 02 12 version: v0.1 author: wonder content: Initialize Doc > Before reading, it's necessary to know basic usage about `gcc` and `make`. ## Preparation We have told basic operation like burning system and using AXera Pi in previous article, which help you know how to use AXera Pi. For embedded linux, we usually use cross compile technology to compile out the application for target linux device. A cross compiler is a compiler capable of creating executable code for a platform other than the one on which the compiler is running. For example, a cross compiler executes on machine X and produces machine code for machine Y. Normally our computer have better performance than target embedded linux device, compiling the executable on our computer, then run the application on target embedded linux device. This saves more time than compiling and running on target embedded linux device. For example, `ax sample` takes more than 10 minutes to be compiled on AXera Pi, but it takes less than one minute on your computer. Above all, for embedded development, coree compile technology is commom and it's necessary to know about this if you want to save your time. ## Transfer files Compiling out the application on our computer, we need send the application to AXera Pi. `SSH` (Secure Shell) enables secure system administration and file transfers over insecure networks. `Serial` application tool is OK to transfer files but it's too slow. ### Transfer file with SSH There are many good SSH application on Windows, here we use [Mobaxterm](https://mobaxterm.mobatek.net/) to login AXera Pi and Transfer file. [Mobaxterm Usage Demo](https://mobaxterm.mobatek.net/demo.html) ![mobaxterm_transfer_file](./assets/dev_prepare/mobaxterm_transfer_file.jpg) Besides, [Vscode](https://code.visualstudio.com/) is also a gooe idea for transfering file. Install the [Remote SSH](https://marketplace.visualstudio.com/items?itemName ms vscode remote.remote ssh) and [Remote Explorer](https://marketplace.visualstudio.com/items?itemName ms vscode.remote explorer) extensions, then login to AXera Pi via vscode SSH. ![transfer_file_vscode](./assets/flash_system/transfer_file_vscode.jpg) ### Transfer file with scp scp means `ssh + cp`. Here is the command to transfer file. ```bash scp [option] /path/to/source/file user@server ip:/path/to/destination/directory ``` `/path/to/source/file` Target file/folder sent from host to device `user@server ip` : Remote target device IP address. `/path/to/destination/directory` Target device directory to receive the file/folder ### Use card reader Because of different file system, it's only suggested to use this way if operating system of your computer is Linux. ### Transfer file with UART For linux users, install `lrzsz` first (`sudo apt git install lrzsz`) and use it to finish this Windows user can use Mobaxterm to transfer file between computer and AXera Pi via USB UART connection. ## Compile on AXera Pi Here we tell how to compile application on AXera Pi. Because serial port connector is slow and can be only opened by only one application at one time, we usually login to AXera Pi by SSH, which we can open many terminals and enter different commands in dirrerent ssh terminal at the same time. ![ssh_mutiple_terminals](./assets/dev_prepare/ssh_mutiple_terminals.jpg) ### Vscode remote We have told how to login to AXera Pi via SSH with vscode, login to AXera Pi by Vscode first, make sure not install [C/C++](https://marketplace.visualstudio.com/items?itemName ms vscode.cpptools) extension of vscode on AXera Pi, this extension may close SSH connnection. Click ① and ② to open a SSH connection. ![vscode_ssh_connect](./assets/dev_prepare/vscode_ssh_connect.jpg) Here we take `192.168.233.1` IP address as example, make sure not forget add username `root` at first. `root@IP_address` ![vscode_ssh_connect_example_ip](./assets/dev_prepare/vscode_ssh_connect_example_ip.jpg) Choose platform `Linux` and `Continue`. <img alt \"vscode_ssh_connect_linux_platform\" src \"./assets/dev_prepare/vscode_ssh_connect_linux_platform.jpg\" width \"45%\"> <img alt \"vscode_ssh_connect_continue\" src \"./assets/dev_prepare/vscode_ssh_connect_continue.jpg\" width \"45%\"> Eenter password `root` to login ![vscode_ssh_connect_enter_password](./assets/dev_prepare/vscode_ssh_connect_enter_password.jpg) Succeed logining to AXera Pi. ![vscode_ssh_connect_succeed_login](./assets/dev_prepare/vscode_ssh_connect_succeed_login.jpg) Click `Open Folder` to see your AXera Pi directory structure. ![transfer_file_vscode](./assets/flash_system/transfer_file_vscode.jpg) Use command <code>Ctrl + Shift + `</code> to new a terminal, run following command to compile <code>libmiax</code> application. Example compiling command: ```bash cd /home/libmaix/examples/axpi/ # Open source code directory python3 project.py build # Compile the project fbon # Enable screen control ./dist/start_app.sh # Run compiled out application ``` ![compiling_example_code](./assets/dev_prepare/compiling_example_code.jpg) Running the commands above, screen displays camera content, use `Ctrl + c` to stop this application if you want to do other task. ![compiling_stop_example](./assets/dev_prepare/compiling_stop_example.jpg) ### Mobaxterm Using Mobaxtern to login AXera Pi is a good idea for windows user. Complie libmaix example on AXera Pi: ![mobaxterm_compile_application](./assets/dev_prepare/mobaxterm_compile_application.jpg) ## Cross compiling on computer We compile out the application for AXera Pi on our computer first. AXera Pi is based on Cortex A7 arm architecture, while normally our computer is based on x86 64 architecture, these two different architectures are based on different instruction set. The binary executable program normally can not be executed on the same OS if the cpu architecture is not the same because different architecture means different instruction set. We can install the compiler for arm architecture on our computer, compiled by this compiler, we get the program which can execute on arm architecture device like AXera Pi. Here we compile the program based on ubuntu, then send the compiled program to AXera Pi and run on it. Install the compiler for AXera Pi first. ```bash sudo apt install gcc arm linux gnueabihf ``` Run following command to check your installation. ```bash arm linux gnueabihf gcc ``` The result should be as following. ![arm_linux_gxx_file_not_found](./assets/dev_prepare/arm_linux_gxx_file_not_found.jpg) New a C file named `cross_test.c`, and compile it by `arm linux gnueabihf gcc`. The content of the C file like this: ```c #include <stdio.h> int main(){ printf(\"Hello, AxPi!\\n\"); return 0; } ``` Then use following command to compile the C file. ```bash arm linux gnueabihf gcc o test cross_test.c static ``` Then we get the executable file named `test` on our computer, and if we run `./test`, it says `Exec format error`. Check file format of `test`, we can see it's `ELF 32 bit LSB executable, ARM, EABI5` ![test_program_example](./assets/dev_prepare/test_program_example.jpg) So it can only be executed on Axera Pi, sending the `test` executable file to AxPi, and on Axera Pi this program works well. ```bash csp test root@192.168.233.1:/home ``` By this command, we succeed upload the `test` executable file to Axera Pi via rndis protocol by `scp` commmand. And note that the password requirement of running command above is `root`. Then we can run `test` executable file on Axera Pi. ![hello_axpi](./assets/dev_prepare/hello_axpi.jpg) We finish cross compile. ## SDK Repositories Here are repositories for AXera Pi, check them if you need. ### libmaix [libmaix](https://github.com/sipeed/libmaix) is unified embedded development environment come by SIPEED, includes camera, screen, vision, image processing and pipelines related deployment examples, is suitable for those who want to learn embedded Linux. ### ax sample [ax sample](https://github.com/AXERA TECH/ax samples) includes typical AI models provided by Axera for development, evaluation and verification, those who are good at AI development or want to test these models can have a try, and these are not involved with peripherals. ### axpi_bsp_sdk [axpi_bsp_sdk](https://github.com/sipeed/axpi_bsp_sdk) is the bsp development package for business usage. It's the original development package for this chip, containing components like uboot、linux、msp 、sample、rtsp、ipcdemo, and this is progressively open source, you can get these codes for commercial evaluation, such as ipcdemo, but normally these codes are complex and highly coupled, those who are experienced enough and want to use this board for business cooperation can try this. ### ax pipeline [ax pipeline](https://github.com/AXERA TECH/ax pipeline) is provided by Axera. With m3axpi, this project is used for pepole to know the usages of ISP, image processing, NPU, codec and display, which is convenient for developers to quickly evaluate and develop their own multimedia applications. ## SDK usage There are guides in each SDK Repositories. Here we tells how to build the program for AXera Pi with SDK Repositories. To begin this, we need install `git`, `cmake` first. ### libmaix #### Get SDK ```bash git clone https://github.com/sipeed/libmaix.git recursive ``` #### Compile SDK We have said that we can compile on AXera Pi or cross compile on our computer and send to AXera Pi. <! ### [libmaix](https://github.com/sipeed/libmaix) > /home/ 目录已预置，可以 git pull 联网拉取更新。 对于 `libmaix`， 按照其`README.md` 文件描述的方法编译即可， 不过需要在`menuconfig`命令中选择 `AXera Pi` 作为编译目标。 这里简要介绍一下编译过程（libmaix 目前还未稳定，未来可能会有大的更新），实际以[libmaix 仓库](https://github.com/sipeed/libmaix)代码和说明为准。 * 先安装依赖 ``` apt install build essential cmake python3 sshpass git ``` > sshpass 也可以不安装， build essential, cmake, git, python3 必须安装 * 克隆仓库到本地或者开发板 ``` git clone https://github.com/sipeed/libmaix recursive ``` >! 注意 ` recursive` 参数是必须的，用以克隆子模块，否则会缺代码。 这里以在开发板上编译为例： ```bash cd /home/libmaix # git clone https://github.com/sipeed/libmaix recursive cd examples/axpi python3 project.py distclean # python3 project.py menuconfig # 可以配置相关参数 python3 project.py build # 如果增加文件了，需要 python3 project.py rebuild 命令 ./dist/start_app.sh # 运行示例程序 ``` > ### ax samples Repository: [Click me](https://github.com/AXERA TECH/ax samples) This SDK has been set in `/home` path of AXera Pi, read [ax samples](https://github.com/AXERA TECH/ax samples) for more help. ```bash cd /home/ax samples # git clone https://github.com/AXERA TECH/ax samples.git mkdir build cd build cmake .. make install ``` THen we get the executable program, which is in `ax samples/build/install/bin/` directory ### [axpi_bsp_sdk](https://github.com/sipeed/axpi_bsp_sdk) Repository: [Click me](https://github.com/sipeed/axpi_bsp_sdk) Read [readme](https://github.com/sipeed/axpi_bsp_sdk/blob/main/readme.md) for more information, and read document here [Click me](https://github.com/sipeed/axpi_bsp_sdk/tree/main/docs). The `on pc` of `run your program` [readme](https://github.com/sipeed/axpi_bsp_sdk/blob/main/readme.md) is sending the executable program to AXera Pi first, then run it. ## SDK with AI To load AI vision model, we need to use camera, screen and AI model. Here are several Repositories which can help you this. ### Build with libmaix (Easy for developmrnt, for quick verification) [axpi libmaix](https://github.com/sipeed/libmaix/tree/release/examples/axpi) [axpi_classification_cam](https://github.com/sipeed/libmaix/tree/release/examples/axpi_classification_cam) [axpi_yolov5_cam](https://github.com/sipeed/libmaix/tree/release/examples/axpi_yolov5_cam) > 20221113 This SDK is only for test, no optimization include. ### Build with ax pipeline (Medium difficulty, for optimization) This SDK is based on `bsp sdk`(axpi_bsp_sdk), and with better proformance. [Compile prepare](https://github.com/AXERA TECH/ax pipeline/blob/main/docs/compile.md) [Use yolov5 model](https://github.com/AXERA TECH/ax pipeline/blob/main/docs/how_to_deploy_custom_yolov5_model.md) [Use other models](https://github.com/AXERA TECH/ax pipeline/blob/main/docs/how_to_deploy_custom_model.md) ### Build with ipcdemo (Hard for developmrnt, business suggessted) Based on axpi_bsp_sdk, difficult code with good proformance, it's suggessed for business development. [axpi_bsp_sdk/app/IPCDemo](https://github.com/sipeed/axpi_bsp_sdk/tree/main/app/IPCDemo)"},"/hardware/en/maixIII/ax-pi/flash_system.html":{"title":"AXera-Pi Guide","content":" title: AXera Pi Guide tags: AXera Pi, Burn image keywords: AXera Pi，Burn, image desc: AXera Pi Burn image update: date: 2022 01 09 version: v0.2 author: wonder content: Finish editing date: 2022 12 09 version: v0.1 author: wonder content: Create this File ## Product guideline To make it easier to use this board, we prepare this guide. ## OS introduction **The default AXera Pi kit has no onboard memory storage, so it's necessary to prepare a TF card to boot this device.** For Axera Pi, we provide Debian11 Bullseye image file. > ![debian_logo](./../../../zh/maixIII/assets/debian_logo.jpg) > [Reasons to use Debian](https://www.debian.org/intro/why_debian.en.html). TF card which has been burned system image can be bought from [Sipeed aliexpress](https://sipeed.aliexpress.com/store/1101739727), otherwise you need to prepare your own system image TF card by following steps. ## Choose TF card People who have bought the TF card which has been burned system image can skip this chapter and read [start Linux](#boot axera pi) to use this board We have tested the read and write speed of some TF cards on Axera pi, for users to make the choice of TF card. ![sd](./../../../zh/maixIII/assets/flash_system/sd.jpg) > Some TF cards are added to test after this photo, so they are not in this photo but they can be recognized by their number. Number Model <p style \"white space:nowrap\">Write speed（Write 160MB）</p> <p style \"white space:nowrap\">Read speed（Read 160MB） </p> 1. Netac A2 P500 HS 64GB 2.04697 s, 80.0 MB/s 1.8759 s, 87.3 MB/s 2. Samsung microSDXC UHS I 128G (Bule card) 2.53387 s, 64.7 MB/s 1.99882 s, 82.0 MB/s 3. EAGET T1 series 64G 6.56955 s, 24.9 MB/s 7.13792 s, 23.0 MB/s 4. Keychron microSDXC UHS I 128G 2.28133 s, 71.8 MB/s 1.92001 s, 85.3 MB/s 5. KIOXIA microSDXC UHS I 32G 6.71284 s, 24.4 MB/s 2.36794 s, 69.2 MB/s 6. Netac A1 32GB 4.31411 s, 38.0 MB/s 2.00759 s, 81.6 MB/s 7. BanQ JOY card platinum 64G 9.08105 s, 18.0 MB/s 9.02843 s, 18.1 MB/s 8. Hiksemi HS TF P2 64G 2.28079 s, 71.8 MB/s 1.87698 s, 87.3 MB/s The following TF cards are not in this photo but we also tested them. Number Model <p style \"white space:nowrap\">Write Speed (Write 160MB) </p> <p style \"white space:nowrap\">Read Speed (Read 160MB) </p> 1. Lexar 64GB TF（MicroSD）C10 U3 V30 A2 2.59644 s, 63.1 MB/s 1.9106 s, 85.8 MB/s 2. Lexar 128GB TF（MicroSD）C10 U3 V30 6.73793 s, 24.3 MB/s 6.94079 s, 23.6 MB/s ## Burn system image ![flash](./../../../zh/maixIII/assets/axpi flash.png) We only reserved EMMC pad on board, so we need a TF card which has been burned system image to boot linux on this board. ### Get image Because the system image is about 2G memory storage, we only provide mega link to download. Visit mega [Click me](https://mega.nz/folder/9EhyBbJZ#lcNhhm9aWXOyo2T0DDaSqA) to download the image file. ![debian](./assets/flash_system/debian.jpg) The file name ends with `img.xz` is the compressed system image file, and the other file name ends with `img.xz.md5sum` is the check file, which we use to check the compressed system image file. The name rule of compressed system image file is `Image provider` _ `Target chip` _ `Linux distribution` _ `Created time` + `img.xz` The check file should be used in Linux, and users using windows10 or windows 11 can use the wsl to prepare a Linux environment Run command `md5sum c *.md5sum*` in the path where compressed system image file and check file are to check the compressed system image file. Check succeeded Check failed ![md5sum_success](./../../../zh/maixIII/assets/flash_system/md5sum_success.jpg) ![md5sum_failed](./../../../zh/maixIII/assets/flash_system/md5sum_failed.jpg) If there is some thing with the compressed system image file, it will show FAILED. Normally we don't need to check the compressed system image file, this is only for those who need it. ### Burn image **Before burning the image, we need to do the following preparation:** A TF card with a storage capacity card over 8GB. It is recommended to buy an official image card, otherwise it may lead to a bad experience due to the bad performance of the TF card A card reader: It is recommended to use the card reader that supports USB3.0, this will save time on burning the system image card. [Etcher](https://www.balena.io/etcher/) application: Download the edition of this application suitable for your computer system. **Burning system image steps** Run [Etcher](https://www.balena.io/etcher/ \"Etcher\") application, click `Flash from file`, choose the compressed system image `img.xz` file， then click `Select target` to choose the TF card，click `FLASH` to burn your TF card. **Burn the TF card** ![burn_image_by_etcher](./../../../assets/maixIII/ax pi/burn_image_by_etcher.gif) Burning Finish burning ![axera_burning_image](./../../../assets/maixIII/ax pi/axera_burning_image.png) ![finish_flash](./../../../zh/maixII/M2A/assets/finish_flash.png) Note that after finishing burning the application shows `Flash Complete!` and `Successful`. Finishing the above steps, the computer will ask us to format the udisk, we just ignore this information and remove the TF card (Because we have made `Successful` in Etcher), prepare for the following operations. ### Burning Questions #### 1. After selecting system image, Etcher shows error. Rerun Etcher application to solve this error due to software cache or other issues #### 2. After finishing burning software the application shows FAILED not Successful Reburn the TF card. #### 3. The storage capacity of tf card is too small In this case, those who use Windows and MaxOS can use [SD Card Formatter](https://www.sdcard.org/downloads/formatter/eula_windows/SDCardFormatterv5_WinEN.zip) to format tf card, and those who use Linux can format the tf card by [Gparted](https://gparted.org/). ## Boot System Finishing burning system image into tf card, we can assemble this board and boot this device. ![axpi connect](./../../../zh/maixIII/assets/axpi connect.png) ### Assemble this board > Those who have bought the `Full board package` can skip these steps and visit [boot Axera pi] to start. **Preparation** An AXera Pi development board At least one USB3.0 connector to connect device(This board may fail to boot because of insufficient power supply from USB2.0) A tf card which has been burned system image GC4653 camera or OS04a10 camera The 5 inch MIPI screen suitable for Axera pi ![axpi config](./../../../zh/maixIII/assets/axpi config.jpg) **Follow these steps to make sure you assemble them correctly** 1. Set the screen and the board as shown in the image below, and connect them. 2. Insert tf card which has been burned system image into the card slot on Axera pi. 3. Connect the camera with Axera pi as shown in the image below, make sure you have removed the cover on the camera after finishing connecting. <html> <img src \"./../../../zh/maixIII/assets/mipi.jpg\" width 48%> <img src \"./../../../zh/maixIII/assets/sensor.jpg\" width 48%> </html> **Camera connection** There are 2 versions of camera, make sure the `1` on the camera matches the `1` on the board. Wrong connection will burn and distory the camera. <img src \"./../../../zh/maixIII/assets/senror_v3751.jpg\" width 48%> <img src \"./../../../zh/maixIII/assets/sensor_v3753.jpg\" width 48%> Different onboard fpc camera connector meets different driver, we use `CAM0` as the default one. ### Boot AXera Pi Connect both `USB UART` and `USB OTG` port with computer by USB type c cable to boot AXera Pi, make sure you have inserted the tf card which has been burned system image. ![start](./../../../zh/maixIII/assets/start.jpg) Because of the change of screen version, visit [bad display](https://wiki.sipeed.com/hardware/en/maixIII/ax pi/faq_axpi.html#Q%EF%BC%9AThe screen is blurred after booting) if your screen does not display the picture well. > In **20221013** we update the power on phenomenon: The 3.5mm connector plays the music if connected with device. 5 inches screen displays picture. The logs are printed to USB UART port, run serial port application to see it if you need. Here are the drivers for CH340 which is the USB UART chip on Axera Pi, install it if you can't see the serial device on your computer. [CH34x Windows driver](https://dl.sipeed.com/shareURL/MAIX/tools/ch340_ch341_driver) [CH34x Linux driver](http://www.wch ic.com/downloads/CH341SER_LINUX_ZIP.html) If logs are not printed on serial terminal, press `RST` key on AXera Pi to restart device. And those who use Ubuntu22.04 may not be able to open serial port (ttyUSB), read [this](https://www.chippiko.com/ch340 dev ttyusb not showing) to see the solution. .. details:: Click to see the system boot log of debian11 ```bash Vddr init success! The system boot form EMMC enter boot normal mode U Boot 2020.04 (Jun 16 2022 00:16:34 +0800) Model: AXERA AX620_demo Board DRAM: 1 GiB NAND: unknown raw ID 77ee0178 uclass_get_device: Invalid bus 0 (err 524) 0 MiB initr_pinmux: delay pinmux_init for env board id MMC: enter sdhci_cdns_get_cd call mmc_getcd enter sdhci_cdns_get_cd call mmc_getcd mmc@10000000: 0, mmc@4950000: 1 Loading Environment from MMC... OK In: serial Out: serial Err: serial MMC: no card present sd card is not present enter normal boot mode Net: reset EMAC0: ethernet@0x4970000 ... Warning: ethernet@0x4970000 (eth0) using random MAC address 6a:e4:fd:58:97:ea eth0: ethernet@0x4970000 Hit any key to stop autoboot: 0 reading DTB and BOOT image ... reading bootimg header... MAGIC: AXERA! img size: 4841536 kernel_size: 4841472 kernel_addr: 64 id:bc 19 bb a7 2d 27 74 de 7c 91 4b 70 ea c9 ab 96 50 61 bd e0 2b 02 8b e5 c8 ee 22 ce df b1 cf ea load kernel image addr 0x40008000,load dtb image addr 0x48008000 boot cmd is :bootm 0x40008000 0x48008000 ## Booting kernel from Legacy Image at 40008000 ... Image Name: Linux 4.19.125 Image Type: ARM Linux Kernel Image (uncompressed) Data Size: 4839952 Bytes 4.6 MiB Load Address: 40008000 Entry Point: 40008000 Verifying Checksum ... OK ## Flattened Device Tree blob at 48008000 Booting using the fdt blob at 0x48008000 Loading Kernel Image Using Device Tree in place at 48008000, end 480103d6 Starting kernel ... Welcome to Debian GNU/Linux 11 (bullseye)! [ OK ] Created slice system getty.slice. [ OK ] Created slice system modprobe.slice. [ OK ] Created slice system serial\\x2dgetty.slice. [ OK ] Created slice User and Session Slice. [ OK ] Started Dispatch Password …ts to Console Directory Watch. [ OK ] Started Forward Password R…uests to Wall Directory Watch. [ OK ] Reached target Local Encrypted Volumes. [ OK ] Reached target Network is Online. ...... ``` ## Login AXera Pi ![start](./../../../zh/maixIII/assets/start.jpg) > When the logo above is displayed on the screen of AXera Pi, the system has finished booting, and we can login to AXera Pi. ![axpi login](./../../../zh/maixIII/assets/axpi login.png) The first time to login to device, we need to use serial port application to open the serial port to communicate with the device to login, and using SSH login is also OK if you know the ip address of your board. [MobaXterm](https://mobaxterm.mobatek.net/) is a ultimate toolbox for remote computing, we use this software to run our command on the board for example. ![ssh](https://wiki.sipeed.com/hardware/zh/maixIII/assets/ssh.jpg) ### Login by serial port We take MobaXterm as an example serial port software, you can use your favorite one. In MobaXterm, we create a serial session. Set baudrate 115200, then click OK to create it. ![mobaxterm serial 4](./../../../../soft/maixpy3/zh/tools/assets/mobaxterm serial 4.png) Then click the created serial session to open the serial port to build communication. ![mobaxterm serial 5](./../../../../soft/maixpy3/zh/tools/assets/mobaxterm serial 5.png) Run the serial port application, use username `root` and password `root` to login. The password is not displayed when you enter it, so just retry if you fail to login. ![axera_pi_serial_root_login](./assets/flash_system/axera_pi_serial_root_login.jpg) ### Login by SSH To login by SSH, we need to know the ip address of Axera Pi. #### Traditional ip address We make Axera Pi and the computer in a same network environment, then run command `ifconfig` on Axera Pi to get the ip address of Axera Pi in this network environment. But you need to make sure you have connected Axera Pi to network, visit [Connect to network](#connect to network) to know how to connect to network. #### RNDIS Connect the computer with USB OTG port on Axera Pi. ![otg](https://wiki.sipeed.com/hardware/zh/maixIII/assets/otg.jpg) Normally RNDIS is driver free in Linux, and in Windows we need to update the driver [Click me](./rndis.html), for macos it needs to build and install `horndis` to use RNDIS. Deflaut RNDIS driver error in Windows: ![rndis_error_device](./assets/flash_system/rndis_error_device.jpg) Run command `ifconfig`, we can see there is a usb device with IP `192.168.1.233`, we'll use this ip address many times in the following content. ![ifconfig_usb_ip_address](./assets/flash_system/ifconfig_usb_ip_address.jpg) #### Login to board Up to now you have get one of your ip address, run command `ssh {username}@{ip address}` to connect to your board. Here we take the RNDIS ip address for example to connect Axera Pi by SSH, and the username is root, you can use other ip address or username you like if you have created the new user. ```bash ssh root@192.168.233.1 ``` ![ssh_rndis_connect](./assets/flash_system/ssh_rndis_connect.jpg) ## Connect to network Axera Pi connects to network through network cable or wireless. ### Connect by Ethernet Connect the board ethernet port with a network gateway by network cable. Run command `ifconfig eth0` to see whether there is the ip address. ![nmtui_eth0_ifconfig](./assets/flash_system/nmtui_eth0_ifconfig.jpg) If there is no ip address of eth0 after connecting with network gateway, run command `dhclient eth0 & ` to get the ip address manually. ![nmtui_eth0_dhclient](./assets/flash_system/nmtui_eth0_dhclient.jpg) And we can also use command `ifdown eth0` to disable Ethernet, and then use `ifup eth0 force` to restart Ethernet to get the ip address. ### Wireless network 1. Run command `ifconfig wlan0` to see whether there is the wireless device first, if there is no wireless device, visit [AXera Pi Q&A](https://wiki.sipeed.com/hardware/en/maixIII/ax pi/faq_axpi.html#Q%EF%BC%9ANo wlan0 shown in result after running command %3Ccode%3Eifconfig%3C/code%3E) to solve this problem. And only 2.4GHz wireless network is feasible. 2. Run command `nmtui connect` to open a wireless internet graphical interface. ![nmtui](./../../../../hardware/zh/maixIII/assets/nmtui.jpg) 3. Run command `ifconfig wlan0` to see whether there is the ip address. ![nmtui_wlan0_ifconfig](./assets/flash_system/nmtui_wlan0_ifconfig.png) Besides, Run command `nmcli device wifi connect Sipeed_Guest password qwert123` can also connect to wireless network, change the `Sipeed_Guest` into your wireless network name and change `qwert123` into your wireless network password. It will autoconnect to the wireless network when turnning on. ## Config System ### System time Maix III AXera Pi uses the NTP protocol to update the system time. You can run the `date` command to get the current system time. > After connecting to Internet, system will automatically run `ntpdate debian` to update system time. #### Change timezone Maix III AXera Pi default timezone is GMT+8, you can change it with command `dpkg reconfigure tzdata` if necessary. ![system_time_timezone](./assets/flash_system/system_time_timezone.jpg) #### Update time Run `ntpdate debian` command after connecting Maix III AXera Pi to network to update time. ### Install software Based on debian, we can use `apt` to install the software on Maix III AXera Pi. Change the software resource if you think it's slow to download the software. Here we install `gcc`, `gparted`. ```bash sudo apt update sudo apt install gcc gparted ``` ![install_software_gcc_gparted](./assets/flash_system/install_software_gcc_gparted.jpg) ### Reboot/Shutdown device For Linux we suggest rebooting or shutting down the device by command line instead of disconnecting the USB cable or clicking the reset key, which may destory the file system. Run command `reboot` to restart device. ```bash reboot ``` Run command `shutdown` to power off device. ```bash poweroff ``` ### Enlarge system memory Run command `lsblk` to see the partition information, then resize the memory partition by command `cfdisk /dev/mmcblk2`. ![enlarge_memory_lsblk](./assets/flash_system/enlarge_memory_lsblk.jpg) Then the following similar interface shown, and we choose `/dev/mmcblk2p2` by arrow keyboard `↑` `↓`, select the `Resize` below by arrow keyboard `←` `→`. ![rizese mmcblk2](./../../../zh/maixIII/assets/rizese mmcblk2.png) The whole free space is resized by default, and you can enter your desired memory storage. ![new resize](./../../../zh/maixIII/assets/new resize.png) Enter your desired memory storage, and press Enter keyboard to save your temp change. Use arrow keyboard `←` `→` and choose `Write` to apply your change, and enter `yes` to confirm the change. ![write disk](./../../../zh/maixIII/assets/write disk.png) Use arrow keyboard `←` `→` and select `Quit` to quit the storage partition. ![quit](./../../../zh/maixIII/assets/quit.jpg) Finishing these, we run command `df h` to see the disk space usage, and we can see that the resized memory storage is not applied, we use command `resize2fs /dev/mmcblk2p2` to change the size of `mmcblk2`, and run command `df h` again to see the applied change. ![df mmcblk2](./../../../zh/maixIII/assets/df mmcblk2.jpg) > `reboot` first if there is some trouble resizing the storage memory. ### Boot script The boot script is in `/boot` and named `rc.local`, you can edit it if you need. The boot script uses the root directory `/` by default, for example, if you want to run `/home/run.sh` at startup: 1. Use the absolute path to run the script background `/home/run.sh & `, if it's not running background we may not be able to control the board by command line anymore. 2. Use the relative path to run the script background `cd /home && ./run.sh &`, note that the path is different from the absolute path. Here is the default boot script. ```bash root@AXERA:~# cat /boot/rc.local ``` ```txt #!/bin/sh # this file is called by /etc/rc.local at boot. # systemctl stop usb gadget@g0 # mkdir p /mnt/udisk && mount /dev/sda1 /mnt/udisk # python3 /mnt/udisk/alltest.py # this control lcd backlight(50 ~ 1000) echo 0 > /sys/class/pwm/pwmchip0/export echo 1000 > /sys/class/pwm/pwmchip0/pwm0/period echo 500 > /sys/class/pwm/pwmchip0/pwm0/duty_cycle echo 1 > /sys/class/pwm/pwmchip0/pwm0/enable # wifi connect ssid Sipeed_Guest pasw qwert123 nmcli device wifi connect Sipeed_Guest password qwert123 if [ f \"/root/boot\" ]; then cd /root/ && chmod 777 * && ./boot & elif [ d \"/root/app\" ]; then cd /root/app && chmod 777 * if [ f \"./main\" ]; then ./main & elif [ f \"./main.bin\" ]; then ./main.bin & elif [ f \"./main.py\" ]; then python3 ./main.py & fi else aplay /home/res/boot.wav >/dev/null 2>&1 & /opt/bin/sample_vo_fb v dsi0@480x854@60 m 0 >/dev/null 2>&1 & sleep 0.8 && /home/fbv 1.0b/fbv /home/res/2_480x854.jpeg && killall sample_vo_fb & python3 c \"import os, binascii; os.system('sed i \\'/iface eth0 inet dhcp/ahwaddress ether {}\\' /etc/network/interfaces'.format(binascii.hexlify(bytes.fromhex(open('/proc/ax_proc/uid').read().split('0x')[1][: 5]),':').decode('iso8859 1'))) if os.system('grep \\'hwaddress ether\\' /etc/network/interfaces q') ! 0 else exit();\" & fi exit 0 ``` ![start](./../../../zh/maixIII/assets/start.jpg) From the boot script `rc.local`, we can see that `/home/res/2_480x854.jpeg` is what is displayed on the screen, and you can change it if you need. ### Update kernel and driver The first partition of system image card is mounted at `/boot` after booting, and replace with the file we can update the firmware to fit our hardware after rebooting the device. `boot.bin` spl initialize file `uboot.bin` uboot boot file `kernel.img` linux kernel `dtb.img` linux device tree For example: Update device tree: `cp /boot/dtb.img.lcd20221025 /boot/dtb.img` Update kernel `cp /boot/kernel.img.rtl8723bs /boot/kernel.img` Then reboot device to apply the new configuration. ## Transfer file > If you need to transfer file to AXera Pi, here are some ways to do this. ### SD card reader Because of the `ext4` format file system, those who use Windows/Mac can't open the file without other application, so it's only suggested to open the tf image card in Linux. And it's also a good idea to transfer by u disk connected to the USB OTG port on AXera Pi. ### Connect to computer #### Network SSH We have told the way to login AXera Pi by [SSH](#login by ssh), and with [mobaxterm](https://mobaxterm.mobatek.net/) it's really convenient to transfer files on Windows. Besides, login by ssh on [vscode](https://code.visualstudio.com/), we can transfer file by the Vscode Explorer. ![transfer_file_vscode](./assets/flash_system/transfer_file_vscode.jpg) Besides, we can not only use mobaxterm for file transfer, but also run X11 on this software if you login by ssh. This is an example of running gparted on Axera Pi with X11 on mobaxterm. ![transfer_file_mobaxterm](./assets/flash_system/transfer_file_mobaxterm.jpg) #### Serial communication If you connect the board with computer by [serial port](#serial communication), after installing the `lrzsz` application by command `apt get install lrzsz` after AXera Pi is connected to network, we can transfer it by `minicom` on Linux or [mobaxterm](https://mobaxterm.mobatek.net/) on Windows. ## Check the peripheral ### Built in application Maix III AXera Pi includes some Built in Linux applications, and they are in `ls /opt` directory. ```bash root@AXERA:~# ls /opt ``` ```bash bin include lib scripts share ``` And some resources are in the `/home` directory ```bash root@AXERA:~# tree L 1 /home ``` ```bash ├── ax samples # npu ai sdk bin # Ax example applications ├── examples # Ax example applications ├── fbv 1.0b # fbv picture viewer ├── images # Test pictures ├── libmaix # simple pipeline sdk ├── models # Built in AI models ├── res # Pictures and fonts ├── systemd usb gadget # Config usb service ├── usb uvc gadget # Config uvc service └── ustreamer # mjpeg application ``` We have put `gcc g++ gdb libopencv ffmpeg` into the Linux system image, with which we can compile the application on AXera Pi. Here is an example using libmaix： ```bash cd /home/libmaix/examples/axpi/ python3 project.py build fbon ./dist/start_app.sh ``` Screen displays the content of camera, if you failed running this application, visit [AXear Pi Q&A](./faq_axpi.html) to see how to switch camera. ![libmaix](./../../../zh/maixIII/assets/libmaix.jpg) The axsample has been compiled, and its joint models are in `/home/models/` directory for people to use. ```bash /home/ax samples/build/install/bin/ax_yolov5s m /home/models/yolov5s.joint i /home/images/cat.jpg r 10 fbon fbv yolov5s_out.jpg ``` Screen shows the yolovs_out.jpg picture file, `reboot` system if there is something occupying the system resources ![cat](./../../../zh/maixIII/assets/cat.jpg) Run `git pull` to get the latest libmaix code. ### Pin maps ![layout_axpi](./../../../zh/maixIII/assets/layout_axpi_1.png) ### RTC There is a RTC(Real Time Clock) on the ext board under the Core module, which provides the read time for Maix III AXera Pi when not accessed wireless. Use command `hwclock w f /dev/rtc0` to write current system time into RTC to adjust its time date. Run command `ls /sys/class/rtc`, we can see two rtc devices: `rtc0` and `rtc1`, `rtc0` is the Real Time Clock on the ext board and `rtc1` is the AXera Pi internal Real Time Clock. ![rtc0_data_time](./assets/flash_system/rtc0_data_time.jpg) ### CPU & RAM Default runs at 800MHz, and can be changed into 1GHZ. By command `ax_lookat`, we can get the values of memory. ![ax_look_at](./assets/flash_system/ax_look_at.jpg) Set cpu at 800MHz: ```bash root@AXERA:~# ax_lookat 0x01900000 s 33 ``` View cpu frequency: ``` root@AXERA:~# ax_clk AX620A: DDR: 3733 MHz CPU: 800 MHz BUS of VPU: 624 MHz BUS of NPU: 624 MHz BUS of ISP: 624 MHz BUS of CPU: 624 MHz NPU OTHER: 800 MHz NPU GLB: 24 MHz NPU FAB: 800 MHz NPU CORE1: 800 MHz NPU CORE0: 800 MHz ISP: 533 MHz MM: 594 MHz VPU: 624 MHz ``` Set cpu at 1GHz: ``` root@AXERA:~# ax_lookat 0x01900000 s 35 ``` View cpu frequency: ``` root@AXERA:~# ax_clk AX620A: DDR: 3733 MHz CPU: 1000 MHz BUS of VPU: 624 MHz BUS of NPU: 624 MHz BUS of ISP: 624 MHz BUS of CPU: 624 MHz NPU OTHER: 800 MHz NPU GLB: 24 MHz NPU FAB: 800 MHz NPU CORE1: 800 MHz NPU CORE0: 800 MHz ISP: 533 MHz MM: 594 MHz VPU: 624 MHz ``` ### VIDEO This is a demo for testing camera, visit [built in application](#built in applications) for more usages. gc4653 （Defaule camera） os04a10（Night enhanced camera） ```bash sample_vin_vo c 2 e 1 s 0 v dsi0@480x854@60 # For gc4653 camera # sample_vin_vo c 0 e 1 s 0 v dsi0@480x854@60 # For os04a10 camera ``` ![video](./../../../zh/maixIII/assets/video.jpg) > Those using os04a10 visit [AXera Pi](https://wiki.sipeed.com/hardware/en/maixIII/ax pi/faq_axpi.html#Q%EF%BC%9AHow to switch to os04a10 camera%EF%BC%9F) to see how to switch camera. ### DISPLAY Because of the change of screen version, visit [bad display](https://wiki.sipeed.com/hardware/en/maixIII/ax pi/faq_axpi.html#Q%EF%BC%9AThe screen is blurred after booting.) if your screen does not display well. Run command `sample_vo v dsi0@480x854@60 m 0` we can see there is colorbar on the screen to test the screen display, make sure you have disabled the framebuffer with command `fboff`, otherwise this `sample_vo v dsi0@480x854@60 m 0` will not work, and use command hotkey `Ctrl` + `c` to cancel the command is you want to stop running the application. #### Show a picture Now we use framebuffer (/dev/fb0) to control the camera content, run command `fbon` to enable the framebuffer, and `fboff` to disable the framebuffer. When `/dev/fb0` is enabled, we can display picture on the screen by command `fbv xxx.jpg`, and some pictures have been stored in `/home/res/` directory, display them by yourself. ![_home_res](./assets/flash_system/_home_res.jpg) ``` fbon # enable framebuffer fbv /home/res/logo.png # display picture fboff # disable framebuffer ``` ![fbv_logo](./../../../zh/maixIII/assets/fbv_logo.jpg) #### Play video We can play video via `ffmpeg`. The video should be `BGR format`, with `90° clockwise rotation` and `480*854 resolution`. If you think the video plays too fast, run `ffmpeg i /home/kun_1_output.mp4 vf \"setpts 2*PTS\" test3.mp4` to rebuild a slow video. ```bash fbon ffmpeg i /home/test3.mp4 pix_fmt rgba f fbdev /dev/fb0 fboff ``` In python we can run all commands above by `os.system()`. ```python import os os.system(\"fbon\") os.system(\"fbv /home/res/logo.png\") os.system(\"fboff\") os.system(\"fbon\") os.system(\"ffmpeg i /home/test3.mp4 pix_fmt rgba f fbdev /dev/fb0\") os.system(\"fboff\") ``` ### NPU The NPU examples are in the `/home/ax samples/build/install` directory, just run them to see their results. ```bash fbon /home/ax samples/build/install/bin/ax_yolov5s m /home/models/yolov5s.joint i /home/images/cat.jpg r 10 fbv yolov5s_out.jpg ``` ### AUDIO There is a 3.5mm audio connector on AXera Pi, we can use is to play or record audio, here are examples to test this peripheral, it's a bit loud, change the volume by `alsamixer`. ![alsamixer](./../../../zh/maixIII/assets/alsamixer.jpg) And these are examples: **Test command**：`speaker test t sine f 440 c1` **Record audio**: `arecord test.wav c 2 f cd d 2` **Play audio**：`aplay test.wav` And this is a python example to record and play the audio. ```python import pyaudio try: chunk 1024 # Each chunk will consist of 1024 samples sample_format pyaudio.paInt16 # 16 bits per sample channels 2 # Number of audio channels fs 44100 # Record at 44100 samples per second time_in_seconds 30 p pyaudio.PyAudio() stream p.open(format sample_format, channels channels, rate fs, frames_per_buffer chunk, input True, output True) # Store data in chunks for 3 seconds for i in range(0, int(fs / chunk * time_in_seconds)): data stream.read(chunk) stream.write(data) finally: # Stop and close the Stream and PyAudio stream.stop_stream() stream.close() p.terminate() ``` ### USB There is a USB OTG port on AXera Pi, we can change its function to be a OTG device or HOST device. #### USB OTG RNDIS We set this function as the default function of USB OTG port, with this we can see there is a usb RNDIS device in the device manager and we can login to AXera Pi by SSH with ip `192.168.233.1` if connecting the computer with AXera Pi via its USB OTG port. [Click me](#rndis) to know how to login with RNDIS by ssh. ![ssh usb](./../../../zh/maixIII/assets/ssh usb.jpg) The system enables amd starts this service by command `systemctl enable usb gadget@g0` and `systemctl start usb gadget@g0`, run command `systemctl disable usb gadget@g0` to disable this service or command `systemctl stop usb gadget@g0` to stop this service, by stopping this we can use this USB OTG port for other functions, we'll describe these in the following content. #### USB HOST Device Stop the RNDIS service with command `systemctl stop usb gadget@g0`, then run command `systemctl start usb gadget@g1` to set the USB OTG port as the HOST function, connect a USB device with the USB OTG port, run command `lsusb` to check the usb device. Here are the example logs(To read a usb storage device and mount it on AXera Pi). ```bash root@AXERA:~# systemctl stop usb gadget@g0 root@AXERA:~# lsusb Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub Bus 001 Device 002: ID 067b:2731 Prolific Technology, Inc. USB SD Card Reader Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub root@AXERA:~# fdisk l Disk /dev/mmcblk2: 58.94 GiB, 63281561600 bytes, 123596800 sectors Units: sectors of 1 * 512 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disklabel type: dos Disk identifier: 0x32eb5429 Device Boot Start End Sectors Size Id Type /dev/mmcblk2p1 * 2048 264191 262144 128M c W95 FAT32 (LBA) /dev/mmcblk2p2 264192 123596799 123332608 58.8G 83 Linux Disk /dev/sda: 240 MiB, 251658240 bytes, 491520 sectors Disk model: SD Card Reader Units: sectors of 1 * 512 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disklabel type: dos Disk identifier: 0x0607cfd2 Device Boot Start End Sectors Size Id Type /dev/sda1 * 240 490239 490000 239.3M e W95 FAT16 (LBA) root@AXERA:~# mkdir /mnt/sdcard && mount /dev/sda1 /mnt/sdcard ``` #### USB OTG CAM **usb uvc gadget**：[usb uvc gadget](https://github.com/junhuanchen/usb uvc gadget) Visit [uvc_vo](#uvc_vo) to find out more. #### USB HOST CAM With this example we can connect a USB camera to AXera Pi USB OTG port, and display the usb camera content in the browser, so we need to make sure AXera Pi has connected to the network first, and we need to get the ip address of AXera Pi, with which we can view the usb camera content in the browser. **Ustreamer**：[Github](https://github.com/pikvm/ustreamer) Run the following code, and open the ip address of AXera Pi in a web browser. ```bash /home/ustreamer/ustreamer device /dev/video0 host 0.0.0.0 port 80 ``` ![ustreamer_adb](./../../../zh/maixIII/assets/ustreamer_adb.png) We have these choices: ![ustreamer](./../../../zh/maixIII/assets/ustreamer.png) Streamer example: ![ustreamer_snapshot](./../../../zh/maixIII/assets/ustreamer_snapshot.jpg) **Read USB Camera by OPENCV** Run following python code to display the USB camera content on the screen of AXera Pi by OPENCV ```python import os import cv2 video cv2.VideoCapture(0) for i in range(30): ret, frame video.read() if ret: cv2.imwrite(\"/tmp/capture.jpg\", frame) os.system(\"fbon && fbv /tmp/capture.jpg\") ``` ![opencv](./../../../zh/maixIII/assets/opencv.jpg) ![opencv_cream](./../../../zh/maixIII/assets/opencv_cream.jpg) > Visit [AXera Pi FAQ](./faq_axpi.html) if you have some trouble. ### GPIO #### Read KEY input：GPIO2 21 This is the USER key on AXera Pi. Config the USER key first. ```bash echo 85 > /sys/class/gpio/export # export the USER key echo in > /sys/class/gpio/gpio85/direction # set the exported USER key direction ``` Get the USER key value ```bash cat /sys/class/gpio/gpio85/value # Get the value of USER key, 1 is unpressed and 0 is pressed ``` #### Blink a LED GPIO2 A4 68 A5 69 Export the LED IO and set its direction. ```bash echo 68 > /sys/class/gpio/export echo out > /sys/class/gpio/gpio68/direction ``` Set led IO voltage value to control the LED. ```bash echo 1 > /sys/class/gpio/gpio68/value sleep 1 echo 0 > /sys/class/gpio/gpio68/value sleep 1 echo 1 > /sys/class/gpio/gpio68/value ``` > Calculating Rule: GPIO2 A4 32 * 2 + 4 68 For Axera chip, GPIO0 means A IO port and GPIO2 means C IO port, and example like A4 is just a siginal. GPIO2 A4 in AXera Pi is GPIO C(2) 4(A4) in standard definition , and standard definition GPIOA0 means IO GPIO0A4 in AXera Pi. In the future, we'll apply definition like PA0 and PC4, which is easier to understand. Here we use Python to control the GPIO, from the following figure, we can see that the BOT_GPIO_0 7 of the pin headers are GPIO2_A16_m GPIO2_A23_m in the system. ![io_pin_map](./../../../zh/maixIII/assets/io_pin_map.png) The relationship between PA0 3 and the figure above is as follows: ![](./../../../../hardware/zh/maixIII/assets/gpio_axpi.png) We use Python3 libgpiod to encapsulate gpio class. ```python try: from gpiod import chip, line, line_request config None # rpi is default value A 0 def gpio(gpio_line 0, gpio_bank \"a\", gpio_chip 0, line_mode line_request.DIRECTION_OUTPUT): global config if config ! None and gpio_line in config: gpio_bank, gpio_chip config[gpio_line] l, c [32 * (ord(gpio_bank.lower()[0]) ord('a')) + gpio_line, chip(\"gpiochip%d\" % gpio_chip)] tmp c.get_line(l) cfg line_request() # led.active_state line.ACTIVE_LOW cfg.request_type line_mode # line.DIRECTION_INPUT tmp.request(cfg) tmp.source \"GPIO chip %s bank %s line %d\" % (gpio_chip, gpio_bank, gpio_line) return tmp def load(cfg None): global config config cfg except ModuleNotFoundError as e: pass ``` GPIO input test: ```python led0 gpio(16, gpio_chip 2, line_mode line_request.DIRECTION_INPUT) led1 gpio(17, gpio_chip 2, line_mode line_request.DIRECTION_INPUT) led2 gpio(18, gpio_chip 2, line_mode line_request.DIRECTION_INPUT) led3 gpio(19, gpio_chip 2, line_mode line_request.DIRECTION_INPUT) def test(): import time print(led0.get_value()) print(led1.get_value()) print(led2.get_value()) print(led3.get_value()) time.sleep(1) print(time.asctime()) while True: test() ``` GPIO output test： ```python led0 gpio(16, gpio_chip 2, line_mode line_request.DIRECTION_OUTPUT) led1 gpio(17, gpio_chip 2, line_mode line_request.DIRECTION_OUTPUT) led2 gpio(18, gpio_chip 2, line_mode line_request.DIRECTION_OUTPUT) led3 gpio(19, gpio_chip 2, line_mode line_request.DIRECTION_OUTPUT) def test(): import time time.sleep(1) led0.set_value(1) led1.set_value(1) led2.set_value(1) led3.set_value(1) time.sleep(1) led0.set_value(0) led1.set_value(0) led2.set_value(0) led3.set_value(0) print(time.asctime()) while True: test() ``` C example to control gpio: [gpio.h/gpio.c](https://www.cnblogs.com/juwan/p/16917802.html#gpio pwm) ### UART The default uart port of USB UART is **ttyS0**, and the UART on the pin header is **ttyS1**, the virtual USRT is **ttyGS0**. ![uart_tty](./../../../zh/maixIII/assets/uart_tty.jpg) Here is a `python3 pyserial` example code to test the UART on the pin header, make sure you have connected the GND on your UART TTL with the GND on the AXera Pi. ```python import serial ser serial.Serial('/dev/ttyS1', 115200, timeout 1) ser.write(b'hello world\\n') ser.close() ``` Example [ uart.h/uart.c ](https://www.cnblogs.com/juwan/p/16917802.html#linux uart ttysx) ### PWM Here we change the brightness of the screen of AXera Pi to test the pwm example **Example**：Run command `echo 204 > /sys/class/pwm/pwmchip0/pwm0/duty_cycle` and the screen is only one tenth of the original brightness. ```bash echo 0 > /sys/class/pwm/pwmchip0/export echo 4167 > /sys/class/pwm/pwmchip0/pwm0/period echo 204 > /sys/class/pwm/pwmchip0/pwm0/duty_cycle echo 2084 > /sys/class/pwm/pwmchip0/pwm0/duty_cycle echo 1 > /sys/class/pwm/pwmchip0/pwm0/enable ``` PWM Example：[Click me](https://wiki.sipeed.com/soft/maixpy3/zh/usage/hardware/PWM.html#%E5%BC%80%E5%A7%8B). ### I2C > The I2C on the pin header is `/dev/i2c 7` in AXera Pi, we use command `i2cdetect` to check the i2c device. ![i2c_detect](./assets/flash_system/i2c_detect.jpg) The `i2c 0`, `i2c 1`, `i2c 2` are the camera interface, and `i2c 7` is the connector on pin header, `i2c 8` is the RTC clock, and `i2c 9` is reserved. ![i2c_dev](./assets/flash_system/i2c_dev.jpg) For example we use command `i2cdetect y 0` to see the device on the i2c bus. If you can't detect your i2c device, make sure you have pulled up the data line. ```bash root@AXERA:~# i2cdetect y r 0 0 1 2 3 4 5 6 7 8 9 a b c d e f 00: 10: 20: 21 30: 36 40: 50: 60: 70: ``` The **0x21** 和 **0x36** in the log means there is a i2c device connecting to the `/dev/i2c 0` connector, and we can use command `i2cget` to read the data of the i2c device or command `i2cset` to write the i2c device. ### SPI ### CHIP ID Get the unique chip id of the main chip. ```bash cat /proc/ax_proc/uid ``` ### ADC ### Factory test script .. details::This is the factory test python script ```python test_flag False try: from gpiod import chip, line, line_request config None # rpi is default value A 0 def gpio(gpio_line 0, gpio_bank \"a\", gpio_chip 0, line_mode line_request.DIRECTION_OUTPUT): global config if config ! None and gpio_line in config: gpio_bank, gpio_chip config[gpio_line] l, c [32 * (ord(gpio_bank.lower()[0]) ord('a')) + gpio_line, chip(\"gpiochip%d\" % gpio_chip)] tmp c.get_line(l) cfg line_request() # led.active_state line.ACTIVE_LOW cfg.request_type line_mode # line.DIRECTION_INPUT tmp.request(cfg) tmp.source \"GPIO chip %s bank %s line %d\" % (gpio_chip, gpio_bank, gpio_line) return tmp def load(cfg None): global config config cfg except ModuleNotFoundError as e: pass key gpio(21, gpio_chip 2, line_mode line_request.DIRECTION_INPUT) led0 gpio(4, gpio_chip 2, line_mode line_request.DIRECTION_OUTPUT) led1 gpio(5, gpio_chip 2, line_mode line_request.DIRECTION_OUTPUT) import time import ifcfg import os def check_ifconfig(): result [] for name, interface in ifcfg.interfaces().items(): if name in ['eth0', 'wlan0'] and interface['inet']: result.append(name) return result try: if (0 key.get_value()): os.system(\"export LD_LIBRARY_PATH /opt/lib:LD_LIBRARY_PATH && /opt/bin/sample_vin_vo c 2 e 1 s 0 v dsi0@480x854@60 &\") led1.set_value(1) while True: led0.set_value(1) time.sleep(0.2) led0.set_value(0) time.sleep(0.2) tmp check_ifconfig() if len(tmp) > 1: led0.set_value(0) led1.set_value(0) test_flag True break while (0 key.get_value()): time.sleep(0.2) os.system(\"aplay /home/res/boot.wav\") led0.set_value(1) led1.set_value(1) import pyaudio chunk 1024 # Each chunk will consist of 1024 samples sample_format pyaudio.paInt16 # 16 bits per sample channels 2 # Number of audio channels fs 44100 # Record at 44100 samples per second p pyaudio.PyAudio() stream p.open(format sample_format, channels channels, rate fs, frames_per_buffer chunk, input True, output True) while (1 key.get_value()): data stream.read(chunk, exception_on_overflow False) stream.write(data) while (0 key.get_value()): time.sleep(0.2) os.system('killall sample_vin_vo') os.system('killall sample_vin_vo') # Stop and close the Stream and PyAudio stream.stop_stream() stream.close() p.terminate() except Exception as e: print(e) finally: if test_flag: led0.set_value(0) led1.set_value(0) ''' import pyaudio try: chunk 1024 # Each chunk will consist of 1024 samples sample_format pyaudio.paInt16 # 16 bits per sample channels 2 # Number of audio channels fs 44100 # Record at 44100 samples per second time_in_seconds 300 p pyaudio.PyAudio() stream p.open(format sample_format, channels channels, rate fs, frames_per_buffer chunk, input True, output True) for i in range(0, int(fs / chunk * time_in_seconds)): data stream.read(chunk) stream.write(data) finally: # Stop and close the Stream and PyAudio stream.stop_stream() stream.close() p.terminate() ''' ``` ## Built in applications ### IPCDemo This is an IPC (IP camera) demo program, and its functions are as follows: ISP: Transfor the RAW data stream from Sensor into YUV data stream, and output it in 3 channels IVPS: Image Video Processing submoule, Resize、Crop、Rotate the video image, or change the video image into multiple ones. VENC / JENC：Video / JPEG encoded output. Detect: Face detection or structure detection. Web display: H264 Web stream and provides to view real time Web video. RTSP Stream: H264 stream RTSP package and transmission. TF card Video storage: Package H264 stream into MP4 format and save it to TF card or FLASH. <p align \"center\"> <iframe src \"//player.bilibili.com/player.html?aid 260625114&bvid BV1me411T7g8&cid 837160730&page 1\" scrolling \"no\" border \"0\" frameborder \"no\" framespacing \"0\" allowfullscreen \"true\" style \"max width:640px; max height:480px;\"> </iframe> </p> <p align \"center\"> <iframe src \"//player.bilibili.com/player.html?aid 688159412&bvid BV1p24y1d7Te&cid 837167669&page 1\" scrolling \"no\" border \"0\" frameborder \"no\" framespacing \"0\" allowfullscreen \"true\" style \"max width:640px; max height:480px;\"> </iframe> </p> #### Usages Run the following command to start this application, and we can visit the ip address ([USB OTG RNDIS](#rndis) or network ip address) of AXera Pi and add port `8080` in web browser to see the streaming video. ```bash /opt/bin/IPCDemo/run.sh /opt/bin/IPCDemo/config/gc4653_config.json ``` We use the default camera gc4653 as the example, change the config_json file of your real camera in the end of example command with following choice. ![ipc_demo_json](./assets/flash_system/ipc_demo_json.jpg) Running this application, lots of logs are shown. ![ipc](./../../../zh/maixIII/assets/ipc.jpg) Open the ip address of AXera Pi with port `8080` in the web browser, here I take `192.168.233.1:8080` as an example (this ip address is the RNDIS ip address of AXera Pi and can be visited after connecting the computer with the USB OTG port of AXera Pi), click the blue frame to login. Sadly this application is only Chinese language support, you can use web translation tool to translate the web content into your language. ![ipc admin](./../../../zh/maixIII/assets/ipc admin.jpg) ![ipc_demo_translation](./assets/flash_system/ipc_demo_translation.jpg) #### Snapshot and Record **Snapshot** Login to the web stream service (Visit the ip address of AXera Pi port `8080` after running IPCDemo), there is a camera icon and record icon in the bottom right stream video corner. Click the camera icon to snapshot the video, and the snapshot picture will be automatically downloaded for viewing. ![ipc web](./../../../zh/maixIII/assets/ipc web.jpg) **Record** Click the record icon in the bottom right stream video corner to record the video (mp4 format), and click the record icon to stop recording. ![ipc mp4](./../../../zh/maixIII/assets/ipc mp4.jpg) Recording Unrecording ![ipc_recording](./assets/flash_system/ipc_recording.jpg) ![ipc_unrecording](./assets/flash_system/ipc_unrecording.jpg) And we can play or download the recorded video in following step marked with ① and ② in the following picture ![ipc config](./../../../zh/maixIII/assets/ipc config.jpg) **20221017 demo updating** we set the video automatically saved to `/opt/mp4` directory, with which you can use this board as a surveillance network camera after mounting a hard disk. ![ipc_recording_video](./assets/flash_system/ipc_recording_video.jpg) #### Face detection In the IPCDemo, we also set other functions, like `Face detection` or `LPRnet` Login to the IPC website (Visit the ip address of AXera Pi after running IPCDemo) first, then click what's the following picture marked for your need, use web translation tool to translate these settings. ![lprnet_detection](./assets/flash_system/lprnet_detection.jpg) Tick your needed configurations, we can do face detection in the preview page. IPCDemo application will automatically detect the face and take snapshot, and we can see the detected face picture in the following preview blank area. Left: Face detection. Right: Body detection <html> <img src \"./../../../zh/maixIII/assets/ipc model.jpg\" width 45%> <img src \"./../../../zh/maixIII/assets/ipc person.jpg\" width 45%> </html> #### LPRnet Login to the IPC website (Visit the ip address of AXera Pi after running IPCDemo) first, then click what's the following picture marked for your need, use web translation tool to translate these settings. ![lprnet_detection](./assets/flash_system/lprnet_detection.jpg) Tick your needed configurations, we can do LPRnet detection in the preview page. IPCDemo application will automatically detect the LPRnet and take snapshot, and we can see the detected LPRnet result in the following preview blank area. ![ipc car](./../../../zh/maixIII/assets/ipc car.jpg) ### rtsp > **rtsp**：Real Time Streaming Protocol is an application level network protocol designed for multiplexing and packetizing multimedia transport streams (such as interactive media, video and audio) over a suitable transport protocol. Here we use [VLC Media Player](https://www.videolan.org/vlc/) to play the rtsp stream video. ![vl yolov5s](./../../../zh/maixIII/assets/vlc yolov5s.jpg) Run the following cammand on AXera Pi, open `VLC Media Player` and use hoykey `Ctrl + N` to open a network stream video, enter the ip address of AXera Pi like `rtsp://192.168.233.1:8554/axstream0` to play the stream video. Run this command on AXera Pi: ```bash /home/examples/vin_ivps_joint_venc_rtsp_vo_onvif_mp4v2/run.sh ``` The log of AXera Pi running rtsp stream video ![vlr run](./../../../zh/maixIII/assets/vlc run.jpg) Enter the ip address of AXera Pi for playing the stream video, use hoykey `Ctrl + P` to play after entering the ip address of AXera Pi. ![vlc urt](./../../../zh/maixIII/assets/vlc urt.jpg) The rtsp example is as follows: <html> <img src \"./../../../zh/maixIII/assets/rtsp display.jpg\" width 48%> <img src \"./../../../zh/maixIII/assets/rtsp axpi.jpg\" width 48%> </html> Edit `/home/examples/vin_ivps_joint_venc_rtsp_vo_onvif_mp4v2/run.sh` if your camera is not gc4653. ![rtsp_stream_shell](./assets/flash_system/rtsp_stream_shell.jpg) #### ffplay Except `VCL`, we can use `ffplay` to play the stream video. **ffplay** :[Click me to download windows edition ffplat](https://dl.sipeed.com/shareURL/MaixIII/AXera/09_Software_tool), for linux user run command `sudo apt install ffmpeg` to install ffplay. After getting ffplay ready, run following command in command line to play the rtsp stream video of AXera Pi, change the ip address if necessary. ```bash ffplay rtsp://192.168.233.1:8554/axstream0 fflags nobuffer ``` ### ONVIF ODM **ONVIF Device Manager**：[Click to download](https://sourceforge.net/projects/onvifdm/) Different from VLC player, ODM has many different usages. ![odm](./../../../zh/maixIII/assets/odm.jpg) Run following command on AXera Pi, the screen on AXera Pi displays the yolov5s model, then we use `ODM` to display the content on computer. ```bash /home/examples/vin_ivps_joint_venc_rtsp_vo_onvif_mp4v2/run.sh ``` Edit `/home/examples/vin_ivps_joint_venc_rtsp_vo_onvif_mp4v2/run.sh` file to switch camera if your screen failed display the camera content. ![onvif_changing_camera](./assets/flash_system/onvif_changing_camera.jpg) Screen displays the camera content: ![odm mipi](./../../../zh/maixIII/assets/odm mipi.jpg) Run the `ONVIF Device Manager`, click `Refresh` to scan device, make sure you have connected computer with USB OTG port of AXera Pi and there is RNDIS device in your computer manager (Here we take RNDIS as network example and we play the video through `192.168.233.1`). After clicking `Refresh` there is a IP Camera with IP `192.168.233.1`, choose it and click `Live` video to stream the video. ![onvif_rndis_device](./assets/flash_system/onvif_rndis_device.jpg) ![onvif_example](./assets/flash_system/onvif_example.jpg) And we just take RNDIS as example, other IP address like wireless or ethernrt are also fine. Make sure your nerwork is good, and bad network can not use `ONVIF Device Manager` with good experience. Switch model > `20221116` we set the different camera parameters in `run.sh` > `20221111` we set yolov5s face/object detection model in the system image, read the following content to see how to edit the script and switch model. ``` bash nano /home/examples/vin_ivps_joint_venc_rtsp_vo_onvif_mp4v2/run.sh ``` Run this command on AXera Pi, we can edit `run.sh` shell annotation `#` to switch model or load other model. Use hotkey `Ctrl + x` to save your changes. ![model save](./../../../zh/maixIII/assets/model save.jpg) Follow the instruction press `Y` to save modified buffer. And use the default file name. Run `run.sh` we can see different detection effects on the screen of Axera Pi. ![model file](./../../../zh/maixIII/assets/model file.jpg) **Press key and Record MP4** While running `run.sh`, click `USER` key to record video, and **LED0** is on when AXera Pi is recording. ![odm mp4](./../../../zh/maixIII/assets/odm mp4.jpg) Click `USER` key again to stop recording and **LED0** is off ![odm adb](./../../../zh/maixIII/assets/odm adb.png) The recorded mp4 files are in **`home/examples/`** directory. ![mp4 file](./../../../zh/maixIII/assets/mp4 file.png) ### PP_human Run following command on AXera Pi, screen displays the background picture, and when capturing a human, it will be shown on the screen. ```bash /home/examples/vin_ivps_joint_vo_pp_human_seg/run.sh ``` ![pp_human](./../../../zh/maixIII/assets/pp_human.jpg) Use the following command to edit the script file, change the annotation `#` to switch camera. ```bash nano /home/examples/vin_ivps_joint_vo_pp_human_seg/run.sh ``` Use hoykey `Ctrl + X` and follow instructions we save the change of editing. ![pp_human_adb](./../../../zh/maixIII/assets/pp_humana_adb.png) ### uvc_vo **usb uvc gadget**：[Github repository](https://github.com/junhuanchen/usb uvc gadget) This demo is not very stable. For the first time running this demo application, the usb otg rndis will change into usb otg uvc and lead to the device reboot. After that run this demo application again then everything is right. If your screen displays green interface, this means the wrong camera configuration, edit the script to switch camera. Before running this demo, connecting both USB UART and USB OTG port, we use USB UART port to control AXera Pi and use USB OTG to transfer uvc stream to the computer. Run the following command to start this demo application. ```bash /home/examples/vin_ivps_joint_venc_uvc_vo/run.sh ``` ![uvc_adb](./../../../zh/maixIII/assets/uvc_adb.png) Run your computer camera application to display the camera detection of AXera Pi. ![uvc_vo](./../../../zh/maixIII/assets/uvc_vo.jpg) The following command can be used to `start`, `stop` or `restore` `uvc demo. ```bash /home/usb uvc gadget/uvc gadget.sh #start/stop/restore ``` **Android phone uvc** This uvc demo application can also display on Android phone which support OTG mode. Download and install a USB camera application on the phone first. Connect USB OTG port with Android phone, and run `/home/examples/vin_ivps_joint_venc_uvc_vo/run.sh` on AXera Pi by USB UART or SSH to start uvc demo, and start the USB camera application on the Android phone, then the camera content displays both on AXera Pi screen and Android phone. ![uvc_phone](./../../../zh/maixIII/assets/uvc_phone.jpg) This demo can run at system finishing boot if it's written into [rc.local](#boot script) ### lvgl7 UI Run following command we can run this lvgl demo. ```bash /home/bin/sample_vin_ivps_joint_vo_lvgl c 0 ``` ![lvgi_adb](./../../../zh/maixIII/assets/lvgl_adb.png) <p align \"center\"> <iframe src \"//player.bilibili.com/player.html?aid 690497396&bvid BV1n24y1C7DN&cid 901748014&page 1\" scrolling \"no\" border \"0\" frameborder \"no\" framespacing \"0\" allowfullscreen \"true\"> </iframe> </p> ### Python API It's also good to program your application via python, read [Python on Maix III AXera Pi](https://wiki.sipeed.com/hardware/en/maixIII/ax pi/python_api.html) for more. ### Human Parts detection This demo has been built in system, run following command to experience it. ```bash ./home/run.sh ``` And there are many other models in this system, edit `run.sh` to load and test other models. ```bash sample_vin_ivps_joint_vo sample_vin_ivps_joint_venc_rtsp_vo ``` ```bash yolov5_seg.json yolov7.json yolox.json yolov5s_face.json pp_human_seg.json ax_pose.json hrnet_animal_pose.json hand_pose.json ``` Use command `nano /home/run.sh` to enable the model you want to try. And change the camera by edit ` c 2` to switch to another camera. ![ax_poes_sh](./../../../zh/maixIII/assets/ax_poes_sh.jpg) <p align \"center\"> <iframe src \"//player.bilibili.com/player.html?aid 647932316&bvid BV1Pe4y1W7n6&cid 901750338&page 1\" scrolling \"no\" border \"0\" frameborder \"no\" framespacing \"0\" allowfullscreen \"true\"> </iframe> </p> More built in examples There are more examples in `/home/bin`, run then if you want. ```bash root@AXERA:~# ls /home/bin sample_h264_ivps_joint_vo sample_v4l2_user_ivps_joint_vo sample_vin_ivps_joint_vo sample_vin_joint sample_rtsp_ivps_joint sample_vin_ivps_joint_venc_rtsp sample_vin_ivps_joint_vo_h265 sample_rtsp_ivps_joint_rtsp_vo sample_vin_ivps_joint_venc_rtsp_vo sample_vin_ivps_joint_vo_lvgl ``` Here is an example runnning `sample_vin_ivps_joint_vo_h265`, and ` c 2` means the camera choice. ```bash /home/bin/sample_vin_ivps_joint_vo_h265 c 2 ``` These are the command logs. ![sample](./../../../zh/maixIII/assets/sample.jpg) ### sherpa ncnn (Chinese and English speech recognition) #### Basic usage Open directory `/home/sherpa ncnn m3axpi`, here are the demos. ```bash cd /home/sherpa ncnn m3axpi ``` Chinese speech recognition ```bash ./sherpa ncnn alsa \\ ./sherpa ncnn streaming zipformer small bilingual zh en 2023 02 16/tokens.txt \\ ./sherpa ncnn streaming zipformer small bilingual zh en 2023 02 16/encoder_jit_trace pnnx.ncnn.param \\ ./sherpa ncnn streaming zipformer small bilingual zh en 2023 02 16/encoder_jit_trace pnnx.ncnn.bin \\ ./sherpa ncnn streaming zipformer small bilingual zh en 2023 02 16/decoder_jit_trace pnnx.ncnn.param \\ ./sherpa ncnn streaming zipformer small bilingual zh en 2023 02 16/decoder_jit_trace pnnx.ncnn.bin \\ ./sherpa ncnn streaming zipformer small bilingual zh en 2023 02 16/joiner_jit_trace pnnx.ncnn.param \\ ./sherpa ncnn streaming zipformer small bilingual zh en 2023 02 16/joiner_jit_trace pnnx.ncnn.bin \\ \"hw:0,0\" \\ 4 \\ greedy_search ``` English speech recognition ```bash ./sherpa ncnn alsa \\ ./sherpa ncnn conv emformer transducer small 2023 01 09/tokens.txt \\ ./sherpa ncnn conv emformer transducer small 2023 01 09/encoder_jit_trace pnnx.ncnn.int8.param \\ ./sherpa ncnn conv emformer transducer small 2023 01 09/encoder_jit_trace pnnx.ncnn.int8.bin \\ ./sherpa ncnn conv emformer transducer small 2023 01 09/decoder_jit_trace pnnx.ncnn.param \\ ./sherpa ncnn conv emformer transducer small 2023 01 09/decoder_jit_trace pnnx.ncnn.bin \\ ./sherpa ncnn conv emformer transducer small 2023 01 09/joiner_jit_trace pnnx.ncnn.int8.param \\ ./sherpa ncnn conv emformer transducer small 2023 01 09/joiner_jit_trace pnnx.ncnn.int8.bin \\ \"hw:0,0\" \\ 2 \\ greedy_search ``` Running the command above, speak to the MIC on AXera Pi or play audio, detection results are printed to terminal. ![sherpa](./assets/flash_system/axpi_english_audio_detection.png) #### Update sherpa ncnn You can update the speech model to get better experience. Open the directory `/home/sherpa ncnn m3axpi` first. ```bash cd /home/sherpa ncnn m3axpi ``` We need to enable the large files first, install `git lfs` in your Axpi, and enable it. ```bash sudo apt install git lfs git lfs install ``` Then clone the latest sherpa ncnn speech model, make sure you are in `/home/sherpa ncnn m3axpi` directory. ```bash git clone https://huggingface.co/marcoyang/sherpa ncnn streaming zipformer zh 14M 2023 02 23 ``` ![sherpa_ncnn_update_model](./assets/flash_system/sherpa_ncnn_update_model.png) Then you can run following code to test the model(Make sure you are in `/home/sherpa ncnn m3axpi` directory): ```bash ./sherpa ncnn alsa ./sherpa ncnn streaming zipformer zh 14M 2023 02 23/tokens.txt \\ ./sherpa ncnn streaming zipformer zh 14M 2023 02 23/encoder_jit_trace pnnx.ncnn.param \\ ./sherpa ncnn streaming zipformer zh 14M 2023 02 23/encoder_jit_trace pnnx.ncnn.bin \\ ./sherpa ncnn streaming zipformer zh 14M 2023 02 23/decoder_jit_trace pnnx.ncnn.param \\ ./sherpa ncnn streaming zipformer zh 14M 2023 02 23/decoder_jit_trace pnnx.ncnn.bin \\ ./sherpa ncnn streaming zipformer zh 14M 2023 02 23/joiner_jit_trace pnnx.ncnn.param \\ ./sherpa ncnn streaming zipformer zh 14M 2023 02 23/joiner_jit_trace pnnx.ncnn.bin \\ \"hw:0,0\" 2 greedy_search ```"},"/hardware/en/maixIII/ax-pi/rndis.html":{"title":"RNDIS","content":" title: RNDIS tags: rndis update: date: 2022 12 23 version: v0.1 author: wonder content: Create file This essay just tells how to fix the RNDIS error in windows device manager. ![rndis_error_device](./assets/flash_system/rndis_error_device.jpg) ## RNDIS interduction Visit [Introduction to Remote NDIS (RNDIS)](https://learn.microsoft.com/en us/windows hardware/drivers/network/remote ndis rndis 2?source recommendations) to know more. ## Steps Right click the error RNDIS device and choose Update driver ![rndis_update_driver](./assets/rndis/rndis_update_driver.png) Choose the `Browse my computer for drivers` ![rndis_broswer_driver](./assets/rndis/rndis_broswer_driver.jpg) Choose where the arrow points at ![rndis_pick_driver](./assets/rndis/rndis_pick_driver.jpg) Network adapter ![rndis_net_adapter](./assets/rndis/rndis_net_adapter.jpg) Compatible Device ![rndis_compatible_device](./assets/rndis/rndis_compatible_device.jpg) Then there is no error on the RNDIS device ![rndis_no_error](./assets/rndis/rndis_no_error.jpg)"},"/hardware/en/no_translate.html":{"title":"no translation","content":" title: no translation class: md_page <div id \"visit_from\"></div> <div id \"no_translate_hint\">This page not translated yet</div> <div> <span id \"visit_hint\">Please visit</span> <a id \"translate_src\"></a> </div> <div> <script> function getQueryVariable(variable) { var query window.location.search.substring(1); var vars query.split(\"&\"); for (var i 0;i<vars.length;i++) { var pair vars[i].split(\" \"); if(pair[0] variable){return pair[1];} } return(false); } var ref getQueryVariable(\"ref\"); var from getQueryVariable(\"from\"); var link document.getElementById(\"translate_src\"); var fromDis document.getElementById(\"visit_from\"); link.href ref; link.text ref; fromDis.innerHTML from; </script> </div>"}}